// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetReposOwnerRepoArchiveFormatPathHandlerFunc turns a function with the right signature into a get repos owner repo archive format path handler
type GetReposOwnerRepoArchiveFormatPathHandlerFunc func(GetReposOwnerRepoArchiveFormatPathParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReposOwnerRepoArchiveFormatPathHandlerFunc) Handle(params GetReposOwnerRepoArchiveFormatPathParams) middleware.Responder {
	return fn(params)
}

// GetReposOwnerRepoArchiveFormatPathHandler interface for that can handle valid get repos owner repo archive format path params
type GetReposOwnerRepoArchiveFormatPathHandler interface {
	Handle(GetReposOwnerRepoArchiveFormatPathParams) middleware.Responder
}

// NewGetReposOwnerRepoArchiveFormatPath creates a new http.Handler for the get repos owner repo archive format path operation
func NewGetReposOwnerRepoArchiveFormatPath(ctx *middleware.Context, handler GetReposOwnerRepoArchiveFormatPathHandler) *GetReposOwnerRepoArchiveFormatPath {
	return &GetReposOwnerRepoArchiveFormatPath{Context: ctx, Handler: handler}
}

/*GetReposOwnerRepoArchiveFormatPath swagger:route GET /repos/{owner}/{repo}/{archive_format}/{path} getReposOwnerRepoArchiveFormatPath

Get archive link.
This method will return a 302 to a URL to download a tarball or zipball
archive for a repository. Please make sure your HTTP framework is
configured to follow redirects or you will need to use the Location header
to make a second GET request.
Note: For private repositories, these links are temporary and expire quickly.


*/
type GetReposOwnerRepoArchiveFormatPath struct {
	Context *middleware.Context
	Handler GetReposOwnerRepoArchiveFormatPathHandler
}

func (o *GetReposOwnerRepoArchiveFormatPath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetReposOwnerRepoArchiveFormatPathParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
