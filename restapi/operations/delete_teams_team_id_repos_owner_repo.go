// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteTeamsTeamIDReposOwnerRepoHandlerFunc turns a function with the right signature into a delete teams team ID repos owner repo handler
type DeleteTeamsTeamIDReposOwnerRepoHandlerFunc func(DeleteTeamsTeamIDReposOwnerRepoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTeamsTeamIDReposOwnerRepoHandlerFunc) Handle(params DeleteTeamsTeamIDReposOwnerRepoParams) middleware.Responder {
	return fn(params)
}

// DeleteTeamsTeamIDReposOwnerRepoHandler interface for that can handle valid delete teams team ID repos owner repo params
type DeleteTeamsTeamIDReposOwnerRepoHandler interface {
	Handle(DeleteTeamsTeamIDReposOwnerRepoParams) middleware.Responder
}

// NewDeleteTeamsTeamIDReposOwnerRepo creates a new http.Handler for the delete teams team ID repos owner repo operation
func NewDeleteTeamsTeamIDReposOwnerRepo(ctx *middleware.Context, handler DeleteTeamsTeamIDReposOwnerRepoHandler) *DeleteTeamsTeamIDReposOwnerRepo {
	return &DeleteTeamsTeamIDReposOwnerRepo{Context: ctx, Handler: handler}
}

/*DeleteTeamsTeamIDReposOwnerRepo swagger:route DELETE /teams/{teamId}/repos/{owner}/{repo} deleteTeamsTeamIdReposOwnerRepo

In order to remove a repository from a team, the authenticated user must be an owner of the org that the team is associated with. NOTE: This does not delete the repository, it just removes it from the team.

*/
type DeleteTeamsTeamIDReposOwnerRepo struct {
	Context *middleware.Context
	Handler DeleteTeamsTeamIDReposOwnerRepoHandler
}

func (o *DeleteTeamsTeamIDReposOwnerRepo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteTeamsTeamIDReposOwnerRepoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
