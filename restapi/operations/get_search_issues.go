// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSearchIssuesHandlerFunc turns a function with the right signature into a get search issues handler
type GetSearchIssuesHandlerFunc func(GetSearchIssuesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSearchIssuesHandlerFunc) Handle(params GetSearchIssuesParams) middleware.Responder {
	return fn(params)
}

// GetSearchIssuesHandler interface for that can handle valid get search issues params
type GetSearchIssuesHandler interface {
	Handle(GetSearchIssuesParams) middleware.Responder
}

// NewGetSearchIssues creates a new http.Handler for the get search issues operation
func NewGetSearchIssues(ctx *middleware.Context, handler GetSearchIssuesHandler) *GetSearchIssues {
	return &GetSearchIssues{Context: ctx, Handler: handler}
}

/*GetSearchIssues swagger:route GET /search/issues getSearchIssues

Find issues by state and keyword. (This method returns up to 100 results per page.)

*/
type GetSearchIssues struct {
	Context *middleware.Context
	Handler GetSearchIssuesHandler
}

func (o *GetSearchIssues) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSearchIssuesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
