// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOrgsOrgReposHandlerFunc turns a function with the right signature into a post orgs org repos handler
type PostOrgsOrgReposHandlerFunc func(PostOrgsOrgReposParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOrgsOrgReposHandlerFunc) Handle(params PostOrgsOrgReposParams) middleware.Responder {
	return fn(params)
}

// PostOrgsOrgReposHandler interface for that can handle valid post orgs org repos params
type PostOrgsOrgReposHandler interface {
	Handle(PostOrgsOrgReposParams) middleware.Responder
}

// NewPostOrgsOrgRepos creates a new http.Handler for the post orgs org repos operation
func NewPostOrgsOrgRepos(ctx *middleware.Context, handler PostOrgsOrgReposHandler) *PostOrgsOrgRepos {
	return &PostOrgsOrgRepos{Context: ctx, Handler: handler}
}

/*PostOrgsOrgRepos swagger:route POST /orgs/{org}/repos postOrgsOrgRepos

Create a new repository for the authenticated user. OAuth users must supply
repo scope.


*/
type PostOrgsOrgRepos struct {
	Context *middleware.Context
	Handler PostOrgsOrgReposHandler
}

func (o *PostOrgsOrgRepos) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOrgsOrgReposParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
