// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetOrgsOrgMembersUsernameHandlerFunc turns a function with the right signature into a get orgs org members username handler
type GetOrgsOrgMembersUsernameHandlerFunc func(GetOrgsOrgMembersUsernameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOrgsOrgMembersUsernameHandlerFunc) Handle(params GetOrgsOrgMembersUsernameParams) middleware.Responder {
	return fn(params)
}

// GetOrgsOrgMembersUsernameHandler interface for that can handle valid get orgs org members username params
type GetOrgsOrgMembersUsernameHandler interface {
	Handle(GetOrgsOrgMembersUsernameParams) middleware.Responder
}

// NewGetOrgsOrgMembersUsername creates a new http.Handler for the get orgs org members username operation
func NewGetOrgsOrgMembersUsername(ctx *middleware.Context, handler GetOrgsOrgMembersUsernameHandler) *GetOrgsOrgMembersUsername {
	return &GetOrgsOrgMembersUsername{Context: ctx, Handler: handler}
}

/*GetOrgsOrgMembersUsername swagger:route GET /orgs/{org}/members/{username} getOrgsOrgMembersUsername

Check if a user is, publicly or privately, a member of the organization.

*/
type GetOrgsOrgMembersUsername struct {
	Context *middleware.Context
	Handler GetOrgsOrgMembersUsernameHandler
}

func (o *GetOrgsOrgMembersUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetOrgsOrgMembersUsernameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
