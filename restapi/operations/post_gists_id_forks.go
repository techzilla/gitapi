// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostGistsIDForksHandlerFunc turns a function with the right signature into a post gists ID forks handler
type PostGistsIDForksHandlerFunc func(PostGistsIDForksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostGistsIDForksHandlerFunc) Handle(params PostGistsIDForksParams) middleware.Responder {
	return fn(params)
}

// PostGistsIDForksHandler interface for that can handle valid post gists ID forks params
type PostGistsIDForksHandler interface {
	Handle(PostGistsIDForksParams) middleware.Responder
}

// NewPostGistsIDForks creates a new http.Handler for the post gists ID forks operation
func NewPostGistsIDForks(ctx *middleware.Context, handler PostGistsIDForksHandler) *PostGistsIDForks {
	return &PostGistsIDForks{Context: ctx, Handler: handler}
}

/*PostGistsIDForks swagger:route POST /gists/{id}/forks postGistsIdForks

Fork a gist.

*/
type PostGistsIDForks struct {
	Context *middleware.Context
	Handler PostGistsIDForksHandler
}

func (o *PostGistsIDForks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostGistsIDForksParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
