// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUserKeysHandlerFunc turns a function with the right signature into a get user keys handler
type GetUserKeysHandlerFunc func(GetUserKeysParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserKeysHandlerFunc) Handle(params GetUserKeysParams) middleware.Responder {
	return fn(params)
}

// GetUserKeysHandler interface for that can handle valid get user keys params
type GetUserKeysHandler interface {
	Handle(GetUserKeysParams) middleware.Responder
}

// NewGetUserKeys creates a new http.Handler for the get user keys operation
func NewGetUserKeys(ctx *middleware.Context, handler GetUserKeysHandler) *GetUserKeys {
	return &GetUserKeys{Context: ctx, Handler: handler}
}

/*GetUserKeys swagger:route GET /user/keys getUserKeys

List your public keys.
Lists the current user's keys. Management of public keys via the API requires
that you are authenticated through basic auth, or OAuth with the 'user', 'write:public_key' scopes.


*/
type GetUserKeys struct {
	Context *middleware.Context
	Handler GetUserKeysHandler
}

func (o *GetUserKeys) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserKeysParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
