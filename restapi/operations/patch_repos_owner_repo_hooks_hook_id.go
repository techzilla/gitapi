// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PatchReposOwnerRepoHooksHookIDHandlerFunc turns a function with the right signature into a patch repos owner repo hooks hook ID handler
type PatchReposOwnerRepoHooksHookIDHandlerFunc func(PatchReposOwnerRepoHooksHookIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchReposOwnerRepoHooksHookIDHandlerFunc) Handle(params PatchReposOwnerRepoHooksHookIDParams) middleware.Responder {
	return fn(params)
}

// PatchReposOwnerRepoHooksHookIDHandler interface for that can handle valid patch repos owner repo hooks hook ID params
type PatchReposOwnerRepoHooksHookIDHandler interface {
	Handle(PatchReposOwnerRepoHooksHookIDParams) middleware.Responder
}

// NewPatchReposOwnerRepoHooksHookID creates a new http.Handler for the patch repos owner repo hooks hook ID operation
func NewPatchReposOwnerRepoHooksHookID(ctx *middleware.Context, handler PatchReposOwnerRepoHooksHookIDHandler) *PatchReposOwnerRepoHooksHookID {
	return &PatchReposOwnerRepoHooksHookID{Context: ctx, Handler: handler}
}

/*PatchReposOwnerRepoHooksHookID swagger:route PATCH /repos/{owner}/{repo}/hooks/{hookId} patchReposOwnerRepoHooksHookId

Edit a hook.

*/
type PatchReposOwnerRepoHooksHookID struct {
	Context *middleware.Context
	Handler PatchReposOwnerRepoHooksHookIDHandler
}

func (o *PatchReposOwnerRepoHooksHookID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchReposOwnerRepoHooksHookIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
