// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUsersUsernameKeysHandlerFunc turns a function with the right signature into a get users username keys handler
type GetUsersUsernameKeysHandlerFunc func(GetUsersUsernameKeysParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUsersUsernameKeysHandlerFunc) Handle(params GetUsersUsernameKeysParams) middleware.Responder {
	return fn(params)
}

// GetUsersUsernameKeysHandler interface for that can handle valid get users username keys params
type GetUsersUsernameKeysHandler interface {
	Handle(GetUsersUsernameKeysParams) middleware.Responder
}

// NewGetUsersUsernameKeys creates a new http.Handler for the get users username keys operation
func NewGetUsersUsernameKeys(ctx *middleware.Context, handler GetUsersUsernameKeysHandler) *GetUsersUsernameKeys {
	return &GetUsersUsernameKeys{Context: ctx, Handler: handler}
}

/*GetUsersUsernameKeys swagger:route GET /users/{username}/keys getUsersUsernameKeys

List public keys for a user.
Lists the verified public keys for a user. This is accessible by anyone.


*/
type GetUsersUsernameKeys struct {
	Context *middleware.Context
	Handler GetUsersUsernameKeysHandler
}

func (o *GetUsersUsernameKeys) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUsersUsernameKeysParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
