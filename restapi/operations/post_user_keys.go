// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostUserKeysHandlerFunc turns a function with the right signature into a post user keys handler
type PostUserKeysHandlerFunc func(PostUserKeysParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUserKeysHandlerFunc) Handle(params PostUserKeysParams) middleware.Responder {
	return fn(params)
}

// PostUserKeysHandler interface for that can handle valid post user keys params
type PostUserKeysHandler interface {
	Handle(PostUserKeysParams) middleware.Responder
}

// NewPostUserKeys creates a new http.Handler for the post user keys operation
func NewPostUserKeys(ctx *middleware.Context, handler PostUserKeysHandler) *PostUserKeys {
	return &PostUserKeys{Context: ctx, Handler: handler}
}

/*PostUserKeys swagger:route POST /user/keys postUserKeys

Create a public key.

*/
type PostUserKeys struct {
	Context *middleware.Context
	Handler PostUserKeysHandler
}

func (o *PostUserKeys) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostUserKeysParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
