// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostReposOwnerRepoHooksHookIDTestsHandlerFunc turns a function with the right signature into a post repos owner repo hooks hook ID tests handler
type PostReposOwnerRepoHooksHookIDTestsHandlerFunc func(PostReposOwnerRepoHooksHookIDTestsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostReposOwnerRepoHooksHookIDTestsHandlerFunc) Handle(params PostReposOwnerRepoHooksHookIDTestsParams) middleware.Responder {
	return fn(params)
}

// PostReposOwnerRepoHooksHookIDTestsHandler interface for that can handle valid post repos owner repo hooks hook ID tests params
type PostReposOwnerRepoHooksHookIDTestsHandler interface {
	Handle(PostReposOwnerRepoHooksHookIDTestsParams) middleware.Responder
}

// NewPostReposOwnerRepoHooksHookIDTests creates a new http.Handler for the post repos owner repo hooks hook ID tests operation
func NewPostReposOwnerRepoHooksHookIDTests(ctx *middleware.Context, handler PostReposOwnerRepoHooksHookIDTestsHandler) *PostReposOwnerRepoHooksHookIDTests {
	return &PostReposOwnerRepoHooksHookIDTests{Context: ctx, Handler: handler}
}

/*PostReposOwnerRepoHooksHookIDTests swagger:route POST /repos/{owner}/{repo}/hooks/{hookId}/tests postReposOwnerRepoHooksHookIdTests

Test a push hook.
This will trigger the hook with the latest push to the current repository
if the hook is subscribed to push events. If the hook is not subscribed
to push events, the server will respond with 204 but no test POST will
be generated.
Note: Previously /repos/:owner/:repo/hooks/:id/tes


*/
type PostReposOwnerRepoHooksHookIDTests struct {
	Context *middleware.Context
	Handler PostReposOwnerRepoHooksHookIDTestsHandler
}

func (o *PostReposOwnerRepoHooksHookIDTests) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostReposOwnerRepoHooksHookIDTestsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
