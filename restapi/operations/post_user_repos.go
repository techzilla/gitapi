// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostUserReposHandlerFunc turns a function with the right signature into a post user repos handler
type PostUserReposHandlerFunc func(PostUserReposParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUserReposHandlerFunc) Handle(params PostUserReposParams) middleware.Responder {
	return fn(params)
}

// PostUserReposHandler interface for that can handle valid post user repos params
type PostUserReposHandler interface {
	Handle(PostUserReposParams) middleware.Responder
}

// NewPostUserRepos creates a new http.Handler for the post user repos operation
func NewPostUserRepos(ctx *middleware.Context, handler PostUserReposHandler) *PostUserRepos {
	return &PostUserRepos{Context: ctx, Handler: handler}
}

/*PostUserRepos swagger:route POST /user/repos postUserRepos

Create a new repository for the authenticated user. OAuth users must supply
repo scope.


*/
type PostUserRepos struct {
	Context *middleware.Context
	Handler PostUserReposHandler
}

func (o *PostUserRepos) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostUserReposParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
