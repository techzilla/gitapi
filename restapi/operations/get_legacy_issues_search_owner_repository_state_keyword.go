// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandlerFunc turns a function with the right signature into a get legacy issues search owner repository state keyword handler
type GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandlerFunc func(GetLegacyIssuesSearchOwnerRepositoryStateKeywordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandlerFunc) Handle(params GetLegacyIssuesSearchOwnerRepositoryStateKeywordParams) middleware.Responder {
	return fn(params)
}

// GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandler interface for that can handle valid get legacy issues search owner repository state keyword params
type GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandler interface {
	Handle(GetLegacyIssuesSearchOwnerRepositoryStateKeywordParams) middleware.Responder
}

// NewGetLegacyIssuesSearchOwnerRepositoryStateKeyword creates a new http.Handler for the get legacy issues search owner repository state keyword operation
func NewGetLegacyIssuesSearchOwnerRepositoryStateKeyword(ctx *middleware.Context, handler GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandler) *GetLegacyIssuesSearchOwnerRepositoryStateKeyword {
	return &GetLegacyIssuesSearchOwnerRepositoryStateKeyword{Context: ctx, Handler: handler}
}

/*GetLegacyIssuesSearchOwnerRepositoryStateKeyword swagger:route GET /legacy/issues/search/{owner}/{repository}/{state}/{keyword} getLegacyIssuesSearchOwnerRepositoryStateKeyword

Find issues by state and keyword.

*/
type GetLegacyIssuesSearchOwnerRepositoryStateKeyword struct {
	Context *middleware.Context
	Handler GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandler
}

func (o *GetLegacyIssuesSearchOwnerRepositoryStateKeyword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetLegacyIssuesSearchOwnerRepositoryStateKeywordParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
