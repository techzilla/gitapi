// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostReposOwnerRepoMergesHandlerFunc turns a function with the right signature into a post repos owner repo merges handler
type PostReposOwnerRepoMergesHandlerFunc func(PostReposOwnerRepoMergesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostReposOwnerRepoMergesHandlerFunc) Handle(params PostReposOwnerRepoMergesParams) middleware.Responder {
	return fn(params)
}

// PostReposOwnerRepoMergesHandler interface for that can handle valid post repos owner repo merges params
type PostReposOwnerRepoMergesHandler interface {
	Handle(PostReposOwnerRepoMergesParams) middleware.Responder
}

// NewPostReposOwnerRepoMerges creates a new http.Handler for the post repos owner repo merges operation
func NewPostReposOwnerRepoMerges(ctx *middleware.Context, handler PostReposOwnerRepoMergesHandler) *PostReposOwnerRepoMerges {
	return &PostReposOwnerRepoMerges{Context: ctx, Handler: handler}
}

/*PostReposOwnerRepoMerges swagger:route POST /repos/{owner}/{repo}/merges postReposOwnerRepoMerges

Perform a merge.

*/
type PostReposOwnerRepoMerges struct {
	Context *middleware.Context
	Handler PostReposOwnerRepoMergesHandler
}

func (o *PostReposOwnerRepoMerges) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostReposOwnerRepoMergesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
