// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PatchGistsIDCommentsCommentIDHandlerFunc turns a function with the right signature into a patch gists ID comments comment ID handler
type PatchGistsIDCommentsCommentIDHandlerFunc func(PatchGistsIDCommentsCommentIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchGistsIDCommentsCommentIDHandlerFunc) Handle(params PatchGistsIDCommentsCommentIDParams) middleware.Responder {
	return fn(params)
}

// PatchGistsIDCommentsCommentIDHandler interface for that can handle valid patch gists ID comments comment ID params
type PatchGistsIDCommentsCommentIDHandler interface {
	Handle(PatchGistsIDCommentsCommentIDParams) middleware.Responder
}

// NewPatchGistsIDCommentsCommentID creates a new http.Handler for the patch gists ID comments comment ID operation
func NewPatchGistsIDCommentsCommentID(ctx *middleware.Context, handler PatchGistsIDCommentsCommentIDHandler) *PatchGistsIDCommentsCommentID {
	return &PatchGistsIDCommentsCommentID{Context: ctx, Handler: handler}
}

/*PatchGistsIDCommentsCommentID swagger:route PATCH /gists/{id}/comments/{commentId} patchGistsIdCommentsCommentId

Edit a comment.

*/
type PatchGistsIDCommentsCommentID struct {
	Context *middleware.Context
	Handler PatchGistsIDCommentsCommentIDHandler
}

func (o *PatchGistsIDCommentsCommentID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchGistsIDCommentsCommentIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
