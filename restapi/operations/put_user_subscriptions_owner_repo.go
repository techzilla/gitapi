// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutUserSubscriptionsOwnerRepoHandlerFunc turns a function with the right signature into a put user subscriptions owner repo handler
type PutUserSubscriptionsOwnerRepoHandlerFunc func(PutUserSubscriptionsOwnerRepoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutUserSubscriptionsOwnerRepoHandlerFunc) Handle(params PutUserSubscriptionsOwnerRepoParams) middleware.Responder {
	return fn(params)
}

// PutUserSubscriptionsOwnerRepoHandler interface for that can handle valid put user subscriptions owner repo params
type PutUserSubscriptionsOwnerRepoHandler interface {
	Handle(PutUserSubscriptionsOwnerRepoParams) middleware.Responder
}

// NewPutUserSubscriptionsOwnerRepo creates a new http.Handler for the put user subscriptions owner repo operation
func NewPutUserSubscriptionsOwnerRepo(ctx *middleware.Context, handler PutUserSubscriptionsOwnerRepoHandler) *PutUserSubscriptionsOwnerRepo {
	return &PutUserSubscriptionsOwnerRepo{Context: ctx, Handler: handler}
}

/*PutUserSubscriptionsOwnerRepo swagger:route PUT /user/subscriptions/{owner}/{repo} putUserSubscriptionsOwnerRepo

Watch a repository.

*/
type PutUserSubscriptionsOwnerRepo struct {
	Context *middleware.Context
	Handler PutUserSubscriptionsOwnerRepoHandler
}

func (o *PutUserSubscriptionsOwnerRepo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutUserSubscriptionsOwnerRepoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
