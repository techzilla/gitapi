// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUserSubscriptionsHandlerFunc turns a function with the right signature into a get user subscriptions handler
type GetUserSubscriptionsHandlerFunc func(GetUserSubscriptionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserSubscriptionsHandlerFunc) Handle(params GetUserSubscriptionsParams) middleware.Responder {
	return fn(params)
}

// GetUserSubscriptionsHandler interface for that can handle valid get user subscriptions params
type GetUserSubscriptionsHandler interface {
	Handle(GetUserSubscriptionsParams) middleware.Responder
}

// NewGetUserSubscriptions creates a new http.Handler for the get user subscriptions operation
func NewGetUserSubscriptions(ctx *middleware.Context, handler GetUserSubscriptionsHandler) *GetUserSubscriptions {
	return &GetUserSubscriptions{Context: ctx, Handler: handler}
}

/*GetUserSubscriptions swagger:route GET /user/subscriptions getUserSubscriptions

List repositories being watched by the authenticated user.

*/
type GetUserSubscriptions struct {
	Context *middleware.Context
	Handler GetUserSubscriptionsHandler
}

func (o *GetUserSubscriptions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserSubscriptionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
