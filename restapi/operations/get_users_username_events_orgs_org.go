// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUsersUsernameEventsOrgsOrgHandlerFunc turns a function with the right signature into a get users username events orgs org handler
type GetUsersUsernameEventsOrgsOrgHandlerFunc func(GetUsersUsernameEventsOrgsOrgParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUsersUsernameEventsOrgsOrgHandlerFunc) Handle(params GetUsersUsernameEventsOrgsOrgParams) middleware.Responder {
	return fn(params)
}

// GetUsersUsernameEventsOrgsOrgHandler interface for that can handle valid get users username events orgs org params
type GetUsersUsernameEventsOrgsOrgHandler interface {
	Handle(GetUsersUsernameEventsOrgsOrgParams) middleware.Responder
}

// NewGetUsersUsernameEventsOrgsOrg creates a new http.Handler for the get users username events orgs org operation
func NewGetUsersUsernameEventsOrgsOrg(ctx *middleware.Context, handler GetUsersUsernameEventsOrgsOrgHandler) *GetUsersUsernameEventsOrgsOrg {
	return &GetUsersUsernameEventsOrgsOrg{Context: ctx, Handler: handler}
}

/*GetUsersUsernameEventsOrgsOrg swagger:route GET /users/{username}/events/orgs/{org} getUsersUsernameEventsOrgsOrg

This is the user's organization dashboard. You must be authenticated as the user to view this.

*/
type GetUsersUsernameEventsOrgsOrg struct {
	Context *middleware.Context
	Handler GetUsersUsernameEventsOrgsOrgHandler
}

func (o *GetUsersUsernameEventsOrgsOrg) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUsersUsernameEventsOrgsOrgParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
