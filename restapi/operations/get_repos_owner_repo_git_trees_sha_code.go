// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetReposOwnerRepoGitTreesShaCodeHandlerFunc turns a function with the right signature into a get repos owner repo git trees sha code handler
type GetReposOwnerRepoGitTreesShaCodeHandlerFunc func(GetReposOwnerRepoGitTreesShaCodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReposOwnerRepoGitTreesShaCodeHandlerFunc) Handle(params GetReposOwnerRepoGitTreesShaCodeParams) middleware.Responder {
	return fn(params)
}

// GetReposOwnerRepoGitTreesShaCodeHandler interface for that can handle valid get repos owner repo git trees sha code params
type GetReposOwnerRepoGitTreesShaCodeHandler interface {
	Handle(GetReposOwnerRepoGitTreesShaCodeParams) middleware.Responder
}

// NewGetReposOwnerRepoGitTreesShaCode creates a new http.Handler for the get repos owner repo git trees sha code operation
func NewGetReposOwnerRepoGitTreesShaCode(ctx *middleware.Context, handler GetReposOwnerRepoGitTreesShaCodeHandler) *GetReposOwnerRepoGitTreesShaCode {
	return &GetReposOwnerRepoGitTreesShaCode{Context: ctx, Handler: handler}
}

/*GetReposOwnerRepoGitTreesShaCode swagger:route GET /repos/{owner}/{repo}/git/trees/{shaCode} getReposOwnerRepoGitTreesShaCode

Get a Tree.

*/
type GetReposOwnerRepoGitTreesShaCode struct {
	Context *middleware.Context
	Handler GetReposOwnerRepoGitTreesShaCodeHandler
}

func (o *GetReposOwnerRepoGitTreesShaCode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetReposOwnerRepoGitTreesShaCodeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
