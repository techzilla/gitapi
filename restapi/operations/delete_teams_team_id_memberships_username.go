// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteTeamsTeamIDMembershipsUsernameHandlerFunc turns a function with the right signature into a delete teams team ID memberships username handler
type DeleteTeamsTeamIDMembershipsUsernameHandlerFunc func(DeleteTeamsTeamIDMembershipsUsernameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTeamsTeamIDMembershipsUsernameHandlerFunc) Handle(params DeleteTeamsTeamIDMembershipsUsernameParams) middleware.Responder {
	return fn(params)
}

// DeleteTeamsTeamIDMembershipsUsernameHandler interface for that can handle valid delete teams team ID memberships username params
type DeleteTeamsTeamIDMembershipsUsernameHandler interface {
	Handle(DeleteTeamsTeamIDMembershipsUsernameParams) middleware.Responder
}

// NewDeleteTeamsTeamIDMembershipsUsername creates a new http.Handler for the delete teams team ID memberships username operation
func NewDeleteTeamsTeamIDMembershipsUsername(ctx *middleware.Context, handler DeleteTeamsTeamIDMembershipsUsernameHandler) *DeleteTeamsTeamIDMembershipsUsername {
	return &DeleteTeamsTeamIDMembershipsUsername{Context: ctx, Handler: handler}
}

/*DeleteTeamsTeamIDMembershipsUsername swagger:route DELETE /teams/{teamId}/memberships/{username} deleteTeamsTeamIdMembershipsUsername

Remove team membership.
In order to remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. NOTE: This does not delete the user, it just removes their membership from the team.


*/
type DeleteTeamsTeamIDMembershipsUsername struct {
	Context *middleware.Context
	Handler DeleteTeamsTeamIDMembershipsUsernameHandler
}

func (o *DeleteTeamsTeamIDMembershipsUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteTeamsTeamIDMembershipsUsernameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
