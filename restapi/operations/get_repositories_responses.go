// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/techzilla/gitapi/models"
)

// GetRepositoriesOKCode is the HTTP code returned for type GetRepositoriesOK
const GetRepositoriesOKCode int = 200

/*GetRepositoriesOK OK

swagger:response getRepositoriesOK
*/
type GetRepositoriesOK struct {

	/*
	  In: Body
	*/
	Payload models.Repositories `json:"body,omitempty"`
}

// NewGetRepositoriesOK creates GetRepositoriesOK with default headers values
func NewGetRepositoriesOK() *GetRepositoriesOK {
	return &GetRepositoriesOK{}
}

// WithPayload adds the payload to the get repositories o k response
func (o *GetRepositoriesOK) WithPayload(payload models.Repositories) *GetRepositoriesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get repositories o k response
func (o *GetRepositoriesOK) SetPayload(payload models.Repositories) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRepositoriesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.Repositories, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetRepositoriesForbiddenCode is the HTTP code returned for type GetRepositoriesForbidden
const GetRepositoriesForbiddenCode int = 403

/*GetRepositoriesForbidden API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting
for details.


swagger:response getRepositoriesForbidden
*/
type GetRepositoriesForbidden struct {
}

// NewGetRepositoriesForbidden creates GetRepositoriesForbidden with default headers values
func NewGetRepositoriesForbidden() *GetRepositoriesForbidden {
	return &GetRepositoriesForbidden{}
}

// WriteResponse to the client
func (o *GetRepositoriesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}
