// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutNotificationsThreadsIDSubscriptionHandlerFunc turns a function with the right signature into a put notifications threads ID subscription handler
type PutNotificationsThreadsIDSubscriptionHandlerFunc func(PutNotificationsThreadsIDSubscriptionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutNotificationsThreadsIDSubscriptionHandlerFunc) Handle(params PutNotificationsThreadsIDSubscriptionParams) middleware.Responder {
	return fn(params)
}

// PutNotificationsThreadsIDSubscriptionHandler interface for that can handle valid put notifications threads ID subscription params
type PutNotificationsThreadsIDSubscriptionHandler interface {
	Handle(PutNotificationsThreadsIDSubscriptionParams) middleware.Responder
}

// NewPutNotificationsThreadsIDSubscription creates a new http.Handler for the put notifications threads ID subscription operation
func NewPutNotificationsThreadsIDSubscription(ctx *middleware.Context, handler PutNotificationsThreadsIDSubscriptionHandler) *PutNotificationsThreadsIDSubscription {
	return &PutNotificationsThreadsIDSubscription{Context: ctx, Handler: handler}
}

/*PutNotificationsThreadsIDSubscription swagger:route PUT /notifications/threads/{id}/subscription putNotificationsThreadsIdSubscription

Set a Thread Subscription.
This lets you subscribe to a thread, or ignore it. Subscribing to a thread
is unnecessary if the user is already subscribed to the repository. Ignoring
a thread will mute all future notifications (until you comment or get @mentioned).


*/
type PutNotificationsThreadsIDSubscription struct {
	Context *middleware.Context
	Handler PutNotificationsThreadsIDSubscriptionHandler
}

func (o *PutNotificationsThreadsIDSubscription) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutNotificationsThreadsIDSubscriptionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
