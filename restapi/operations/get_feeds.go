// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetFeedsHandlerFunc turns a function with the right signature into a get feeds handler
type GetFeedsHandlerFunc func(GetFeedsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFeedsHandlerFunc) Handle(params GetFeedsParams) middleware.Responder {
	return fn(params)
}

// GetFeedsHandler interface for that can handle valid get feeds params
type GetFeedsHandler interface {
	Handle(GetFeedsParams) middleware.Responder
}

// NewGetFeeds creates a new http.Handler for the get feeds operation
func NewGetFeeds(ctx *middleware.Context, handler GetFeedsHandler) *GetFeeds {
	return &GetFeeds{Context: ctx, Handler: handler}
}

/*GetFeeds swagger:route GET /feeds getFeeds

List Feeds.
GitHub provides several timeline resources in Atom format. The Feeds API
 lists all the feeds available to the authenticating user.


*/
type GetFeeds struct {
	Context *middleware.Context
	Handler GetFeedsHandler
}

func (o *GetFeeds) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetFeedsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
