// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTeamsTeamIDMembershipsUsernameHandlerFunc turns a function with the right signature into a get teams team ID memberships username handler
type GetTeamsTeamIDMembershipsUsernameHandlerFunc func(GetTeamsTeamIDMembershipsUsernameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTeamsTeamIDMembershipsUsernameHandlerFunc) Handle(params GetTeamsTeamIDMembershipsUsernameParams) middleware.Responder {
	return fn(params)
}

// GetTeamsTeamIDMembershipsUsernameHandler interface for that can handle valid get teams team ID memberships username params
type GetTeamsTeamIDMembershipsUsernameHandler interface {
	Handle(GetTeamsTeamIDMembershipsUsernameParams) middleware.Responder
}

// NewGetTeamsTeamIDMembershipsUsername creates a new http.Handler for the get teams team ID memberships username operation
func NewGetTeamsTeamIDMembershipsUsername(ctx *middleware.Context, handler GetTeamsTeamIDMembershipsUsernameHandler) *GetTeamsTeamIDMembershipsUsername {
	return &GetTeamsTeamIDMembershipsUsername{Context: ctx, Handler: handler}
}

/*GetTeamsTeamIDMembershipsUsername swagger:route GET /teams/{teamId}/memberships/{username} getTeamsTeamIdMembershipsUsername

Get team membership.
In order to get a user's membership with a team, the authenticated user must be a member of the team or an owner of the team's organization.


*/
type GetTeamsTeamIDMembershipsUsername struct {
	Context *middleware.Context
	Handler GetTeamsTeamIDMembershipsUsernameHandler
}

func (o *GetTeamsTeamIDMembershipsUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTeamsTeamIDMembershipsUsernameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
