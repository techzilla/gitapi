// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUserReposHandlerFunc turns a function with the right signature into a get user repos handler
type GetUserReposHandlerFunc func(GetUserReposParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserReposHandlerFunc) Handle(params GetUserReposParams) middleware.Responder {
	return fn(params)
}

// GetUserReposHandler interface for that can handle valid get user repos params
type GetUserReposHandler interface {
	Handle(GetUserReposParams) middleware.Responder
}

// NewGetUserRepos creates a new http.Handler for the get user repos operation
func NewGetUserRepos(ctx *middleware.Context, handler GetUserReposHandler) *GetUserRepos {
	return &GetUserRepos{Context: ctx, Handler: handler}
}

/*GetUserRepos swagger:route GET /user/repos getUserRepos

List repositories for the authenticated user. Note that this does not include
repositories owned by organizations which the user can access. You can lis
user organizations and list organization repositories separately.


*/
type GetUserRepos struct {
	Context *middleware.Context
	Handler GetUserReposHandler
}

func (o *GetUserRepos) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserReposParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
