// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
	"strings"
)

// GetReposOwnerRepoCommitsURL generates an URL for the get repos owner repo commits operation
type GetReposOwnerRepoCommitsURL struct {
	Owner string
	Repo  string

	Author *string
	Path   *string
	Sha    *string
	Since  *string
	Until  *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetReposOwnerRepoCommitsURL) WithBasePath(bp string) *GetReposOwnerRepoCommitsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetReposOwnerRepoCommitsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetReposOwnerRepoCommitsURL) Build() (*url.URL, error) {
	var result url.URL

	var _path = "/repos/{owner}/{repo}/commits"

	owner := o.Owner
	if owner != "" {
		_path = strings.Replace(_path, "{owner}", owner, -1)
	} else {
		return nil, errors.New("Owner is required on GetReposOwnerRepoCommitsURL")
	}
	repo := o.Repo
	if repo != "" {
		_path = strings.Replace(_path, "{repo}", repo, -1)
	} else {
		return nil, errors.New("Repo is required on GetReposOwnerRepoCommitsURL")
	}
	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/"
	}
	result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var author string
	if o.Author != nil {
		author = *o.Author
	}
	if author != "" {
		qs.Set("author", author)
	}

	var path string
	if o.Path != nil {
		path = *o.Path
	}
	if path != "" {
		qs.Set("path", path)
	}

	var sha string
	if o.Sha != nil {
		sha = *o.Sha
	}
	if sha != "" {
		qs.Set("sha", sha)
	}

	var since string
	if o.Since != nil {
		since = *o.Since
	}
	if since != "" {
		qs.Set("since", since)
	}

	var until string
	if o.Until != nil {
		until = *o.Until
	}
	if until != "" {
		qs.Set("until", until)
	}

	result.RawQuery = qs.Encode()

	return &result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetReposOwnerRepoCommitsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetReposOwnerRepoCommitsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetReposOwnerRepoCommitsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetReposOwnerRepoCommitsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetReposOwnerRepoCommitsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetReposOwnerRepoCommitsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
