// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutReposOwnerRepoIssuesNumberLabelsHandlerFunc turns a function with the right signature into a put repos owner repo issues number labels handler
type PutReposOwnerRepoIssuesNumberLabelsHandlerFunc func(PutReposOwnerRepoIssuesNumberLabelsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutReposOwnerRepoIssuesNumberLabelsHandlerFunc) Handle(params PutReposOwnerRepoIssuesNumberLabelsParams) middleware.Responder {
	return fn(params)
}

// PutReposOwnerRepoIssuesNumberLabelsHandler interface for that can handle valid put repos owner repo issues number labels params
type PutReposOwnerRepoIssuesNumberLabelsHandler interface {
	Handle(PutReposOwnerRepoIssuesNumberLabelsParams) middleware.Responder
}

// NewPutReposOwnerRepoIssuesNumberLabels creates a new http.Handler for the put repos owner repo issues number labels operation
func NewPutReposOwnerRepoIssuesNumberLabels(ctx *middleware.Context, handler PutReposOwnerRepoIssuesNumberLabelsHandler) *PutReposOwnerRepoIssuesNumberLabels {
	return &PutReposOwnerRepoIssuesNumberLabels{Context: ctx, Handler: handler}
}

/*PutReposOwnerRepoIssuesNumberLabels swagger:route PUT /repos/{owner}/{repo}/issues/{number}/labels putReposOwnerRepoIssuesNumberLabels

Replace all labels for an issue.
Sending an empty array ([]) will remove all Labels from the Issue.


*/
type PutReposOwnerRepoIssuesNumberLabels struct {
	Context *middleware.Context
	Handler PutReposOwnerRepoIssuesNumberLabelsHandler
}

func (o *PutReposOwnerRepoIssuesNumberLabels) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutReposOwnerRepoIssuesNumberLabelsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
