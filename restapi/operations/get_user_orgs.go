// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUserOrgsHandlerFunc turns a function with the right signature into a get user orgs handler
type GetUserOrgsHandlerFunc func(GetUserOrgsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserOrgsHandlerFunc) Handle(params GetUserOrgsParams) middleware.Responder {
	return fn(params)
}

// GetUserOrgsHandler interface for that can handle valid get user orgs params
type GetUserOrgsHandler interface {
	Handle(GetUserOrgsParams) middleware.Responder
}

// NewGetUserOrgs creates a new http.Handler for the get user orgs operation
func NewGetUserOrgs(ctx *middleware.Context, handler GetUserOrgsHandler) *GetUserOrgs {
	return &GetUserOrgs{Context: ctx, Handler: handler}
}

/*GetUserOrgs swagger:route GET /user/orgs getUserOrgs

List public and private organizations for the authenticated user.

*/
type GetUserOrgs struct {
	Context *middleware.Context
	Handler GetUserOrgsHandler
}

func (o *GetUserOrgs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserOrgsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
