// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteReposOwnerRepoContentsPathHandlerFunc turns a function with the right signature into a delete repos owner repo contents path handler
type DeleteReposOwnerRepoContentsPathHandlerFunc func(DeleteReposOwnerRepoContentsPathParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteReposOwnerRepoContentsPathHandlerFunc) Handle(params DeleteReposOwnerRepoContentsPathParams) middleware.Responder {
	return fn(params)
}

// DeleteReposOwnerRepoContentsPathHandler interface for that can handle valid delete repos owner repo contents path params
type DeleteReposOwnerRepoContentsPathHandler interface {
	Handle(DeleteReposOwnerRepoContentsPathParams) middleware.Responder
}

// NewDeleteReposOwnerRepoContentsPath creates a new http.Handler for the delete repos owner repo contents path operation
func NewDeleteReposOwnerRepoContentsPath(ctx *middleware.Context, handler DeleteReposOwnerRepoContentsPathHandler) *DeleteReposOwnerRepoContentsPath {
	return &DeleteReposOwnerRepoContentsPath{Context: ctx, Handler: handler}
}

/*DeleteReposOwnerRepoContentsPath swagger:route DELETE /repos/{owner}/{repo}/contents/{path} deleteReposOwnerRepoContentsPath

Delete a file.
This method deletes a file in a repository.


*/
type DeleteReposOwnerRepoContentsPath struct {
	Context *middleware.Context
	Handler DeleteReposOwnerRepoContentsPathHandler
}

func (o *DeleteReposOwnerRepoContentsPath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteReposOwnerRepoContentsPathParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
