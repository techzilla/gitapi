// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetReposOwnerRepoForksHandlerFunc turns a function with the right signature into a get repos owner repo forks handler
type GetReposOwnerRepoForksHandlerFunc func(GetReposOwnerRepoForksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReposOwnerRepoForksHandlerFunc) Handle(params GetReposOwnerRepoForksParams) middleware.Responder {
	return fn(params)
}

// GetReposOwnerRepoForksHandler interface for that can handle valid get repos owner repo forks params
type GetReposOwnerRepoForksHandler interface {
	Handle(GetReposOwnerRepoForksParams) middleware.Responder
}

// NewGetReposOwnerRepoForks creates a new http.Handler for the get repos owner repo forks operation
func NewGetReposOwnerRepoForks(ctx *middleware.Context, handler GetReposOwnerRepoForksHandler) *GetReposOwnerRepoForks {
	return &GetReposOwnerRepoForks{Context: ctx, Handler: handler}
}

/*GetReposOwnerRepoForks swagger:route GET /repos/{owner}/{repo}/forks getReposOwnerRepoForks

List forks.

*/
type GetReposOwnerRepoForks struct {
	Context *middleware.Context
	Handler GetReposOwnerRepoForksHandler
}

func (o *GetReposOwnerRepoForks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetReposOwnerRepoForksParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
