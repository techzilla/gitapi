// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostReposOwnerRepoReleasesHandlerFunc turns a function with the right signature into a post repos owner repo releases handler
type PostReposOwnerRepoReleasesHandlerFunc func(PostReposOwnerRepoReleasesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostReposOwnerRepoReleasesHandlerFunc) Handle(params PostReposOwnerRepoReleasesParams) middleware.Responder {
	return fn(params)
}

// PostReposOwnerRepoReleasesHandler interface for that can handle valid post repos owner repo releases params
type PostReposOwnerRepoReleasesHandler interface {
	Handle(PostReposOwnerRepoReleasesParams) middleware.Responder
}

// NewPostReposOwnerRepoReleases creates a new http.Handler for the post repos owner repo releases operation
func NewPostReposOwnerRepoReleases(ctx *middleware.Context, handler PostReposOwnerRepoReleasesHandler) *PostReposOwnerRepoReleases {
	return &PostReposOwnerRepoReleases{Context: ctx, Handler: handler}
}

/*PostReposOwnerRepoReleases swagger:route POST /repos/{owner}/{repo}/releases postReposOwnerRepoReleases

Create a release
Users with push access to the repository can create a release.


*/
type PostReposOwnerRepoReleases struct {
	Context *middleware.Context
	Handler PostReposOwnerRepoReleasesHandler
}

func (o *PostReposOwnerRepoReleases) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostReposOwnerRepoReleasesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
