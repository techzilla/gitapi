// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGitapiAPI creates a new Gitapi instance
func NewGitapiAPI(spec *loads.Document) *GitapiAPI {
	return &GitapiAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		TxtConsumer:         runtime.TextConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		HTMLProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("html producer has not yet been implemented")
		}),
		DeleteGistsIDHandler: DeleteGistsIDHandlerFunc(func(params DeleteGistsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteGistsID has not yet been implemented")
		}),
		DeleteGistsIDCommentsCommentIDHandler: DeleteGistsIDCommentsCommentIDHandlerFunc(func(params DeleteGistsIDCommentsCommentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteGistsIDCommentsCommentID has not yet been implemented")
		}),
		DeleteGistsIDStarHandler: DeleteGistsIDStarHandlerFunc(func(params DeleteGistsIDStarParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteGistsIDStar has not yet been implemented")
		}),
		DeleteNotificationsThreadsIDSubscriptionHandler: DeleteNotificationsThreadsIDSubscriptionHandlerFunc(func(params DeleteNotificationsThreadsIDSubscriptionParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteNotificationsThreadsIDSubscription has not yet been implemented")
		}),
		DeleteOrgsOrgMembersUsernameHandler: DeleteOrgsOrgMembersUsernameHandlerFunc(func(params DeleteOrgsOrgMembersUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteOrgsOrgMembersUsername has not yet been implemented")
		}),
		DeleteOrgsOrgPublicMembersUsernameHandler: DeleteOrgsOrgPublicMembersUsernameHandlerFunc(func(params DeleteOrgsOrgPublicMembersUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteOrgsOrgPublicMembersUsername has not yet been implemented")
		}),
		DeleteReposOwnerRepoHandler: DeleteReposOwnerRepoHandlerFunc(func(params DeleteReposOwnerRepoParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepo has not yet been implemented")
		}),
		DeleteReposOwnerRepoCollaboratorsUserHandler: DeleteReposOwnerRepoCollaboratorsUserHandlerFunc(func(params DeleteReposOwnerRepoCollaboratorsUserParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoCollaboratorsUser has not yet been implemented")
		}),
		DeleteReposOwnerRepoCommentsCommentIDHandler: DeleteReposOwnerRepoCommentsCommentIDHandlerFunc(func(params DeleteReposOwnerRepoCommentsCommentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoCommentsCommentID has not yet been implemented")
		}),
		DeleteReposOwnerRepoContentsPathHandler: DeleteReposOwnerRepoContentsPathHandlerFunc(func(params DeleteReposOwnerRepoContentsPathParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoContentsPath has not yet been implemented")
		}),
		DeleteReposOwnerRepoDownloadsDownloadIDHandler: DeleteReposOwnerRepoDownloadsDownloadIDHandlerFunc(func(params DeleteReposOwnerRepoDownloadsDownloadIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoDownloadsDownloadID has not yet been implemented")
		}),
		DeleteReposOwnerRepoGitRefsRefHandler: DeleteReposOwnerRepoGitRefsRefHandlerFunc(func(params DeleteReposOwnerRepoGitRefsRefParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoGitRefsRef has not yet been implemented")
		}),
		DeleteReposOwnerRepoHooksHookIDHandler: DeleteReposOwnerRepoHooksHookIDHandlerFunc(func(params DeleteReposOwnerRepoHooksHookIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoHooksHookID has not yet been implemented")
		}),
		DeleteReposOwnerRepoIssuesCommentsCommentIDHandler: DeleteReposOwnerRepoIssuesCommentsCommentIDHandlerFunc(func(params DeleteReposOwnerRepoIssuesCommentsCommentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoIssuesCommentsCommentID has not yet been implemented")
		}),
		DeleteReposOwnerRepoIssuesNumberLabelsHandler: DeleteReposOwnerRepoIssuesNumberLabelsHandlerFunc(func(params DeleteReposOwnerRepoIssuesNumberLabelsParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoIssuesNumberLabels has not yet been implemented")
		}),
		DeleteReposOwnerRepoIssuesNumberLabelsNameHandler: DeleteReposOwnerRepoIssuesNumberLabelsNameHandlerFunc(func(params DeleteReposOwnerRepoIssuesNumberLabelsNameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoIssuesNumberLabelsName has not yet been implemented")
		}),
		DeleteReposOwnerRepoKeysKeyIDHandler: DeleteReposOwnerRepoKeysKeyIDHandlerFunc(func(params DeleteReposOwnerRepoKeysKeyIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoKeysKeyID has not yet been implemented")
		}),
		DeleteReposOwnerRepoLabelsNameHandler: DeleteReposOwnerRepoLabelsNameHandlerFunc(func(params DeleteReposOwnerRepoLabelsNameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoLabelsName has not yet been implemented")
		}),
		DeleteReposOwnerRepoMilestonesNumberHandler: DeleteReposOwnerRepoMilestonesNumberHandlerFunc(func(params DeleteReposOwnerRepoMilestonesNumberParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoMilestonesNumber has not yet been implemented")
		}),
		DeleteReposOwnerRepoPullsCommentsCommentIDHandler: DeleteReposOwnerRepoPullsCommentsCommentIDHandlerFunc(func(params DeleteReposOwnerRepoPullsCommentsCommentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoPullsCommentsCommentID has not yet been implemented")
		}),
		DeleteReposOwnerRepoReleasesAssetsIDHandler: DeleteReposOwnerRepoReleasesAssetsIDHandlerFunc(func(params DeleteReposOwnerRepoReleasesAssetsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoReleasesAssetsID has not yet been implemented")
		}),
		DeleteReposOwnerRepoReleasesIDHandler: DeleteReposOwnerRepoReleasesIDHandlerFunc(func(params DeleteReposOwnerRepoReleasesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoReleasesID has not yet been implemented")
		}),
		DeleteReposOwnerRepoSubscriptionHandler: DeleteReposOwnerRepoSubscriptionHandlerFunc(func(params DeleteReposOwnerRepoSubscriptionParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteReposOwnerRepoSubscription has not yet been implemented")
		}),
		DeleteTeamsTeamIDHandler: DeleteTeamsTeamIDHandlerFunc(func(params DeleteTeamsTeamIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTeamsTeamID has not yet been implemented")
		}),
		DeleteTeamsTeamIDMembersUsernameHandler: DeleteTeamsTeamIDMembersUsernameHandlerFunc(func(params DeleteTeamsTeamIDMembersUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTeamsTeamIDMembersUsername has not yet been implemented")
		}),
		DeleteTeamsTeamIDMembershipsUsernameHandler: DeleteTeamsTeamIDMembershipsUsernameHandlerFunc(func(params DeleteTeamsTeamIDMembershipsUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTeamsTeamIDMembershipsUsername has not yet been implemented")
		}),
		DeleteTeamsTeamIDReposOwnerRepoHandler: DeleteTeamsTeamIDReposOwnerRepoHandlerFunc(func(params DeleteTeamsTeamIDReposOwnerRepoParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTeamsTeamIDReposOwnerRepo has not yet been implemented")
		}),
		DeleteUserEmailsHandler: DeleteUserEmailsHandlerFunc(func(params DeleteUserEmailsParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserEmails has not yet been implemented")
		}),
		DeleteUserFollowingUsernameHandler: DeleteUserFollowingUsernameHandlerFunc(func(params DeleteUserFollowingUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserFollowingUsername has not yet been implemented")
		}),
		DeleteUserKeysKeyIDHandler: DeleteUserKeysKeyIDHandlerFunc(func(params DeleteUserKeysKeyIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserKeysKeyID has not yet been implemented")
		}),
		DeleteUserStarredOwnerRepoHandler: DeleteUserStarredOwnerRepoHandlerFunc(func(params DeleteUserStarredOwnerRepoParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserStarredOwnerRepo has not yet been implemented")
		}),
		DeleteUserSubscriptionsOwnerRepoHandler: DeleteUserSubscriptionsOwnerRepoHandlerFunc(func(params DeleteUserSubscriptionsOwnerRepoParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserSubscriptionsOwnerRepo has not yet been implemented")
		}),
		GetEmojisHandler: GetEmojisHandlerFunc(func(params GetEmojisParams) middleware.Responder {
			return middleware.NotImplemented("operation GetEmojis has not yet been implemented")
		}),
		GetEventsHandler: GetEventsHandlerFunc(func(params GetEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetEvents has not yet been implemented")
		}),
		GetFeedsHandler: GetFeedsHandlerFunc(func(params GetFeedsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetFeeds has not yet been implemented")
		}),
		GetGistsHandler: GetGistsHandlerFunc(func(params GetGistsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetGists has not yet been implemented")
		}),
		GetGistsIDHandler: GetGistsIDHandlerFunc(func(params GetGistsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetGistsID has not yet been implemented")
		}),
		GetGistsIDCommentsHandler: GetGistsIDCommentsHandlerFunc(func(params GetGistsIDCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetGistsIDComments has not yet been implemented")
		}),
		GetGistsIDCommentsCommentIDHandler: GetGistsIDCommentsCommentIDHandlerFunc(func(params GetGistsIDCommentsCommentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetGistsIDCommentsCommentID has not yet been implemented")
		}),
		GetGistsIDStarHandler: GetGistsIDStarHandlerFunc(func(params GetGistsIDStarParams) middleware.Responder {
			return middleware.NotImplemented("operation GetGistsIDStar has not yet been implemented")
		}),
		GetGistsPublicHandler: GetGistsPublicHandlerFunc(func(params GetGistsPublicParams) middleware.Responder {
			return middleware.NotImplemented("operation GetGistsPublic has not yet been implemented")
		}),
		GetGistsStarredHandler: GetGistsStarredHandlerFunc(func(params GetGistsStarredParams) middleware.Responder {
			return middleware.NotImplemented("operation GetGistsStarred has not yet been implemented")
		}),
		GetGitignoreTemplatesHandler: GetGitignoreTemplatesHandlerFunc(func(params GetGitignoreTemplatesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetGitignoreTemplates has not yet been implemented")
		}),
		GetGitignoreTemplatesLanguageHandler: GetGitignoreTemplatesLanguageHandlerFunc(func(params GetGitignoreTemplatesLanguageParams) middleware.Responder {
			return middleware.NotImplemented("operation GetGitignoreTemplatesLanguage has not yet been implemented")
		}),
		GetIssuesHandler: GetIssuesHandlerFunc(func(params GetIssuesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetIssues has not yet been implemented")
		}),
		GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandler: GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandlerFunc(func(params GetLegacyIssuesSearchOwnerRepositoryStateKeywordParams) middleware.Responder {
			return middleware.NotImplemented("operation GetLegacyIssuesSearchOwnerRepositoryStateKeyword has not yet been implemented")
		}),
		GetLegacyReposSearchKeywordHandler: GetLegacyReposSearchKeywordHandlerFunc(func(params GetLegacyReposSearchKeywordParams) middleware.Responder {
			return middleware.NotImplemented("operation GetLegacyReposSearchKeyword has not yet been implemented")
		}),
		GetLegacyUserEmailEmailHandler: GetLegacyUserEmailEmailHandlerFunc(func(params GetLegacyUserEmailEmailParams) middleware.Responder {
			return middleware.NotImplemented("operation GetLegacyUserEmailEmail has not yet been implemented")
		}),
		GetLegacyUserSearchKeywordHandler: GetLegacyUserSearchKeywordHandlerFunc(func(params GetLegacyUserSearchKeywordParams) middleware.Responder {
			return middleware.NotImplemented("operation GetLegacyUserSearchKeyword has not yet been implemented")
		}),
		GetMetaHandler: GetMetaHandlerFunc(func(params GetMetaParams) middleware.Responder {
			return middleware.NotImplemented("operation GetMeta has not yet been implemented")
		}),
		GetNetworksOwnerRepoEventsHandler: GetNetworksOwnerRepoEventsHandlerFunc(func(params GetNetworksOwnerRepoEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetNetworksOwnerRepoEvents has not yet been implemented")
		}),
		GetNotificationsHandler: GetNotificationsHandlerFunc(func(params GetNotificationsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetNotifications has not yet been implemented")
		}),
		GetNotificationsThreadsIDHandler: GetNotificationsThreadsIDHandlerFunc(func(params GetNotificationsThreadsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetNotificationsThreadsID has not yet been implemented")
		}),
		GetNotificationsThreadsIDSubscriptionHandler: GetNotificationsThreadsIDSubscriptionHandlerFunc(func(params GetNotificationsThreadsIDSubscriptionParams) middleware.Responder {
			return middleware.NotImplemented("operation GetNotificationsThreadsIDSubscription has not yet been implemented")
		}),
		GetOrgsOrgHandler: GetOrgsOrgHandlerFunc(func(params GetOrgsOrgParams) middleware.Responder {
			return middleware.NotImplemented("operation GetOrgsOrg has not yet been implemented")
		}),
		GetOrgsOrgEventsHandler: GetOrgsOrgEventsHandlerFunc(func(params GetOrgsOrgEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetOrgsOrgEvents has not yet been implemented")
		}),
		GetOrgsOrgIssuesHandler: GetOrgsOrgIssuesHandlerFunc(func(params GetOrgsOrgIssuesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetOrgsOrgIssues has not yet been implemented")
		}),
		GetOrgsOrgMembersHandler: GetOrgsOrgMembersHandlerFunc(func(params GetOrgsOrgMembersParams) middleware.Responder {
			return middleware.NotImplemented("operation GetOrgsOrgMembers has not yet been implemented")
		}),
		GetOrgsOrgMembersUsernameHandler: GetOrgsOrgMembersUsernameHandlerFunc(func(params GetOrgsOrgMembersUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation GetOrgsOrgMembersUsername has not yet been implemented")
		}),
		GetOrgsOrgPublicMembersHandler: GetOrgsOrgPublicMembersHandlerFunc(func(params GetOrgsOrgPublicMembersParams) middleware.Responder {
			return middleware.NotImplemented("operation GetOrgsOrgPublicMembers has not yet been implemented")
		}),
		GetOrgsOrgPublicMembersUsernameHandler: GetOrgsOrgPublicMembersUsernameHandlerFunc(func(params GetOrgsOrgPublicMembersUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation GetOrgsOrgPublicMembersUsername has not yet been implemented")
		}),
		GetOrgsOrgReposHandler: GetOrgsOrgReposHandlerFunc(func(params GetOrgsOrgReposParams) middleware.Responder {
			return middleware.NotImplemented("operation GetOrgsOrgRepos has not yet been implemented")
		}),
		GetOrgsOrgTeamsHandler: GetOrgsOrgTeamsHandlerFunc(func(params GetOrgsOrgTeamsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetOrgsOrgTeams has not yet been implemented")
		}),
		GetRateLimitHandler: GetRateLimitHandlerFunc(func(params GetRateLimitParams) middleware.Responder {
			return middleware.NotImplemented("operation GetRateLimit has not yet been implemented")
		}),
		GetReposOwnerRepoHandler: GetReposOwnerRepoHandlerFunc(func(params GetReposOwnerRepoParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepo has not yet been implemented")
		}),
		GetReposOwnerRepoArchiveFormatPathHandler: GetReposOwnerRepoArchiveFormatPathHandlerFunc(func(params GetReposOwnerRepoArchiveFormatPathParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoArchiveFormatPath has not yet been implemented")
		}),
		GetReposOwnerRepoAssigneesHandler: GetReposOwnerRepoAssigneesHandlerFunc(func(params GetReposOwnerRepoAssigneesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoAssignees has not yet been implemented")
		}),
		GetReposOwnerRepoAssigneesAssigneeHandler: GetReposOwnerRepoAssigneesAssigneeHandlerFunc(func(params GetReposOwnerRepoAssigneesAssigneeParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoAssigneesAssignee has not yet been implemented")
		}),
		GetReposOwnerRepoBranchesHandler: GetReposOwnerRepoBranchesHandlerFunc(func(params GetReposOwnerRepoBranchesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoBranches has not yet been implemented")
		}),
		GetReposOwnerRepoBranchesBranchHandler: GetReposOwnerRepoBranchesBranchHandlerFunc(func(params GetReposOwnerRepoBranchesBranchParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoBranchesBranch has not yet been implemented")
		}),
		GetReposOwnerRepoCollaboratorsHandler: GetReposOwnerRepoCollaboratorsHandlerFunc(func(params GetReposOwnerRepoCollaboratorsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoCollaborators has not yet been implemented")
		}),
		GetReposOwnerRepoCollaboratorsUserHandler: GetReposOwnerRepoCollaboratorsUserHandlerFunc(func(params GetReposOwnerRepoCollaboratorsUserParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoCollaboratorsUser has not yet been implemented")
		}),
		GetReposOwnerRepoCommentsHandler: GetReposOwnerRepoCommentsHandlerFunc(func(params GetReposOwnerRepoCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoComments has not yet been implemented")
		}),
		GetReposOwnerRepoCommentsCommentIDHandler: GetReposOwnerRepoCommentsCommentIDHandlerFunc(func(params GetReposOwnerRepoCommentsCommentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoCommentsCommentID has not yet been implemented")
		}),
		GetReposOwnerRepoCommitsHandler: GetReposOwnerRepoCommitsHandlerFunc(func(params GetReposOwnerRepoCommitsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoCommits has not yet been implemented")
		}),
		GetReposOwnerRepoCommitsRefStatusHandler: GetReposOwnerRepoCommitsRefStatusHandlerFunc(func(params GetReposOwnerRepoCommitsRefStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoCommitsRefStatus has not yet been implemented")
		}),
		GetReposOwnerRepoCommitsShaCodeHandler: GetReposOwnerRepoCommitsShaCodeHandlerFunc(func(params GetReposOwnerRepoCommitsShaCodeParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoCommitsShaCode has not yet been implemented")
		}),
		GetReposOwnerRepoCommitsShaCodeCommentsHandler: GetReposOwnerRepoCommitsShaCodeCommentsHandlerFunc(func(params GetReposOwnerRepoCommitsShaCodeCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoCommitsShaCodeComments has not yet been implemented")
		}),
		GetReposOwnerRepoCompareBaseIDHeadIDHandler: GetReposOwnerRepoCompareBaseIDHeadIDHandlerFunc(func(params GetReposOwnerRepoCompareBaseIDHeadIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoCompareBaseIDHeadID has not yet been implemented")
		}),
		GetReposOwnerRepoContentsPathHandler: GetReposOwnerRepoContentsPathHandlerFunc(func(params GetReposOwnerRepoContentsPathParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoContentsPath has not yet been implemented")
		}),
		GetReposOwnerRepoContributorsHandler: GetReposOwnerRepoContributorsHandlerFunc(func(params GetReposOwnerRepoContributorsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoContributors has not yet been implemented")
		}),
		GetReposOwnerRepoDeploymentsHandler: GetReposOwnerRepoDeploymentsHandlerFunc(func(params GetReposOwnerRepoDeploymentsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoDeployments has not yet been implemented")
		}),
		GetReposOwnerRepoDeploymentsIDStatusesHandler: GetReposOwnerRepoDeploymentsIDStatusesHandlerFunc(func(params GetReposOwnerRepoDeploymentsIDStatusesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoDeploymentsIDStatuses has not yet been implemented")
		}),
		GetReposOwnerRepoDownloadsHandler: GetReposOwnerRepoDownloadsHandlerFunc(func(params GetReposOwnerRepoDownloadsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoDownloads has not yet been implemented")
		}),
		GetReposOwnerRepoDownloadsDownloadIDHandler: GetReposOwnerRepoDownloadsDownloadIDHandlerFunc(func(params GetReposOwnerRepoDownloadsDownloadIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoDownloadsDownloadID has not yet been implemented")
		}),
		GetReposOwnerRepoEventsHandler: GetReposOwnerRepoEventsHandlerFunc(func(params GetReposOwnerRepoEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoEvents has not yet been implemented")
		}),
		GetReposOwnerRepoForksHandler: GetReposOwnerRepoForksHandlerFunc(func(params GetReposOwnerRepoForksParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoForks has not yet been implemented")
		}),
		GetReposOwnerRepoGitBlobsShaCodeHandler: GetReposOwnerRepoGitBlobsShaCodeHandlerFunc(func(params GetReposOwnerRepoGitBlobsShaCodeParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoGitBlobsShaCode has not yet been implemented")
		}),
		GetReposOwnerRepoGitCommitsShaCodeHandler: GetReposOwnerRepoGitCommitsShaCodeHandlerFunc(func(params GetReposOwnerRepoGitCommitsShaCodeParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoGitCommitsShaCode has not yet been implemented")
		}),
		GetReposOwnerRepoGitRefsHandler: GetReposOwnerRepoGitRefsHandlerFunc(func(params GetReposOwnerRepoGitRefsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoGitRefs has not yet been implemented")
		}),
		GetReposOwnerRepoGitRefsRefHandler: GetReposOwnerRepoGitRefsRefHandlerFunc(func(params GetReposOwnerRepoGitRefsRefParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoGitRefsRef has not yet been implemented")
		}),
		GetReposOwnerRepoGitTagsShaCodeHandler: GetReposOwnerRepoGitTagsShaCodeHandlerFunc(func(params GetReposOwnerRepoGitTagsShaCodeParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoGitTagsShaCode has not yet been implemented")
		}),
		GetReposOwnerRepoGitTreesShaCodeHandler: GetReposOwnerRepoGitTreesShaCodeHandlerFunc(func(params GetReposOwnerRepoGitTreesShaCodeParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoGitTreesShaCode has not yet been implemented")
		}),
		GetReposOwnerRepoHooksHandler: GetReposOwnerRepoHooksHandlerFunc(func(params GetReposOwnerRepoHooksParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoHooks has not yet been implemented")
		}),
		GetReposOwnerRepoHooksHookIDHandler: GetReposOwnerRepoHooksHookIDHandlerFunc(func(params GetReposOwnerRepoHooksHookIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoHooksHookID has not yet been implemented")
		}),
		GetReposOwnerRepoIssuesHandler: GetReposOwnerRepoIssuesHandlerFunc(func(params GetReposOwnerRepoIssuesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoIssues has not yet been implemented")
		}),
		GetReposOwnerRepoIssuesCommentsHandler: GetReposOwnerRepoIssuesCommentsHandlerFunc(func(params GetReposOwnerRepoIssuesCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoIssuesComments has not yet been implemented")
		}),
		GetReposOwnerRepoIssuesCommentsCommentIDHandler: GetReposOwnerRepoIssuesCommentsCommentIDHandlerFunc(func(params GetReposOwnerRepoIssuesCommentsCommentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoIssuesCommentsCommentID has not yet been implemented")
		}),
		GetReposOwnerRepoIssuesEventsHandler: GetReposOwnerRepoIssuesEventsHandlerFunc(func(params GetReposOwnerRepoIssuesEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoIssuesEvents has not yet been implemented")
		}),
		GetReposOwnerRepoIssuesEventsEventIDHandler: GetReposOwnerRepoIssuesEventsEventIDHandlerFunc(func(params GetReposOwnerRepoIssuesEventsEventIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoIssuesEventsEventID has not yet been implemented")
		}),
		GetReposOwnerRepoIssuesNumberHandler: GetReposOwnerRepoIssuesNumberHandlerFunc(func(params GetReposOwnerRepoIssuesNumberParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoIssuesNumber has not yet been implemented")
		}),
		GetReposOwnerRepoIssuesNumberCommentsHandler: GetReposOwnerRepoIssuesNumberCommentsHandlerFunc(func(params GetReposOwnerRepoIssuesNumberCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoIssuesNumberComments has not yet been implemented")
		}),
		GetReposOwnerRepoIssuesNumberEventsHandler: GetReposOwnerRepoIssuesNumberEventsHandlerFunc(func(params GetReposOwnerRepoIssuesNumberEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoIssuesNumberEvents has not yet been implemented")
		}),
		GetReposOwnerRepoIssuesNumberLabelsHandler: GetReposOwnerRepoIssuesNumberLabelsHandlerFunc(func(params GetReposOwnerRepoIssuesNumberLabelsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoIssuesNumberLabels has not yet been implemented")
		}),
		GetReposOwnerRepoKeysHandler: GetReposOwnerRepoKeysHandlerFunc(func(params GetReposOwnerRepoKeysParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoKeys has not yet been implemented")
		}),
		GetReposOwnerRepoKeysKeyIDHandler: GetReposOwnerRepoKeysKeyIDHandlerFunc(func(params GetReposOwnerRepoKeysKeyIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoKeysKeyID has not yet been implemented")
		}),
		GetReposOwnerRepoLabelsHandler: GetReposOwnerRepoLabelsHandlerFunc(func(params GetReposOwnerRepoLabelsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoLabels has not yet been implemented")
		}),
		GetReposOwnerRepoLabelsNameHandler: GetReposOwnerRepoLabelsNameHandlerFunc(func(params GetReposOwnerRepoLabelsNameParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoLabelsName has not yet been implemented")
		}),
		GetReposOwnerRepoLanguagesHandler: GetReposOwnerRepoLanguagesHandlerFunc(func(params GetReposOwnerRepoLanguagesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoLanguages has not yet been implemented")
		}),
		GetReposOwnerRepoMilestonesHandler: GetReposOwnerRepoMilestonesHandlerFunc(func(params GetReposOwnerRepoMilestonesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoMilestones has not yet been implemented")
		}),
		GetReposOwnerRepoMilestonesNumberHandler: GetReposOwnerRepoMilestonesNumberHandlerFunc(func(params GetReposOwnerRepoMilestonesNumberParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoMilestonesNumber has not yet been implemented")
		}),
		GetReposOwnerRepoMilestonesNumberLabelsHandler: GetReposOwnerRepoMilestonesNumberLabelsHandlerFunc(func(params GetReposOwnerRepoMilestonesNumberLabelsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoMilestonesNumberLabels has not yet been implemented")
		}),
		GetReposOwnerRepoNotificationsHandler: GetReposOwnerRepoNotificationsHandlerFunc(func(params GetReposOwnerRepoNotificationsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoNotifications has not yet been implemented")
		}),
		GetReposOwnerRepoPullsHandler: GetReposOwnerRepoPullsHandlerFunc(func(params GetReposOwnerRepoPullsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoPulls has not yet been implemented")
		}),
		GetReposOwnerRepoPullsCommentsHandler: GetReposOwnerRepoPullsCommentsHandlerFunc(func(params GetReposOwnerRepoPullsCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoPullsComments has not yet been implemented")
		}),
		GetReposOwnerRepoPullsCommentsCommentIDHandler: GetReposOwnerRepoPullsCommentsCommentIDHandlerFunc(func(params GetReposOwnerRepoPullsCommentsCommentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoPullsCommentsCommentID has not yet been implemented")
		}),
		GetReposOwnerRepoPullsNumberHandler: GetReposOwnerRepoPullsNumberHandlerFunc(func(params GetReposOwnerRepoPullsNumberParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoPullsNumber has not yet been implemented")
		}),
		GetReposOwnerRepoPullsNumberCommentsHandler: GetReposOwnerRepoPullsNumberCommentsHandlerFunc(func(params GetReposOwnerRepoPullsNumberCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoPullsNumberComments has not yet been implemented")
		}),
		GetReposOwnerRepoPullsNumberCommitsHandler: GetReposOwnerRepoPullsNumberCommitsHandlerFunc(func(params GetReposOwnerRepoPullsNumberCommitsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoPullsNumberCommits has not yet been implemented")
		}),
		GetReposOwnerRepoPullsNumberFilesHandler: GetReposOwnerRepoPullsNumberFilesHandlerFunc(func(params GetReposOwnerRepoPullsNumberFilesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoPullsNumberFiles has not yet been implemented")
		}),
		GetReposOwnerRepoPullsNumberMergeHandler: GetReposOwnerRepoPullsNumberMergeHandlerFunc(func(params GetReposOwnerRepoPullsNumberMergeParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoPullsNumberMerge has not yet been implemented")
		}),
		GetReposOwnerRepoReadmeHandler: GetReposOwnerRepoReadmeHandlerFunc(func(params GetReposOwnerRepoReadmeParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoReadme has not yet been implemented")
		}),
		GetReposOwnerRepoReleasesHandler: GetReposOwnerRepoReleasesHandlerFunc(func(params GetReposOwnerRepoReleasesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoReleases has not yet been implemented")
		}),
		GetReposOwnerRepoReleasesAssetsIDHandler: GetReposOwnerRepoReleasesAssetsIDHandlerFunc(func(params GetReposOwnerRepoReleasesAssetsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoReleasesAssetsID has not yet been implemented")
		}),
		GetReposOwnerRepoReleasesIDHandler: GetReposOwnerRepoReleasesIDHandlerFunc(func(params GetReposOwnerRepoReleasesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoReleasesID has not yet been implemented")
		}),
		GetReposOwnerRepoReleasesIDAssetsHandler: GetReposOwnerRepoReleasesIDAssetsHandlerFunc(func(params GetReposOwnerRepoReleasesIDAssetsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoReleasesIDAssets has not yet been implemented")
		}),
		GetReposOwnerRepoStargazersHandler: GetReposOwnerRepoStargazersHandlerFunc(func(params GetReposOwnerRepoStargazersParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoStargazers has not yet been implemented")
		}),
		GetReposOwnerRepoStatsCodeFrequencyHandler: GetReposOwnerRepoStatsCodeFrequencyHandlerFunc(func(params GetReposOwnerRepoStatsCodeFrequencyParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoStatsCodeFrequency has not yet been implemented")
		}),
		GetReposOwnerRepoStatsCommitActivityHandler: GetReposOwnerRepoStatsCommitActivityHandlerFunc(func(params GetReposOwnerRepoStatsCommitActivityParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoStatsCommitActivity has not yet been implemented")
		}),
		GetReposOwnerRepoStatsContributorsHandler: GetReposOwnerRepoStatsContributorsHandlerFunc(func(params GetReposOwnerRepoStatsContributorsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoStatsContributors has not yet been implemented")
		}),
		GetReposOwnerRepoStatsParticipationHandler: GetReposOwnerRepoStatsParticipationHandlerFunc(func(params GetReposOwnerRepoStatsParticipationParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoStatsParticipation has not yet been implemented")
		}),
		GetReposOwnerRepoStatsPunchCardHandler: GetReposOwnerRepoStatsPunchCardHandlerFunc(func(params GetReposOwnerRepoStatsPunchCardParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoStatsPunchCard has not yet been implemented")
		}),
		GetReposOwnerRepoStatusesRefHandler: GetReposOwnerRepoStatusesRefHandlerFunc(func(params GetReposOwnerRepoStatusesRefParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoStatusesRef has not yet been implemented")
		}),
		GetReposOwnerRepoSubscribersHandler: GetReposOwnerRepoSubscribersHandlerFunc(func(params GetReposOwnerRepoSubscribersParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoSubscribers has not yet been implemented")
		}),
		GetReposOwnerRepoSubscriptionHandler: GetReposOwnerRepoSubscriptionHandlerFunc(func(params GetReposOwnerRepoSubscriptionParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoSubscription has not yet been implemented")
		}),
		GetReposOwnerRepoTagsHandler: GetReposOwnerRepoTagsHandlerFunc(func(params GetReposOwnerRepoTagsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoTags has not yet been implemented")
		}),
		GetReposOwnerRepoTeamsHandler: GetReposOwnerRepoTeamsHandlerFunc(func(params GetReposOwnerRepoTeamsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoTeams has not yet been implemented")
		}),
		GetReposOwnerRepoWatchersHandler: GetReposOwnerRepoWatchersHandlerFunc(func(params GetReposOwnerRepoWatchersParams) middleware.Responder {
			return middleware.NotImplemented("operation GetReposOwnerRepoWatchers has not yet been implemented")
		}),
		GetRepositoriesHandler: GetRepositoriesHandlerFunc(func(params GetRepositoriesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetRepositories has not yet been implemented")
		}),
		GetSearchCodeHandler: GetSearchCodeHandlerFunc(func(params GetSearchCodeParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSearchCode has not yet been implemented")
		}),
		GetSearchIssuesHandler: GetSearchIssuesHandlerFunc(func(params GetSearchIssuesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSearchIssues has not yet been implemented")
		}),
		GetSearchRepositoriesHandler: GetSearchRepositoriesHandlerFunc(func(params GetSearchRepositoriesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSearchRepositories has not yet been implemented")
		}),
		GetSearchUsersHandler: GetSearchUsersHandlerFunc(func(params GetSearchUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSearchUsers has not yet been implemented")
		}),
		GetTeamsTeamIDHandler: GetTeamsTeamIDHandlerFunc(func(params GetTeamsTeamIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTeamsTeamID has not yet been implemented")
		}),
		GetTeamsTeamIDMembersHandler: GetTeamsTeamIDMembersHandlerFunc(func(params GetTeamsTeamIDMembersParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTeamsTeamIDMembers has not yet been implemented")
		}),
		GetTeamsTeamIDMembersUsernameHandler: GetTeamsTeamIDMembersUsernameHandlerFunc(func(params GetTeamsTeamIDMembersUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTeamsTeamIDMembersUsername has not yet been implemented")
		}),
		GetTeamsTeamIDMembershipsUsernameHandler: GetTeamsTeamIDMembershipsUsernameHandlerFunc(func(params GetTeamsTeamIDMembershipsUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTeamsTeamIDMembershipsUsername has not yet been implemented")
		}),
		GetTeamsTeamIDReposHandler: GetTeamsTeamIDReposHandlerFunc(func(params GetTeamsTeamIDReposParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTeamsTeamIDRepos has not yet been implemented")
		}),
		GetTeamsTeamIDReposOwnerRepoHandler: GetTeamsTeamIDReposOwnerRepoHandlerFunc(func(params GetTeamsTeamIDReposOwnerRepoParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTeamsTeamIDReposOwnerRepo has not yet been implemented")
		}),
		GetUserHandler: GetUserHandlerFunc(func(params GetUserParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUser has not yet been implemented")
		}),
		GetUserEmailsHandler: GetUserEmailsHandlerFunc(func(params GetUserEmailsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserEmails has not yet been implemented")
		}),
		GetUserFollowersHandler: GetUserFollowersHandlerFunc(func(params GetUserFollowersParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserFollowers has not yet been implemented")
		}),
		GetUserFollowingHandler: GetUserFollowingHandlerFunc(func(params GetUserFollowingParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserFollowing has not yet been implemented")
		}),
		GetUserFollowingUsernameHandler: GetUserFollowingUsernameHandlerFunc(func(params GetUserFollowingUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserFollowingUsername has not yet been implemented")
		}),
		GetUserIssuesHandler: GetUserIssuesHandlerFunc(func(params GetUserIssuesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserIssues has not yet been implemented")
		}),
		GetUserKeysHandler: GetUserKeysHandlerFunc(func(params GetUserKeysParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserKeys has not yet been implemented")
		}),
		GetUserKeysKeyIDHandler: GetUserKeysKeyIDHandlerFunc(func(params GetUserKeysKeyIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserKeysKeyID has not yet been implemented")
		}),
		GetUserOrgsHandler: GetUserOrgsHandlerFunc(func(params GetUserOrgsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserOrgs has not yet been implemented")
		}),
		GetUserReposHandler: GetUserReposHandlerFunc(func(params GetUserReposParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserRepos has not yet been implemented")
		}),
		GetUserStarredHandler: GetUserStarredHandlerFunc(func(params GetUserStarredParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserStarred has not yet been implemented")
		}),
		GetUserStarredOwnerRepoHandler: GetUserStarredOwnerRepoHandlerFunc(func(params GetUserStarredOwnerRepoParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserStarredOwnerRepo has not yet been implemented")
		}),
		GetUserSubscriptionsHandler: GetUserSubscriptionsHandlerFunc(func(params GetUserSubscriptionsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserSubscriptions has not yet been implemented")
		}),
		GetUserSubscriptionsOwnerRepoHandler: GetUserSubscriptionsOwnerRepoHandlerFunc(func(params GetUserSubscriptionsOwnerRepoParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserSubscriptionsOwnerRepo has not yet been implemented")
		}),
		GetUserTeamsHandler: GetUserTeamsHandlerFunc(func(params GetUserTeamsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserTeams has not yet been implemented")
		}),
		GetUsersHandler: GetUsersHandlerFunc(func(params GetUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsers has not yet been implemented")
		}),
		GetUsersUsernameHandler: GetUsersUsernameHandlerFunc(func(params GetUsersUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsername has not yet been implemented")
		}),
		GetUsersUsernameEventsHandler: GetUsersUsernameEventsHandlerFunc(func(params GetUsersUsernameEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsernameEvents has not yet been implemented")
		}),
		GetUsersUsernameEventsOrgsOrgHandler: GetUsersUsernameEventsOrgsOrgHandlerFunc(func(params GetUsersUsernameEventsOrgsOrgParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsernameEventsOrgsOrg has not yet been implemented")
		}),
		GetUsersUsernameFollowersHandler: GetUsersUsernameFollowersHandlerFunc(func(params GetUsersUsernameFollowersParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsernameFollowers has not yet been implemented")
		}),
		GetUsersUsernameFollowingTargetUserHandler: GetUsersUsernameFollowingTargetUserHandlerFunc(func(params GetUsersUsernameFollowingTargetUserParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsernameFollowingTargetUser has not yet been implemented")
		}),
		GetUsersUsernameGistsHandler: GetUsersUsernameGistsHandlerFunc(func(params GetUsersUsernameGistsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsernameGists has not yet been implemented")
		}),
		GetUsersUsernameKeysHandler: GetUsersUsernameKeysHandlerFunc(func(params GetUsersUsernameKeysParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsernameKeys has not yet been implemented")
		}),
		GetUsersUsernameOrgsHandler: GetUsersUsernameOrgsHandlerFunc(func(params GetUsersUsernameOrgsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsernameOrgs has not yet been implemented")
		}),
		GetUsersUsernameReceivedEventsHandler: GetUsersUsernameReceivedEventsHandlerFunc(func(params GetUsersUsernameReceivedEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsernameReceivedEvents has not yet been implemented")
		}),
		GetUsersUsernameReceivedEventsPublicHandler: GetUsersUsernameReceivedEventsPublicHandlerFunc(func(params GetUsersUsernameReceivedEventsPublicParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsernameReceivedEventsPublic has not yet been implemented")
		}),
		GetUsersUsernameReposHandler: GetUsersUsernameReposHandlerFunc(func(params GetUsersUsernameReposParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsernameRepos has not yet been implemented")
		}),
		GetUsersUsernameStarredHandler: GetUsersUsernameStarredHandlerFunc(func(params GetUsersUsernameStarredParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsernameStarred has not yet been implemented")
		}),
		GetUsersUsernameSubscriptionsHandler: GetUsersUsernameSubscriptionsHandlerFunc(func(params GetUsersUsernameSubscriptionsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUsersUsernameSubscriptions has not yet been implemented")
		}),
		PatchGistsIDHandler: PatchGistsIDHandlerFunc(func(params PatchGistsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchGistsID has not yet been implemented")
		}),
		PatchGistsIDCommentsCommentIDHandler: PatchGistsIDCommentsCommentIDHandlerFunc(func(params PatchGistsIDCommentsCommentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchGistsIDCommentsCommentID has not yet been implemented")
		}),
		PatchNotificationsThreadsIDHandler: PatchNotificationsThreadsIDHandlerFunc(func(params PatchNotificationsThreadsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchNotificationsThreadsID has not yet been implemented")
		}),
		PatchOrgsOrgHandler: PatchOrgsOrgHandlerFunc(func(params PatchOrgsOrgParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchOrgsOrg has not yet been implemented")
		}),
		PatchReposOwnerRepoHandler: PatchReposOwnerRepoHandlerFunc(func(params PatchReposOwnerRepoParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchReposOwnerRepo has not yet been implemented")
		}),
		PatchReposOwnerRepoCommentsCommentIDHandler: PatchReposOwnerRepoCommentsCommentIDHandlerFunc(func(params PatchReposOwnerRepoCommentsCommentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchReposOwnerRepoCommentsCommentID has not yet been implemented")
		}),
		PatchReposOwnerRepoGitRefsRefHandler: PatchReposOwnerRepoGitRefsRefHandlerFunc(func(params PatchReposOwnerRepoGitRefsRefParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchReposOwnerRepoGitRefsRef has not yet been implemented")
		}),
		PatchReposOwnerRepoHooksHookIDHandler: PatchReposOwnerRepoHooksHookIDHandlerFunc(func(params PatchReposOwnerRepoHooksHookIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchReposOwnerRepoHooksHookID has not yet been implemented")
		}),
		PatchReposOwnerRepoIssuesCommentsCommentIDHandler: PatchReposOwnerRepoIssuesCommentsCommentIDHandlerFunc(func(params PatchReposOwnerRepoIssuesCommentsCommentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchReposOwnerRepoIssuesCommentsCommentID has not yet been implemented")
		}),
		PatchReposOwnerRepoIssuesNumberHandler: PatchReposOwnerRepoIssuesNumberHandlerFunc(func(params PatchReposOwnerRepoIssuesNumberParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchReposOwnerRepoIssuesNumber has not yet been implemented")
		}),
		PatchReposOwnerRepoLabelsNameHandler: PatchReposOwnerRepoLabelsNameHandlerFunc(func(params PatchReposOwnerRepoLabelsNameParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchReposOwnerRepoLabelsName has not yet been implemented")
		}),
		PatchReposOwnerRepoMilestonesNumberHandler: PatchReposOwnerRepoMilestonesNumberHandlerFunc(func(params PatchReposOwnerRepoMilestonesNumberParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchReposOwnerRepoMilestonesNumber has not yet been implemented")
		}),
		PatchReposOwnerRepoPullsCommentsCommentIDHandler: PatchReposOwnerRepoPullsCommentsCommentIDHandlerFunc(func(params PatchReposOwnerRepoPullsCommentsCommentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchReposOwnerRepoPullsCommentsCommentID has not yet been implemented")
		}),
		PatchReposOwnerRepoPullsNumberHandler: PatchReposOwnerRepoPullsNumberHandlerFunc(func(params PatchReposOwnerRepoPullsNumberParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchReposOwnerRepoPullsNumber has not yet been implemented")
		}),
		PatchReposOwnerRepoReleasesAssetsIDHandler: PatchReposOwnerRepoReleasesAssetsIDHandlerFunc(func(params PatchReposOwnerRepoReleasesAssetsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchReposOwnerRepoReleasesAssetsID has not yet been implemented")
		}),
		PatchReposOwnerRepoReleasesIDHandler: PatchReposOwnerRepoReleasesIDHandlerFunc(func(params PatchReposOwnerRepoReleasesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchReposOwnerRepoReleasesID has not yet been implemented")
		}),
		PatchTeamsTeamIDHandler: PatchTeamsTeamIDHandlerFunc(func(params PatchTeamsTeamIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchTeamsTeamID has not yet been implemented")
		}),
		PatchUserHandler: PatchUserHandlerFunc(func(params PatchUserParams) middleware.Responder {
			return middleware.NotImplemented("operation PatchUser has not yet been implemented")
		}),
		PostGistsHandler: PostGistsHandlerFunc(func(params PostGistsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostGists has not yet been implemented")
		}),
		PostGistsIDCommentsHandler: PostGistsIDCommentsHandlerFunc(func(params PostGistsIDCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostGistsIDComments has not yet been implemented")
		}),
		PostGistsIDForksHandler: PostGistsIDForksHandlerFunc(func(params PostGistsIDForksParams) middleware.Responder {
			return middleware.NotImplemented("operation PostGistsIDForks has not yet been implemented")
		}),
		PostMarkdownHandler: PostMarkdownHandlerFunc(func(params PostMarkdownParams) middleware.Responder {
			return middleware.NotImplemented("operation PostMarkdown has not yet been implemented")
		}),
		PostMarkdownRawHandler: PostMarkdownRawHandlerFunc(func(params PostMarkdownRawParams) middleware.Responder {
			return middleware.NotImplemented("operation PostMarkdownRaw has not yet been implemented")
		}),
		PostOrgsOrgReposHandler: PostOrgsOrgReposHandlerFunc(func(params PostOrgsOrgReposParams) middleware.Responder {
			return middleware.NotImplemented("operation PostOrgsOrgRepos has not yet been implemented")
		}),
		PostOrgsOrgTeamsHandler: PostOrgsOrgTeamsHandlerFunc(func(params PostOrgsOrgTeamsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostOrgsOrgTeams has not yet been implemented")
		}),
		PostReposOwnerRepoCommitsShaCodeCommentsHandler: PostReposOwnerRepoCommitsShaCodeCommentsHandlerFunc(func(params PostReposOwnerRepoCommitsShaCodeCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoCommitsShaCodeComments has not yet been implemented")
		}),
		PostReposOwnerRepoDeploymentsHandler: PostReposOwnerRepoDeploymentsHandlerFunc(func(params PostReposOwnerRepoDeploymentsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoDeployments has not yet been implemented")
		}),
		PostReposOwnerRepoDeploymentsIDStatusesHandler: PostReposOwnerRepoDeploymentsIDStatusesHandlerFunc(func(params PostReposOwnerRepoDeploymentsIDStatusesParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoDeploymentsIDStatuses has not yet been implemented")
		}),
		PostReposOwnerRepoForksHandler: PostReposOwnerRepoForksHandlerFunc(func(params PostReposOwnerRepoForksParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoForks has not yet been implemented")
		}),
		PostReposOwnerRepoGitBlobsHandler: PostReposOwnerRepoGitBlobsHandlerFunc(func(params PostReposOwnerRepoGitBlobsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoGitBlobs has not yet been implemented")
		}),
		PostReposOwnerRepoGitCommitsHandler: PostReposOwnerRepoGitCommitsHandlerFunc(func(params PostReposOwnerRepoGitCommitsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoGitCommits has not yet been implemented")
		}),
		PostReposOwnerRepoGitRefsHandler: PostReposOwnerRepoGitRefsHandlerFunc(func(params PostReposOwnerRepoGitRefsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoGitRefs has not yet been implemented")
		}),
		PostReposOwnerRepoGitTagsHandler: PostReposOwnerRepoGitTagsHandlerFunc(func(params PostReposOwnerRepoGitTagsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoGitTags has not yet been implemented")
		}),
		PostReposOwnerRepoGitTreesHandler: PostReposOwnerRepoGitTreesHandlerFunc(func(params PostReposOwnerRepoGitTreesParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoGitTrees has not yet been implemented")
		}),
		PostReposOwnerRepoHooksHandler: PostReposOwnerRepoHooksHandlerFunc(func(params PostReposOwnerRepoHooksParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoHooks has not yet been implemented")
		}),
		PostReposOwnerRepoHooksHookIDTestsHandler: PostReposOwnerRepoHooksHookIDTestsHandlerFunc(func(params PostReposOwnerRepoHooksHookIDTestsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoHooksHookIDTests has not yet been implemented")
		}),
		PostReposOwnerRepoIssuesHandler: PostReposOwnerRepoIssuesHandlerFunc(func(params PostReposOwnerRepoIssuesParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoIssues has not yet been implemented")
		}),
		PostReposOwnerRepoIssuesNumberCommentsHandler: PostReposOwnerRepoIssuesNumberCommentsHandlerFunc(func(params PostReposOwnerRepoIssuesNumberCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoIssuesNumberComments has not yet been implemented")
		}),
		PostReposOwnerRepoIssuesNumberLabelsHandler: PostReposOwnerRepoIssuesNumberLabelsHandlerFunc(func(params PostReposOwnerRepoIssuesNumberLabelsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoIssuesNumberLabels has not yet been implemented")
		}),
		PostReposOwnerRepoKeysHandler: PostReposOwnerRepoKeysHandlerFunc(func(params PostReposOwnerRepoKeysParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoKeys has not yet been implemented")
		}),
		PostReposOwnerRepoLabelsHandler: PostReposOwnerRepoLabelsHandlerFunc(func(params PostReposOwnerRepoLabelsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoLabels has not yet been implemented")
		}),
		PostReposOwnerRepoMergesHandler: PostReposOwnerRepoMergesHandlerFunc(func(params PostReposOwnerRepoMergesParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoMerges has not yet been implemented")
		}),
		PostReposOwnerRepoMilestonesHandler: PostReposOwnerRepoMilestonesHandlerFunc(func(params PostReposOwnerRepoMilestonesParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoMilestones has not yet been implemented")
		}),
		PostReposOwnerRepoPullsHandler: PostReposOwnerRepoPullsHandlerFunc(func(params PostReposOwnerRepoPullsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoPulls has not yet been implemented")
		}),
		PostReposOwnerRepoPullsNumberCommentsHandler: PostReposOwnerRepoPullsNumberCommentsHandlerFunc(func(params PostReposOwnerRepoPullsNumberCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoPullsNumberComments has not yet been implemented")
		}),
		PostReposOwnerRepoReleasesHandler: PostReposOwnerRepoReleasesHandlerFunc(func(params PostReposOwnerRepoReleasesParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoReleases has not yet been implemented")
		}),
		PostReposOwnerRepoStatusesRefHandler: PostReposOwnerRepoStatusesRefHandlerFunc(func(params PostReposOwnerRepoStatusesRefParams) middleware.Responder {
			return middleware.NotImplemented("operation PostReposOwnerRepoStatusesRef has not yet been implemented")
		}),
		PostUserEmailsHandler: PostUserEmailsHandlerFunc(func(params PostUserEmailsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostUserEmails has not yet been implemented")
		}),
		PostUserKeysHandler: PostUserKeysHandlerFunc(func(params PostUserKeysParams) middleware.Responder {
			return middleware.NotImplemented("operation PostUserKeys has not yet been implemented")
		}),
		PostUserReposHandler: PostUserReposHandlerFunc(func(params PostUserReposParams) middleware.Responder {
			return middleware.NotImplemented("operation PostUserRepos has not yet been implemented")
		}),
		PutGistsIDStarHandler: PutGistsIDStarHandlerFunc(func(params PutGistsIDStarParams) middleware.Responder {
			return middleware.NotImplemented("operation PutGistsIDStar has not yet been implemented")
		}),
		PutNotificationsHandler: PutNotificationsHandlerFunc(func(params PutNotificationsParams) middleware.Responder {
			return middleware.NotImplemented("operation PutNotifications has not yet been implemented")
		}),
		PutNotificationsThreadsIDSubscriptionHandler: PutNotificationsThreadsIDSubscriptionHandlerFunc(func(params PutNotificationsThreadsIDSubscriptionParams) middleware.Responder {
			return middleware.NotImplemented("operation PutNotificationsThreadsIDSubscription has not yet been implemented")
		}),
		PutOrgsOrgPublicMembersUsernameHandler: PutOrgsOrgPublicMembersUsernameHandlerFunc(func(params PutOrgsOrgPublicMembersUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation PutOrgsOrgPublicMembersUsername has not yet been implemented")
		}),
		PutReposOwnerRepoCollaboratorsUserHandler: PutReposOwnerRepoCollaboratorsUserHandlerFunc(func(params PutReposOwnerRepoCollaboratorsUserParams) middleware.Responder {
			return middleware.NotImplemented("operation PutReposOwnerRepoCollaboratorsUser has not yet been implemented")
		}),
		PutReposOwnerRepoContentsPathHandler: PutReposOwnerRepoContentsPathHandlerFunc(func(params PutReposOwnerRepoContentsPathParams) middleware.Responder {
			return middleware.NotImplemented("operation PutReposOwnerRepoContentsPath has not yet been implemented")
		}),
		PutReposOwnerRepoIssuesNumberLabelsHandler: PutReposOwnerRepoIssuesNumberLabelsHandlerFunc(func(params PutReposOwnerRepoIssuesNumberLabelsParams) middleware.Responder {
			return middleware.NotImplemented("operation PutReposOwnerRepoIssuesNumberLabels has not yet been implemented")
		}),
		PutReposOwnerRepoNotificationsHandler: PutReposOwnerRepoNotificationsHandlerFunc(func(params PutReposOwnerRepoNotificationsParams) middleware.Responder {
			return middleware.NotImplemented("operation PutReposOwnerRepoNotifications has not yet been implemented")
		}),
		PutReposOwnerRepoPullsNumberMergeHandler: PutReposOwnerRepoPullsNumberMergeHandlerFunc(func(params PutReposOwnerRepoPullsNumberMergeParams) middleware.Responder {
			return middleware.NotImplemented("operation PutReposOwnerRepoPullsNumberMerge has not yet been implemented")
		}),
		PutReposOwnerRepoSubscriptionHandler: PutReposOwnerRepoSubscriptionHandlerFunc(func(params PutReposOwnerRepoSubscriptionParams) middleware.Responder {
			return middleware.NotImplemented("operation PutReposOwnerRepoSubscription has not yet been implemented")
		}),
		PutTeamsTeamIDMembersUsernameHandler: PutTeamsTeamIDMembersUsernameHandlerFunc(func(params PutTeamsTeamIDMembersUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation PutTeamsTeamIDMembersUsername has not yet been implemented")
		}),
		PutTeamsTeamIDMembershipsUsernameHandler: PutTeamsTeamIDMembershipsUsernameHandlerFunc(func(params PutTeamsTeamIDMembershipsUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation PutTeamsTeamIDMembershipsUsername has not yet been implemented")
		}),
		PutTeamsTeamIDReposOrgRepoHandler: PutTeamsTeamIDReposOrgRepoHandlerFunc(func(params PutTeamsTeamIDReposOrgRepoParams) middleware.Responder {
			return middleware.NotImplemented("operation PutTeamsTeamIDReposOrgRepo has not yet been implemented")
		}),
		PutUserFollowingUsernameHandler: PutUserFollowingUsernameHandlerFunc(func(params PutUserFollowingUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation PutUserFollowingUsername has not yet been implemented")
		}),
		PutUserStarredOwnerRepoHandler: PutUserStarredOwnerRepoHandlerFunc(func(params PutUserStarredOwnerRepoParams) middleware.Responder {
			return middleware.NotImplemented("operation PutUserStarredOwnerRepo has not yet been implemented")
		}),
		PutUserSubscriptionsOwnerRepoHandler: PutUserSubscriptionsOwnerRepoHandlerFunc(func(params PutUserSubscriptionsOwnerRepoParams) middleware.Responder {
			return middleware.NotImplemented("operation PutUserSubscriptionsOwnerRepo has not yet been implemented")
		}),
	}
}

/*GitapiAPI Powerful collaboration, code review, and code management for open source and private projects.
 */
type GitapiAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// TxtConsumer registers a consumer for a "text/plain" mime type
	TxtConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// HTMLProducer registers a producer for a "text/html" mime type
	HTMLProducer runtime.Producer

	// DeleteGistsIDHandler sets the operation handler for the delete gists ID operation
	DeleteGistsIDHandler DeleteGistsIDHandler
	// DeleteGistsIDCommentsCommentIDHandler sets the operation handler for the delete gists ID comments comment ID operation
	DeleteGistsIDCommentsCommentIDHandler DeleteGistsIDCommentsCommentIDHandler
	// DeleteGistsIDStarHandler sets the operation handler for the delete gists ID star operation
	DeleteGistsIDStarHandler DeleteGistsIDStarHandler
	// DeleteNotificationsThreadsIDSubscriptionHandler sets the operation handler for the delete notifications threads ID subscription operation
	DeleteNotificationsThreadsIDSubscriptionHandler DeleteNotificationsThreadsIDSubscriptionHandler
	// DeleteOrgsOrgMembersUsernameHandler sets the operation handler for the delete orgs org members username operation
	DeleteOrgsOrgMembersUsernameHandler DeleteOrgsOrgMembersUsernameHandler
	// DeleteOrgsOrgPublicMembersUsernameHandler sets the operation handler for the delete orgs org public members username operation
	DeleteOrgsOrgPublicMembersUsernameHandler DeleteOrgsOrgPublicMembersUsernameHandler
	// DeleteReposOwnerRepoHandler sets the operation handler for the delete repos owner repo operation
	DeleteReposOwnerRepoHandler DeleteReposOwnerRepoHandler
	// DeleteReposOwnerRepoCollaboratorsUserHandler sets the operation handler for the delete repos owner repo collaborators user operation
	DeleteReposOwnerRepoCollaboratorsUserHandler DeleteReposOwnerRepoCollaboratorsUserHandler
	// DeleteReposOwnerRepoCommentsCommentIDHandler sets the operation handler for the delete repos owner repo comments comment ID operation
	DeleteReposOwnerRepoCommentsCommentIDHandler DeleteReposOwnerRepoCommentsCommentIDHandler
	// DeleteReposOwnerRepoContentsPathHandler sets the operation handler for the delete repos owner repo contents path operation
	DeleteReposOwnerRepoContentsPathHandler DeleteReposOwnerRepoContentsPathHandler
	// DeleteReposOwnerRepoDownloadsDownloadIDHandler sets the operation handler for the delete repos owner repo downloads download ID operation
	DeleteReposOwnerRepoDownloadsDownloadIDHandler DeleteReposOwnerRepoDownloadsDownloadIDHandler
	// DeleteReposOwnerRepoGitRefsRefHandler sets the operation handler for the delete repos owner repo git refs ref operation
	DeleteReposOwnerRepoGitRefsRefHandler DeleteReposOwnerRepoGitRefsRefHandler
	// DeleteReposOwnerRepoHooksHookIDHandler sets the operation handler for the delete repos owner repo hooks hook ID operation
	DeleteReposOwnerRepoHooksHookIDHandler DeleteReposOwnerRepoHooksHookIDHandler
	// DeleteReposOwnerRepoIssuesCommentsCommentIDHandler sets the operation handler for the delete repos owner repo issues comments comment ID operation
	DeleteReposOwnerRepoIssuesCommentsCommentIDHandler DeleteReposOwnerRepoIssuesCommentsCommentIDHandler
	// DeleteReposOwnerRepoIssuesNumberLabelsHandler sets the operation handler for the delete repos owner repo issues number labels operation
	DeleteReposOwnerRepoIssuesNumberLabelsHandler DeleteReposOwnerRepoIssuesNumberLabelsHandler
	// DeleteReposOwnerRepoIssuesNumberLabelsNameHandler sets the operation handler for the delete repos owner repo issues number labels name operation
	DeleteReposOwnerRepoIssuesNumberLabelsNameHandler DeleteReposOwnerRepoIssuesNumberLabelsNameHandler
	// DeleteReposOwnerRepoKeysKeyIDHandler sets the operation handler for the delete repos owner repo keys key ID operation
	DeleteReposOwnerRepoKeysKeyIDHandler DeleteReposOwnerRepoKeysKeyIDHandler
	// DeleteReposOwnerRepoLabelsNameHandler sets the operation handler for the delete repos owner repo labels name operation
	DeleteReposOwnerRepoLabelsNameHandler DeleteReposOwnerRepoLabelsNameHandler
	// DeleteReposOwnerRepoMilestonesNumberHandler sets the operation handler for the delete repos owner repo milestones number operation
	DeleteReposOwnerRepoMilestonesNumberHandler DeleteReposOwnerRepoMilestonesNumberHandler
	// DeleteReposOwnerRepoPullsCommentsCommentIDHandler sets the operation handler for the delete repos owner repo pulls comments comment ID operation
	DeleteReposOwnerRepoPullsCommentsCommentIDHandler DeleteReposOwnerRepoPullsCommentsCommentIDHandler
	// DeleteReposOwnerRepoReleasesAssetsIDHandler sets the operation handler for the delete repos owner repo releases assets ID operation
	DeleteReposOwnerRepoReleasesAssetsIDHandler DeleteReposOwnerRepoReleasesAssetsIDHandler
	// DeleteReposOwnerRepoReleasesIDHandler sets the operation handler for the delete repos owner repo releases ID operation
	DeleteReposOwnerRepoReleasesIDHandler DeleteReposOwnerRepoReleasesIDHandler
	// DeleteReposOwnerRepoSubscriptionHandler sets the operation handler for the delete repos owner repo subscription operation
	DeleteReposOwnerRepoSubscriptionHandler DeleteReposOwnerRepoSubscriptionHandler
	// DeleteTeamsTeamIDHandler sets the operation handler for the delete teams team ID operation
	DeleteTeamsTeamIDHandler DeleteTeamsTeamIDHandler
	// DeleteTeamsTeamIDMembersUsernameHandler sets the operation handler for the delete teams team ID members username operation
	DeleteTeamsTeamIDMembersUsernameHandler DeleteTeamsTeamIDMembersUsernameHandler
	// DeleteTeamsTeamIDMembershipsUsernameHandler sets the operation handler for the delete teams team ID memberships username operation
	DeleteTeamsTeamIDMembershipsUsernameHandler DeleteTeamsTeamIDMembershipsUsernameHandler
	// DeleteTeamsTeamIDReposOwnerRepoHandler sets the operation handler for the delete teams team ID repos owner repo operation
	DeleteTeamsTeamIDReposOwnerRepoHandler DeleteTeamsTeamIDReposOwnerRepoHandler
	// DeleteUserEmailsHandler sets the operation handler for the delete user emails operation
	DeleteUserEmailsHandler DeleteUserEmailsHandler
	// DeleteUserFollowingUsernameHandler sets the operation handler for the delete user following username operation
	DeleteUserFollowingUsernameHandler DeleteUserFollowingUsernameHandler
	// DeleteUserKeysKeyIDHandler sets the operation handler for the delete user keys key ID operation
	DeleteUserKeysKeyIDHandler DeleteUserKeysKeyIDHandler
	// DeleteUserStarredOwnerRepoHandler sets the operation handler for the delete user starred owner repo operation
	DeleteUserStarredOwnerRepoHandler DeleteUserStarredOwnerRepoHandler
	// DeleteUserSubscriptionsOwnerRepoHandler sets the operation handler for the delete user subscriptions owner repo operation
	DeleteUserSubscriptionsOwnerRepoHandler DeleteUserSubscriptionsOwnerRepoHandler
	// GetEmojisHandler sets the operation handler for the get emojis operation
	GetEmojisHandler GetEmojisHandler
	// GetEventsHandler sets the operation handler for the get events operation
	GetEventsHandler GetEventsHandler
	// GetFeedsHandler sets the operation handler for the get feeds operation
	GetFeedsHandler GetFeedsHandler
	// GetGistsHandler sets the operation handler for the get gists operation
	GetGistsHandler GetGistsHandler
	// GetGistsIDHandler sets the operation handler for the get gists ID operation
	GetGistsIDHandler GetGistsIDHandler
	// GetGistsIDCommentsHandler sets the operation handler for the get gists ID comments operation
	GetGistsIDCommentsHandler GetGistsIDCommentsHandler
	// GetGistsIDCommentsCommentIDHandler sets the operation handler for the get gists ID comments comment ID operation
	GetGistsIDCommentsCommentIDHandler GetGistsIDCommentsCommentIDHandler
	// GetGistsIDStarHandler sets the operation handler for the get gists ID star operation
	GetGistsIDStarHandler GetGistsIDStarHandler
	// GetGistsPublicHandler sets the operation handler for the get gists public operation
	GetGistsPublicHandler GetGistsPublicHandler
	// GetGistsStarredHandler sets the operation handler for the get gists starred operation
	GetGistsStarredHandler GetGistsStarredHandler
	// GetGitignoreTemplatesHandler sets the operation handler for the get gitignore templates operation
	GetGitignoreTemplatesHandler GetGitignoreTemplatesHandler
	// GetGitignoreTemplatesLanguageHandler sets the operation handler for the get gitignore templates language operation
	GetGitignoreTemplatesLanguageHandler GetGitignoreTemplatesLanguageHandler
	// GetIssuesHandler sets the operation handler for the get issues operation
	GetIssuesHandler GetIssuesHandler
	// GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandler sets the operation handler for the get legacy issues search owner repository state keyword operation
	GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandler GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandler
	// GetLegacyReposSearchKeywordHandler sets the operation handler for the get legacy repos search keyword operation
	GetLegacyReposSearchKeywordHandler GetLegacyReposSearchKeywordHandler
	// GetLegacyUserEmailEmailHandler sets the operation handler for the get legacy user email email operation
	GetLegacyUserEmailEmailHandler GetLegacyUserEmailEmailHandler
	// GetLegacyUserSearchKeywordHandler sets the operation handler for the get legacy user search keyword operation
	GetLegacyUserSearchKeywordHandler GetLegacyUserSearchKeywordHandler
	// GetMetaHandler sets the operation handler for the get meta operation
	GetMetaHandler GetMetaHandler
	// GetNetworksOwnerRepoEventsHandler sets the operation handler for the get networks owner repo events operation
	GetNetworksOwnerRepoEventsHandler GetNetworksOwnerRepoEventsHandler
	// GetNotificationsHandler sets the operation handler for the get notifications operation
	GetNotificationsHandler GetNotificationsHandler
	// GetNotificationsThreadsIDHandler sets the operation handler for the get notifications threads ID operation
	GetNotificationsThreadsIDHandler GetNotificationsThreadsIDHandler
	// GetNotificationsThreadsIDSubscriptionHandler sets the operation handler for the get notifications threads ID subscription operation
	GetNotificationsThreadsIDSubscriptionHandler GetNotificationsThreadsIDSubscriptionHandler
	// GetOrgsOrgHandler sets the operation handler for the get orgs org operation
	GetOrgsOrgHandler GetOrgsOrgHandler
	// GetOrgsOrgEventsHandler sets the operation handler for the get orgs org events operation
	GetOrgsOrgEventsHandler GetOrgsOrgEventsHandler
	// GetOrgsOrgIssuesHandler sets the operation handler for the get orgs org issues operation
	GetOrgsOrgIssuesHandler GetOrgsOrgIssuesHandler
	// GetOrgsOrgMembersHandler sets the operation handler for the get orgs org members operation
	GetOrgsOrgMembersHandler GetOrgsOrgMembersHandler
	// GetOrgsOrgMembersUsernameHandler sets the operation handler for the get orgs org members username operation
	GetOrgsOrgMembersUsernameHandler GetOrgsOrgMembersUsernameHandler
	// GetOrgsOrgPublicMembersHandler sets the operation handler for the get orgs org public members operation
	GetOrgsOrgPublicMembersHandler GetOrgsOrgPublicMembersHandler
	// GetOrgsOrgPublicMembersUsernameHandler sets the operation handler for the get orgs org public members username operation
	GetOrgsOrgPublicMembersUsernameHandler GetOrgsOrgPublicMembersUsernameHandler
	// GetOrgsOrgReposHandler sets the operation handler for the get orgs org repos operation
	GetOrgsOrgReposHandler GetOrgsOrgReposHandler
	// GetOrgsOrgTeamsHandler sets the operation handler for the get orgs org teams operation
	GetOrgsOrgTeamsHandler GetOrgsOrgTeamsHandler
	// GetRateLimitHandler sets the operation handler for the get rate limit operation
	GetRateLimitHandler GetRateLimitHandler
	// GetReposOwnerRepoHandler sets the operation handler for the get repos owner repo operation
	GetReposOwnerRepoHandler GetReposOwnerRepoHandler
	// GetReposOwnerRepoArchiveFormatPathHandler sets the operation handler for the get repos owner repo archive format path operation
	GetReposOwnerRepoArchiveFormatPathHandler GetReposOwnerRepoArchiveFormatPathHandler
	// GetReposOwnerRepoAssigneesHandler sets the operation handler for the get repos owner repo assignees operation
	GetReposOwnerRepoAssigneesHandler GetReposOwnerRepoAssigneesHandler
	// GetReposOwnerRepoAssigneesAssigneeHandler sets the operation handler for the get repos owner repo assignees assignee operation
	GetReposOwnerRepoAssigneesAssigneeHandler GetReposOwnerRepoAssigneesAssigneeHandler
	// GetReposOwnerRepoBranchesHandler sets the operation handler for the get repos owner repo branches operation
	GetReposOwnerRepoBranchesHandler GetReposOwnerRepoBranchesHandler
	// GetReposOwnerRepoBranchesBranchHandler sets the operation handler for the get repos owner repo branches branch operation
	GetReposOwnerRepoBranchesBranchHandler GetReposOwnerRepoBranchesBranchHandler
	// GetReposOwnerRepoCollaboratorsHandler sets the operation handler for the get repos owner repo collaborators operation
	GetReposOwnerRepoCollaboratorsHandler GetReposOwnerRepoCollaboratorsHandler
	// GetReposOwnerRepoCollaboratorsUserHandler sets the operation handler for the get repos owner repo collaborators user operation
	GetReposOwnerRepoCollaboratorsUserHandler GetReposOwnerRepoCollaboratorsUserHandler
	// GetReposOwnerRepoCommentsHandler sets the operation handler for the get repos owner repo comments operation
	GetReposOwnerRepoCommentsHandler GetReposOwnerRepoCommentsHandler
	// GetReposOwnerRepoCommentsCommentIDHandler sets the operation handler for the get repos owner repo comments comment ID operation
	GetReposOwnerRepoCommentsCommentIDHandler GetReposOwnerRepoCommentsCommentIDHandler
	// GetReposOwnerRepoCommitsHandler sets the operation handler for the get repos owner repo commits operation
	GetReposOwnerRepoCommitsHandler GetReposOwnerRepoCommitsHandler
	// GetReposOwnerRepoCommitsRefStatusHandler sets the operation handler for the get repos owner repo commits ref status operation
	GetReposOwnerRepoCommitsRefStatusHandler GetReposOwnerRepoCommitsRefStatusHandler
	// GetReposOwnerRepoCommitsShaCodeHandler sets the operation handler for the get repos owner repo commits sha code operation
	GetReposOwnerRepoCommitsShaCodeHandler GetReposOwnerRepoCommitsShaCodeHandler
	// GetReposOwnerRepoCommitsShaCodeCommentsHandler sets the operation handler for the get repos owner repo commits sha code comments operation
	GetReposOwnerRepoCommitsShaCodeCommentsHandler GetReposOwnerRepoCommitsShaCodeCommentsHandler
	// GetReposOwnerRepoCompareBaseIDHeadIDHandler sets the operation handler for the get repos owner repo compare base ID head ID operation
	GetReposOwnerRepoCompareBaseIDHeadIDHandler GetReposOwnerRepoCompareBaseIDHeadIDHandler
	// GetReposOwnerRepoContentsPathHandler sets the operation handler for the get repos owner repo contents path operation
	GetReposOwnerRepoContentsPathHandler GetReposOwnerRepoContentsPathHandler
	// GetReposOwnerRepoContributorsHandler sets the operation handler for the get repos owner repo contributors operation
	GetReposOwnerRepoContributorsHandler GetReposOwnerRepoContributorsHandler
	// GetReposOwnerRepoDeploymentsHandler sets the operation handler for the get repos owner repo deployments operation
	GetReposOwnerRepoDeploymentsHandler GetReposOwnerRepoDeploymentsHandler
	// GetReposOwnerRepoDeploymentsIDStatusesHandler sets the operation handler for the get repos owner repo deployments ID statuses operation
	GetReposOwnerRepoDeploymentsIDStatusesHandler GetReposOwnerRepoDeploymentsIDStatusesHandler
	// GetReposOwnerRepoDownloadsHandler sets the operation handler for the get repos owner repo downloads operation
	GetReposOwnerRepoDownloadsHandler GetReposOwnerRepoDownloadsHandler
	// GetReposOwnerRepoDownloadsDownloadIDHandler sets the operation handler for the get repos owner repo downloads download ID operation
	GetReposOwnerRepoDownloadsDownloadIDHandler GetReposOwnerRepoDownloadsDownloadIDHandler
	// GetReposOwnerRepoEventsHandler sets the operation handler for the get repos owner repo events operation
	GetReposOwnerRepoEventsHandler GetReposOwnerRepoEventsHandler
	// GetReposOwnerRepoForksHandler sets the operation handler for the get repos owner repo forks operation
	GetReposOwnerRepoForksHandler GetReposOwnerRepoForksHandler
	// GetReposOwnerRepoGitBlobsShaCodeHandler sets the operation handler for the get repos owner repo git blobs sha code operation
	GetReposOwnerRepoGitBlobsShaCodeHandler GetReposOwnerRepoGitBlobsShaCodeHandler
	// GetReposOwnerRepoGitCommitsShaCodeHandler sets the operation handler for the get repos owner repo git commits sha code operation
	GetReposOwnerRepoGitCommitsShaCodeHandler GetReposOwnerRepoGitCommitsShaCodeHandler
	// GetReposOwnerRepoGitRefsHandler sets the operation handler for the get repos owner repo git refs operation
	GetReposOwnerRepoGitRefsHandler GetReposOwnerRepoGitRefsHandler
	// GetReposOwnerRepoGitRefsRefHandler sets the operation handler for the get repos owner repo git refs ref operation
	GetReposOwnerRepoGitRefsRefHandler GetReposOwnerRepoGitRefsRefHandler
	// GetReposOwnerRepoGitTagsShaCodeHandler sets the operation handler for the get repos owner repo git tags sha code operation
	GetReposOwnerRepoGitTagsShaCodeHandler GetReposOwnerRepoGitTagsShaCodeHandler
	// GetReposOwnerRepoGitTreesShaCodeHandler sets the operation handler for the get repos owner repo git trees sha code operation
	GetReposOwnerRepoGitTreesShaCodeHandler GetReposOwnerRepoGitTreesShaCodeHandler
	// GetReposOwnerRepoHooksHandler sets the operation handler for the get repos owner repo hooks operation
	GetReposOwnerRepoHooksHandler GetReposOwnerRepoHooksHandler
	// GetReposOwnerRepoHooksHookIDHandler sets the operation handler for the get repos owner repo hooks hook ID operation
	GetReposOwnerRepoHooksHookIDHandler GetReposOwnerRepoHooksHookIDHandler
	// GetReposOwnerRepoIssuesHandler sets the operation handler for the get repos owner repo issues operation
	GetReposOwnerRepoIssuesHandler GetReposOwnerRepoIssuesHandler
	// GetReposOwnerRepoIssuesCommentsHandler sets the operation handler for the get repos owner repo issues comments operation
	GetReposOwnerRepoIssuesCommentsHandler GetReposOwnerRepoIssuesCommentsHandler
	// GetReposOwnerRepoIssuesCommentsCommentIDHandler sets the operation handler for the get repos owner repo issues comments comment ID operation
	GetReposOwnerRepoIssuesCommentsCommentIDHandler GetReposOwnerRepoIssuesCommentsCommentIDHandler
	// GetReposOwnerRepoIssuesEventsHandler sets the operation handler for the get repos owner repo issues events operation
	GetReposOwnerRepoIssuesEventsHandler GetReposOwnerRepoIssuesEventsHandler
	// GetReposOwnerRepoIssuesEventsEventIDHandler sets the operation handler for the get repos owner repo issues events event ID operation
	GetReposOwnerRepoIssuesEventsEventIDHandler GetReposOwnerRepoIssuesEventsEventIDHandler
	// GetReposOwnerRepoIssuesNumberHandler sets the operation handler for the get repos owner repo issues number operation
	GetReposOwnerRepoIssuesNumberHandler GetReposOwnerRepoIssuesNumberHandler
	// GetReposOwnerRepoIssuesNumberCommentsHandler sets the operation handler for the get repos owner repo issues number comments operation
	GetReposOwnerRepoIssuesNumberCommentsHandler GetReposOwnerRepoIssuesNumberCommentsHandler
	// GetReposOwnerRepoIssuesNumberEventsHandler sets the operation handler for the get repos owner repo issues number events operation
	GetReposOwnerRepoIssuesNumberEventsHandler GetReposOwnerRepoIssuesNumberEventsHandler
	// GetReposOwnerRepoIssuesNumberLabelsHandler sets the operation handler for the get repos owner repo issues number labels operation
	GetReposOwnerRepoIssuesNumberLabelsHandler GetReposOwnerRepoIssuesNumberLabelsHandler
	// GetReposOwnerRepoKeysHandler sets the operation handler for the get repos owner repo keys operation
	GetReposOwnerRepoKeysHandler GetReposOwnerRepoKeysHandler
	// GetReposOwnerRepoKeysKeyIDHandler sets the operation handler for the get repos owner repo keys key ID operation
	GetReposOwnerRepoKeysKeyIDHandler GetReposOwnerRepoKeysKeyIDHandler
	// GetReposOwnerRepoLabelsHandler sets the operation handler for the get repos owner repo labels operation
	GetReposOwnerRepoLabelsHandler GetReposOwnerRepoLabelsHandler
	// GetReposOwnerRepoLabelsNameHandler sets the operation handler for the get repos owner repo labels name operation
	GetReposOwnerRepoLabelsNameHandler GetReposOwnerRepoLabelsNameHandler
	// GetReposOwnerRepoLanguagesHandler sets the operation handler for the get repos owner repo languages operation
	GetReposOwnerRepoLanguagesHandler GetReposOwnerRepoLanguagesHandler
	// GetReposOwnerRepoMilestonesHandler sets the operation handler for the get repos owner repo milestones operation
	GetReposOwnerRepoMilestonesHandler GetReposOwnerRepoMilestonesHandler
	// GetReposOwnerRepoMilestonesNumberHandler sets the operation handler for the get repos owner repo milestones number operation
	GetReposOwnerRepoMilestonesNumberHandler GetReposOwnerRepoMilestonesNumberHandler
	// GetReposOwnerRepoMilestonesNumberLabelsHandler sets the operation handler for the get repos owner repo milestones number labels operation
	GetReposOwnerRepoMilestonesNumberLabelsHandler GetReposOwnerRepoMilestonesNumberLabelsHandler
	// GetReposOwnerRepoNotificationsHandler sets the operation handler for the get repos owner repo notifications operation
	GetReposOwnerRepoNotificationsHandler GetReposOwnerRepoNotificationsHandler
	// GetReposOwnerRepoPullsHandler sets the operation handler for the get repos owner repo pulls operation
	GetReposOwnerRepoPullsHandler GetReposOwnerRepoPullsHandler
	// GetReposOwnerRepoPullsCommentsHandler sets the operation handler for the get repos owner repo pulls comments operation
	GetReposOwnerRepoPullsCommentsHandler GetReposOwnerRepoPullsCommentsHandler
	// GetReposOwnerRepoPullsCommentsCommentIDHandler sets the operation handler for the get repos owner repo pulls comments comment ID operation
	GetReposOwnerRepoPullsCommentsCommentIDHandler GetReposOwnerRepoPullsCommentsCommentIDHandler
	// GetReposOwnerRepoPullsNumberHandler sets the operation handler for the get repos owner repo pulls number operation
	GetReposOwnerRepoPullsNumberHandler GetReposOwnerRepoPullsNumberHandler
	// GetReposOwnerRepoPullsNumberCommentsHandler sets the operation handler for the get repos owner repo pulls number comments operation
	GetReposOwnerRepoPullsNumberCommentsHandler GetReposOwnerRepoPullsNumberCommentsHandler
	// GetReposOwnerRepoPullsNumberCommitsHandler sets the operation handler for the get repos owner repo pulls number commits operation
	GetReposOwnerRepoPullsNumberCommitsHandler GetReposOwnerRepoPullsNumberCommitsHandler
	// GetReposOwnerRepoPullsNumberFilesHandler sets the operation handler for the get repos owner repo pulls number files operation
	GetReposOwnerRepoPullsNumberFilesHandler GetReposOwnerRepoPullsNumberFilesHandler
	// GetReposOwnerRepoPullsNumberMergeHandler sets the operation handler for the get repos owner repo pulls number merge operation
	GetReposOwnerRepoPullsNumberMergeHandler GetReposOwnerRepoPullsNumberMergeHandler
	// GetReposOwnerRepoReadmeHandler sets the operation handler for the get repos owner repo readme operation
	GetReposOwnerRepoReadmeHandler GetReposOwnerRepoReadmeHandler
	// GetReposOwnerRepoReleasesHandler sets the operation handler for the get repos owner repo releases operation
	GetReposOwnerRepoReleasesHandler GetReposOwnerRepoReleasesHandler
	// GetReposOwnerRepoReleasesAssetsIDHandler sets the operation handler for the get repos owner repo releases assets ID operation
	GetReposOwnerRepoReleasesAssetsIDHandler GetReposOwnerRepoReleasesAssetsIDHandler
	// GetReposOwnerRepoReleasesIDHandler sets the operation handler for the get repos owner repo releases ID operation
	GetReposOwnerRepoReleasesIDHandler GetReposOwnerRepoReleasesIDHandler
	// GetReposOwnerRepoReleasesIDAssetsHandler sets the operation handler for the get repos owner repo releases ID assets operation
	GetReposOwnerRepoReleasesIDAssetsHandler GetReposOwnerRepoReleasesIDAssetsHandler
	// GetReposOwnerRepoStargazersHandler sets the operation handler for the get repos owner repo stargazers operation
	GetReposOwnerRepoStargazersHandler GetReposOwnerRepoStargazersHandler
	// GetReposOwnerRepoStatsCodeFrequencyHandler sets the operation handler for the get repos owner repo stats code frequency operation
	GetReposOwnerRepoStatsCodeFrequencyHandler GetReposOwnerRepoStatsCodeFrequencyHandler
	// GetReposOwnerRepoStatsCommitActivityHandler sets the operation handler for the get repos owner repo stats commit activity operation
	GetReposOwnerRepoStatsCommitActivityHandler GetReposOwnerRepoStatsCommitActivityHandler
	// GetReposOwnerRepoStatsContributorsHandler sets the operation handler for the get repos owner repo stats contributors operation
	GetReposOwnerRepoStatsContributorsHandler GetReposOwnerRepoStatsContributorsHandler
	// GetReposOwnerRepoStatsParticipationHandler sets the operation handler for the get repos owner repo stats participation operation
	GetReposOwnerRepoStatsParticipationHandler GetReposOwnerRepoStatsParticipationHandler
	// GetReposOwnerRepoStatsPunchCardHandler sets the operation handler for the get repos owner repo stats punch card operation
	GetReposOwnerRepoStatsPunchCardHandler GetReposOwnerRepoStatsPunchCardHandler
	// GetReposOwnerRepoStatusesRefHandler sets the operation handler for the get repos owner repo statuses ref operation
	GetReposOwnerRepoStatusesRefHandler GetReposOwnerRepoStatusesRefHandler
	// GetReposOwnerRepoSubscribersHandler sets the operation handler for the get repos owner repo subscribers operation
	GetReposOwnerRepoSubscribersHandler GetReposOwnerRepoSubscribersHandler
	// GetReposOwnerRepoSubscriptionHandler sets the operation handler for the get repos owner repo subscription operation
	GetReposOwnerRepoSubscriptionHandler GetReposOwnerRepoSubscriptionHandler
	// GetReposOwnerRepoTagsHandler sets the operation handler for the get repos owner repo tags operation
	GetReposOwnerRepoTagsHandler GetReposOwnerRepoTagsHandler
	// GetReposOwnerRepoTeamsHandler sets the operation handler for the get repos owner repo teams operation
	GetReposOwnerRepoTeamsHandler GetReposOwnerRepoTeamsHandler
	// GetReposOwnerRepoWatchersHandler sets the operation handler for the get repos owner repo watchers operation
	GetReposOwnerRepoWatchersHandler GetReposOwnerRepoWatchersHandler
	// GetRepositoriesHandler sets the operation handler for the get repositories operation
	GetRepositoriesHandler GetRepositoriesHandler
	// GetSearchCodeHandler sets the operation handler for the get search code operation
	GetSearchCodeHandler GetSearchCodeHandler
	// GetSearchIssuesHandler sets the operation handler for the get search issues operation
	GetSearchIssuesHandler GetSearchIssuesHandler
	// GetSearchRepositoriesHandler sets the operation handler for the get search repositories operation
	GetSearchRepositoriesHandler GetSearchRepositoriesHandler
	// GetSearchUsersHandler sets the operation handler for the get search users operation
	GetSearchUsersHandler GetSearchUsersHandler
	// GetTeamsTeamIDHandler sets the operation handler for the get teams team ID operation
	GetTeamsTeamIDHandler GetTeamsTeamIDHandler
	// GetTeamsTeamIDMembersHandler sets the operation handler for the get teams team ID members operation
	GetTeamsTeamIDMembersHandler GetTeamsTeamIDMembersHandler
	// GetTeamsTeamIDMembersUsernameHandler sets the operation handler for the get teams team ID members username operation
	GetTeamsTeamIDMembersUsernameHandler GetTeamsTeamIDMembersUsernameHandler
	// GetTeamsTeamIDMembershipsUsernameHandler sets the operation handler for the get teams team ID memberships username operation
	GetTeamsTeamIDMembershipsUsernameHandler GetTeamsTeamIDMembershipsUsernameHandler
	// GetTeamsTeamIDReposHandler sets the operation handler for the get teams team ID repos operation
	GetTeamsTeamIDReposHandler GetTeamsTeamIDReposHandler
	// GetTeamsTeamIDReposOwnerRepoHandler sets the operation handler for the get teams team ID repos owner repo operation
	GetTeamsTeamIDReposOwnerRepoHandler GetTeamsTeamIDReposOwnerRepoHandler
	// GetUserHandler sets the operation handler for the get user operation
	GetUserHandler GetUserHandler
	// GetUserEmailsHandler sets the operation handler for the get user emails operation
	GetUserEmailsHandler GetUserEmailsHandler
	// GetUserFollowersHandler sets the operation handler for the get user followers operation
	GetUserFollowersHandler GetUserFollowersHandler
	// GetUserFollowingHandler sets the operation handler for the get user following operation
	GetUserFollowingHandler GetUserFollowingHandler
	// GetUserFollowingUsernameHandler sets the operation handler for the get user following username operation
	GetUserFollowingUsernameHandler GetUserFollowingUsernameHandler
	// GetUserIssuesHandler sets the operation handler for the get user issues operation
	GetUserIssuesHandler GetUserIssuesHandler
	// GetUserKeysHandler sets the operation handler for the get user keys operation
	GetUserKeysHandler GetUserKeysHandler
	// GetUserKeysKeyIDHandler sets the operation handler for the get user keys key ID operation
	GetUserKeysKeyIDHandler GetUserKeysKeyIDHandler
	// GetUserOrgsHandler sets the operation handler for the get user orgs operation
	GetUserOrgsHandler GetUserOrgsHandler
	// GetUserReposHandler sets the operation handler for the get user repos operation
	GetUserReposHandler GetUserReposHandler
	// GetUserStarredHandler sets the operation handler for the get user starred operation
	GetUserStarredHandler GetUserStarredHandler
	// GetUserStarredOwnerRepoHandler sets the operation handler for the get user starred owner repo operation
	GetUserStarredOwnerRepoHandler GetUserStarredOwnerRepoHandler
	// GetUserSubscriptionsHandler sets the operation handler for the get user subscriptions operation
	GetUserSubscriptionsHandler GetUserSubscriptionsHandler
	// GetUserSubscriptionsOwnerRepoHandler sets the operation handler for the get user subscriptions owner repo operation
	GetUserSubscriptionsOwnerRepoHandler GetUserSubscriptionsOwnerRepoHandler
	// GetUserTeamsHandler sets the operation handler for the get user teams operation
	GetUserTeamsHandler GetUserTeamsHandler
	// GetUsersHandler sets the operation handler for the get users operation
	GetUsersHandler GetUsersHandler
	// GetUsersUsernameHandler sets the operation handler for the get users username operation
	GetUsersUsernameHandler GetUsersUsernameHandler
	// GetUsersUsernameEventsHandler sets the operation handler for the get users username events operation
	GetUsersUsernameEventsHandler GetUsersUsernameEventsHandler
	// GetUsersUsernameEventsOrgsOrgHandler sets the operation handler for the get users username events orgs org operation
	GetUsersUsernameEventsOrgsOrgHandler GetUsersUsernameEventsOrgsOrgHandler
	// GetUsersUsernameFollowersHandler sets the operation handler for the get users username followers operation
	GetUsersUsernameFollowersHandler GetUsersUsernameFollowersHandler
	// GetUsersUsernameFollowingTargetUserHandler sets the operation handler for the get users username following target user operation
	GetUsersUsernameFollowingTargetUserHandler GetUsersUsernameFollowingTargetUserHandler
	// GetUsersUsernameGistsHandler sets the operation handler for the get users username gists operation
	GetUsersUsernameGistsHandler GetUsersUsernameGistsHandler
	// GetUsersUsernameKeysHandler sets the operation handler for the get users username keys operation
	GetUsersUsernameKeysHandler GetUsersUsernameKeysHandler
	// GetUsersUsernameOrgsHandler sets the operation handler for the get users username orgs operation
	GetUsersUsernameOrgsHandler GetUsersUsernameOrgsHandler
	// GetUsersUsernameReceivedEventsHandler sets the operation handler for the get users username received events operation
	GetUsersUsernameReceivedEventsHandler GetUsersUsernameReceivedEventsHandler
	// GetUsersUsernameReceivedEventsPublicHandler sets the operation handler for the get users username received events public operation
	GetUsersUsernameReceivedEventsPublicHandler GetUsersUsernameReceivedEventsPublicHandler
	// GetUsersUsernameReposHandler sets the operation handler for the get users username repos operation
	GetUsersUsernameReposHandler GetUsersUsernameReposHandler
	// GetUsersUsernameStarredHandler sets the operation handler for the get users username starred operation
	GetUsersUsernameStarredHandler GetUsersUsernameStarredHandler
	// GetUsersUsernameSubscriptionsHandler sets the operation handler for the get users username subscriptions operation
	GetUsersUsernameSubscriptionsHandler GetUsersUsernameSubscriptionsHandler
	// PatchGistsIDHandler sets the operation handler for the patch gists ID operation
	PatchGistsIDHandler PatchGistsIDHandler
	// PatchGistsIDCommentsCommentIDHandler sets the operation handler for the patch gists ID comments comment ID operation
	PatchGistsIDCommentsCommentIDHandler PatchGistsIDCommentsCommentIDHandler
	// PatchNotificationsThreadsIDHandler sets the operation handler for the patch notifications threads ID operation
	PatchNotificationsThreadsIDHandler PatchNotificationsThreadsIDHandler
	// PatchOrgsOrgHandler sets the operation handler for the patch orgs org operation
	PatchOrgsOrgHandler PatchOrgsOrgHandler
	// PatchReposOwnerRepoHandler sets the operation handler for the patch repos owner repo operation
	PatchReposOwnerRepoHandler PatchReposOwnerRepoHandler
	// PatchReposOwnerRepoCommentsCommentIDHandler sets the operation handler for the patch repos owner repo comments comment ID operation
	PatchReposOwnerRepoCommentsCommentIDHandler PatchReposOwnerRepoCommentsCommentIDHandler
	// PatchReposOwnerRepoGitRefsRefHandler sets the operation handler for the patch repos owner repo git refs ref operation
	PatchReposOwnerRepoGitRefsRefHandler PatchReposOwnerRepoGitRefsRefHandler
	// PatchReposOwnerRepoHooksHookIDHandler sets the operation handler for the patch repos owner repo hooks hook ID operation
	PatchReposOwnerRepoHooksHookIDHandler PatchReposOwnerRepoHooksHookIDHandler
	// PatchReposOwnerRepoIssuesCommentsCommentIDHandler sets the operation handler for the patch repos owner repo issues comments comment ID operation
	PatchReposOwnerRepoIssuesCommentsCommentIDHandler PatchReposOwnerRepoIssuesCommentsCommentIDHandler
	// PatchReposOwnerRepoIssuesNumberHandler sets the operation handler for the patch repos owner repo issues number operation
	PatchReposOwnerRepoIssuesNumberHandler PatchReposOwnerRepoIssuesNumberHandler
	// PatchReposOwnerRepoLabelsNameHandler sets the operation handler for the patch repos owner repo labels name operation
	PatchReposOwnerRepoLabelsNameHandler PatchReposOwnerRepoLabelsNameHandler
	// PatchReposOwnerRepoMilestonesNumberHandler sets the operation handler for the patch repos owner repo milestones number operation
	PatchReposOwnerRepoMilestonesNumberHandler PatchReposOwnerRepoMilestonesNumberHandler
	// PatchReposOwnerRepoPullsCommentsCommentIDHandler sets the operation handler for the patch repos owner repo pulls comments comment ID operation
	PatchReposOwnerRepoPullsCommentsCommentIDHandler PatchReposOwnerRepoPullsCommentsCommentIDHandler
	// PatchReposOwnerRepoPullsNumberHandler sets the operation handler for the patch repos owner repo pulls number operation
	PatchReposOwnerRepoPullsNumberHandler PatchReposOwnerRepoPullsNumberHandler
	// PatchReposOwnerRepoReleasesAssetsIDHandler sets the operation handler for the patch repos owner repo releases assets ID operation
	PatchReposOwnerRepoReleasesAssetsIDHandler PatchReposOwnerRepoReleasesAssetsIDHandler
	// PatchReposOwnerRepoReleasesIDHandler sets the operation handler for the patch repos owner repo releases ID operation
	PatchReposOwnerRepoReleasesIDHandler PatchReposOwnerRepoReleasesIDHandler
	// PatchTeamsTeamIDHandler sets the operation handler for the patch teams team ID operation
	PatchTeamsTeamIDHandler PatchTeamsTeamIDHandler
	// PatchUserHandler sets the operation handler for the patch user operation
	PatchUserHandler PatchUserHandler
	// PostGistsHandler sets the operation handler for the post gists operation
	PostGistsHandler PostGistsHandler
	// PostGistsIDCommentsHandler sets the operation handler for the post gists ID comments operation
	PostGistsIDCommentsHandler PostGistsIDCommentsHandler
	// PostGistsIDForksHandler sets the operation handler for the post gists ID forks operation
	PostGistsIDForksHandler PostGistsIDForksHandler
	// PostMarkdownHandler sets the operation handler for the post markdown operation
	PostMarkdownHandler PostMarkdownHandler
	// PostMarkdownRawHandler sets the operation handler for the post markdown raw operation
	PostMarkdownRawHandler PostMarkdownRawHandler
	// PostOrgsOrgReposHandler sets the operation handler for the post orgs org repos operation
	PostOrgsOrgReposHandler PostOrgsOrgReposHandler
	// PostOrgsOrgTeamsHandler sets the operation handler for the post orgs org teams operation
	PostOrgsOrgTeamsHandler PostOrgsOrgTeamsHandler
	// PostReposOwnerRepoCommitsShaCodeCommentsHandler sets the operation handler for the post repos owner repo commits sha code comments operation
	PostReposOwnerRepoCommitsShaCodeCommentsHandler PostReposOwnerRepoCommitsShaCodeCommentsHandler
	// PostReposOwnerRepoDeploymentsHandler sets the operation handler for the post repos owner repo deployments operation
	PostReposOwnerRepoDeploymentsHandler PostReposOwnerRepoDeploymentsHandler
	// PostReposOwnerRepoDeploymentsIDStatusesHandler sets the operation handler for the post repos owner repo deployments ID statuses operation
	PostReposOwnerRepoDeploymentsIDStatusesHandler PostReposOwnerRepoDeploymentsIDStatusesHandler
	// PostReposOwnerRepoForksHandler sets the operation handler for the post repos owner repo forks operation
	PostReposOwnerRepoForksHandler PostReposOwnerRepoForksHandler
	// PostReposOwnerRepoGitBlobsHandler sets the operation handler for the post repos owner repo git blobs operation
	PostReposOwnerRepoGitBlobsHandler PostReposOwnerRepoGitBlobsHandler
	// PostReposOwnerRepoGitCommitsHandler sets the operation handler for the post repos owner repo git commits operation
	PostReposOwnerRepoGitCommitsHandler PostReposOwnerRepoGitCommitsHandler
	// PostReposOwnerRepoGitRefsHandler sets the operation handler for the post repos owner repo git refs operation
	PostReposOwnerRepoGitRefsHandler PostReposOwnerRepoGitRefsHandler
	// PostReposOwnerRepoGitTagsHandler sets the operation handler for the post repos owner repo git tags operation
	PostReposOwnerRepoGitTagsHandler PostReposOwnerRepoGitTagsHandler
	// PostReposOwnerRepoGitTreesHandler sets the operation handler for the post repos owner repo git trees operation
	PostReposOwnerRepoGitTreesHandler PostReposOwnerRepoGitTreesHandler
	// PostReposOwnerRepoHooksHandler sets the operation handler for the post repos owner repo hooks operation
	PostReposOwnerRepoHooksHandler PostReposOwnerRepoHooksHandler
	// PostReposOwnerRepoHooksHookIDTestsHandler sets the operation handler for the post repos owner repo hooks hook ID tests operation
	PostReposOwnerRepoHooksHookIDTestsHandler PostReposOwnerRepoHooksHookIDTestsHandler
	// PostReposOwnerRepoIssuesHandler sets the operation handler for the post repos owner repo issues operation
	PostReposOwnerRepoIssuesHandler PostReposOwnerRepoIssuesHandler
	// PostReposOwnerRepoIssuesNumberCommentsHandler sets the operation handler for the post repos owner repo issues number comments operation
	PostReposOwnerRepoIssuesNumberCommentsHandler PostReposOwnerRepoIssuesNumberCommentsHandler
	// PostReposOwnerRepoIssuesNumberLabelsHandler sets the operation handler for the post repos owner repo issues number labels operation
	PostReposOwnerRepoIssuesNumberLabelsHandler PostReposOwnerRepoIssuesNumberLabelsHandler
	// PostReposOwnerRepoKeysHandler sets the operation handler for the post repos owner repo keys operation
	PostReposOwnerRepoKeysHandler PostReposOwnerRepoKeysHandler
	// PostReposOwnerRepoLabelsHandler sets the operation handler for the post repos owner repo labels operation
	PostReposOwnerRepoLabelsHandler PostReposOwnerRepoLabelsHandler
	// PostReposOwnerRepoMergesHandler sets the operation handler for the post repos owner repo merges operation
	PostReposOwnerRepoMergesHandler PostReposOwnerRepoMergesHandler
	// PostReposOwnerRepoMilestonesHandler sets the operation handler for the post repos owner repo milestones operation
	PostReposOwnerRepoMilestonesHandler PostReposOwnerRepoMilestonesHandler
	// PostReposOwnerRepoPullsHandler sets the operation handler for the post repos owner repo pulls operation
	PostReposOwnerRepoPullsHandler PostReposOwnerRepoPullsHandler
	// PostReposOwnerRepoPullsNumberCommentsHandler sets the operation handler for the post repos owner repo pulls number comments operation
	PostReposOwnerRepoPullsNumberCommentsHandler PostReposOwnerRepoPullsNumberCommentsHandler
	// PostReposOwnerRepoReleasesHandler sets the operation handler for the post repos owner repo releases operation
	PostReposOwnerRepoReleasesHandler PostReposOwnerRepoReleasesHandler
	// PostReposOwnerRepoStatusesRefHandler sets the operation handler for the post repos owner repo statuses ref operation
	PostReposOwnerRepoStatusesRefHandler PostReposOwnerRepoStatusesRefHandler
	// PostUserEmailsHandler sets the operation handler for the post user emails operation
	PostUserEmailsHandler PostUserEmailsHandler
	// PostUserKeysHandler sets the operation handler for the post user keys operation
	PostUserKeysHandler PostUserKeysHandler
	// PostUserReposHandler sets the operation handler for the post user repos operation
	PostUserReposHandler PostUserReposHandler
	// PutGistsIDStarHandler sets the operation handler for the put gists ID star operation
	PutGistsIDStarHandler PutGistsIDStarHandler
	// PutNotificationsHandler sets the operation handler for the put notifications operation
	PutNotificationsHandler PutNotificationsHandler
	// PutNotificationsThreadsIDSubscriptionHandler sets the operation handler for the put notifications threads ID subscription operation
	PutNotificationsThreadsIDSubscriptionHandler PutNotificationsThreadsIDSubscriptionHandler
	// PutOrgsOrgPublicMembersUsernameHandler sets the operation handler for the put orgs org public members username operation
	PutOrgsOrgPublicMembersUsernameHandler PutOrgsOrgPublicMembersUsernameHandler
	// PutReposOwnerRepoCollaboratorsUserHandler sets the operation handler for the put repos owner repo collaborators user operation
	PutReposOwnerRepoCollaboratorsUserHandler PutReposOwnerRepoCollaboratorsUserHandler
	// PutReposOwnerRepoContentsPathHandler sets the operation handler for the put repos owner repo contents path operation
	PutReposOwnerRepoContentsPathHandler PutReposOwnerRepoContentsPathHandler
	// PutReposOwnerRepoIssuesNumberLabelsHandler sets the operation handler for the put repos owner repo issues number labels operation
	PutReposOwnerRepoIssuesNumberLabelsHandler PutReposOwnerRepoIssuesNumberLabelsHandler
	// PutReposOwnerRepoNotificationsHandler sets the operation handler for the put repos owner repo notifications operation
	PutReposOwnerRepoNotificationsHandler PutReposOwnerRepoNotificationsHandler
	// PutReposOwnerRepoPullsNumberMergeHandler sets the operation handler for the put repos owner repo pulls number merge operation
	PutReposOwnerRepoPullsNumberMergeHandler PutReposOwnerRepoPullsNumberMergeHandler
	// PutReposOwnerRepoSubscriptionHandler sets the operation handler for the put repos owner repo subscription operation
	PutReposOwnerRepoSubscriptionHandler PutReposOwnerRepoSubscriptionHandler
	// PutTeamsTeamIDMembersUsernameHandler sets the operation handler for the put teams team ID members username operation
	PutTeamsTeamIDMembersUsernameHandler PutTeamsTeamIDMembersUsernameHandler
	// PutTeamsTeamIDMembershipsUsernameHandler sets the operation handler for the put teams team ID memberships username operation
	PutTeamsTeamIDMembershipsUsernameHandler PutTeamsTeamIDMembershipsUsernameHandler
	// PutTeamsTeamIDReposOrgRepoHandler sets the operation handler for the put teams team ID repos org repo operation
	PutTeamsTeamIDReposOrgRepoHandler PutTeamsTeamIDReposOrgRepoHandler
	// PutUserFollowingUsernameHandler sets the operation handler for the put user following username operation
	PutUserFollowingUsernameHandler PutUserFollowingUsernameHandler
	// PutUserStarredOwnerRepoHandler sets the operation handler for the put user starred owner repo operation
	PutUserStarredOwnerRepoHandler PutUserStarredOwnerRepoHandler
	// PutUserSubscriptionsOwnerRepoHandler sets the operation handler for the put user subscriptions owner repo operation
	PutUserSubscriptionsOwnerRepoHandler PutUserSubscriptionsOwnerRepoHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *GitapiAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *GitapiAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *GitapiAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *GitapiAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *GitapiAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *GitapiAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *GitapiAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the GitapiAPI
func (o *GitapiAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.TxtConsumer == nil {
		unregistered = append(unregistered, "TxtConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.HTMLProducer == nil {
		unregistered = append(unregistered, "HTMLProducer")
	}

	if o.DeleteGistsIDHandler == nil {
		unregistered = append(unregistered, "DeleteGistsIDHandler")
	}

	if o.DeleteGistsIDCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "DeleteGistsIDCommentsCommentIDHandler")
	}

	if o.DeleteGistsIDStarHandler == nil {
		unregistered = append(unregistered, "DeleteGistsIDStarHandler")
	}

	if o.DeleteNotificationsThreadsIDSubscriptionHandler == nil {
		unregistered = append(unregistered, "DeleteNotificationsThreadsIDSubscriptionHandler")
	}

	if o.DeleteOrgsOrgMembersUsernameHandler == nil {
		unregistered = append(unregistered, "DeleteOrgsOrgMembersUsernameHandler")
	}

	if o.DeleteOrgsOrgPublicMembersUsernameHandler == nil {
		unregistered = append(unregistered, "DeleteOrgsOrgPublicMembersUsernameHandler")
	}

	if o.DeleteReposOwnerRepoHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoHandler")
	}

	if o.DeleteReposOwnerRepoCollaboratorsUserHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoCollaboratorsUserHandler")
	}

	if o.DeleteReposOwnerRepoCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoCommentsCommentIDHandler")
	}

	if o.DeleteReposOwnerRepoContentsPathHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoContentsPathHandler")
	}

	if o.DeleteReposOwnerRepoDownloadsDownloadIDHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoDownloadsDownloadIDHandler")
	}

	if o.DeleteReposOwnerRepoGitRefsRefHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoGitRefsRefHandler")
	}

	if o.DeleteReposOwnerRepoHooksHookIDHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoHooksHookIDHandler")
	}

	if o.DeleteReposOwnerRepoIssuesCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoIssuesCommentsCommentIDHandler")
	}

	if o.DeleteReposOwnerRepoIssuesNumberLabelsHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoIssuesNumberLabelsHandler")
	}

	if o.DeleteReposOwnerRepoIssuesNumberLabelsNameHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoIssuesNumberLabelsNameHandler")
	}

	if o.DeleteReposOwnerRepoKeysKeyIDHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoKeysKeyIDHandler")
	}

	if o.DeleteReposOwnerRepoLabelsNameHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoLabelsNameHandler")
	}

	if o.DeleteReposOwnerRepoMilestonesNumberHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoMilestonesNumberHandler")
	}

	if o.DeleteReposOwnerRepoPullsCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoPullsCommentsCommentIDHandler")
	}

	if o.DeleteReposOwnerRepoReleasesAssetsIDHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoReleasesAssetsIDHandler")
	}

	if o.DeleteReposOwnerRepoReleasesIDHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoReleasesIDHandler")
	}

	if o.DeleteReposOwnerRepoSubscriptionHandler == nil {
		unregistered = append(unregistered, "DeleteReposOwnerRepoSubscriptionHandler")
	}

	if o.DeleteTeamsTeamIDHandler == nil {
		unregistered = append(unregistered, "DeleteTeamsTeamIDHandler")
	}

	if o.DeleteTeamsTeamIDMembersUsernameHandler == nil {
		unregistered = append(unregistered, "DeleteTeamsTeamIDMembersUsernameHandler")
	}

	if o.DeleteTeamsTeamIDMembershipsUsernameHandler == nil {
		unregistered = append(unregistered, "DeleteTeamsTeamIDMembershipsUsernameHandler")
	}

	if o.DeleteTeamsTeamIDReposOwnerRepoHandler == nil {
		unregistered = append(unregistered, "DeleteTeamsTeamIDReposOwnerRepoHandler")
	}

	if o.DeleteUserEmailsHandler == nil {
		unregistered = append(unregistered, "DeleteUserEmailsHandler")
	}

	if o.DeleteUserFollowingUsernameHandler == nil {
		unregistered = append(unregistered, "DeleteUserFollowingUsernameHandler")
	}

	if o.DeleteUserKeysKeyIDHandler == nil {
		unregistered = append(unregistered, "DeleteUserKeysKeyIDHandler")
	}

	if o.DeleteUserStarredOwnerRepoHandler == nil {
		unregistered = append(unregistered, "DeleteUserStarredOwnerRepoHandler")
	}

	if o.DeleteUserSubscriptionsOwnerRepoHandler == nil {
		unregistered = append(unregistered, "DeleteUserSubscriptionsOwnerRepoHandler")
	}

	if o.GetEmojisHandler == nil {
		unregistered = append(unregistered, "GetEmojisHandler")
	}

	if o.GetEventsHandler == nil {
		unregistered = append(unregistered, "GetEventsHandler")
	}

	if o.GetFeedsHandler == nil {
		unregistered = append(unregistered, "GetFeedsHandler")
	}

	if o.GetGistsHandler == nil {
		unregistered = append(unregistered, "GetGistsHandler")
	}

	if o.GetGistsIDHandler == nil {
		unregistered = append(unregistered, "GetGistsIDHandler")
	}

	if o.GetGistsIDCommentsHandler == nil {
		unregistered = append(unregistered, "GetGistsIDCommentsHandler")
	}

	if o.GetGistsIDCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "GetGistsIDCommentsCommentIDHandler")
	}

	if o.GetGistsIDStarHandler == nil {
		unregistered = append(unregistered, "GetGistsIDStarHandler")
	}

	if o.GetGistsPublicHandler == nil {
		unregistered = append(unregistered, "GetGistsPublicHandler")
	}

	if o.GetGistsStarredHandler == nil {
		unregistered = append(unregistered, "GetGistsStarredHandler")
	}

	if o.GetGitignoreTemplatesHandler == nil {
		unregistered = append(unregistered, "GetGitignoreTemplatesHandler")
	}

	if o.GetGitignoreTemplatesLanguageHandler == nil {
		unregistered = append(unregistered, "GetGitignoreTemplatesLanguageHandler")
	}

	if o.GetIssuesHandler == nil {
		unregistered = append(unregistered, "GetIssuesHandler")
	}

	if o.GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandler == nil {
		unregistered = append(unregistered, "GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandler")
	}

	if o.GetLegacyReposSearchKeywordHandler == nil {
		unregistered = append(unregistered, "GetLegacyReposSearchKeywordHandler")
	}

	if o.GetLegacyUserEmailEmailHandler == nil {
		unregistered = append(unregistered, "GetLegacyUserEmailEmailHandler")
	}

	if o.GetLegacyUserSearchKeywordHandler == nil {
		unregistered = append(unregistered, "GetLegacyUserSearchKeywordHandler")
	}

	if o.GetMetaHandler == nil {
		unregistered = append(unregistered, "GetMetaHandler")
	}

	if o.GetNetworksOwnerRepoEventsHandler == nil {
		unregistered = append(unregistered, "GetNetworksOwnerRepoEventsHandler")
	}

	if o.GetNotificationsHandler == nil {
		unregistered = append(unregistered, "GetNotificationsHandler")
	}

	if o.GetNotificationsThreadsIDHandler == nil {
		unregistered = append(unregistered, "GetNotificationsThreadsIDHandler")
	}

	if o.GetNotificationsThreadsIDSubscriptionHandler == nil {
		unregistered = append(unregistered, "GetNotificationsThreadsIDSubscriptionHandler")
	}

	if o.GetOrgsOrgHandler == nil {
		unregistered = append(unregistered, "GetOrgsOrgHandler")
	}

	if o.GetOrgsOrgEventsHandler == nil {
		unregistered = append(unregistered, "GetOrgsOrgEventsHandler")
	}

	if o.GetOrgsOrgIssuesHandler == nil {
		unregistered = append(unregistered, "GetOrgsOrgIssuesHandler")
	}

	if o.GetOrgsOrgMembersHandler == nil {
		unregistered = append(unregistered, "GetOrgsOrgMembersHandler")
	}

	if o.GetOrgsOrgMembersUsernameHandler == nil {
		unregistered = append(unregistered, "GetOrgsOrgMembersUsernameHandler")
	}

	if o.GetOrgsOrgPublicMembersHandler == nil {
		unregistered = append(unregistered, "GetOrgsOrgPublicMembersHandler")
	}

	if o.GetOrgsOrgPublicMembersUsernameHandler == nil {
		unregistered = append(unregistered, "GetOrgsOrgPublicMembersUsernameHandler")
	}

	if o.GetOrgsOrgReposHandler == nil {
		unregistered = append(unregistered, "GetOrgsOrgReposHandler")
	}

	if o.GetOrgsOrgTeamsHandler == nil {
		unregistered = append(unregistered, "GetOrgsOrgTeamsHandler")
	}

	if o.GetRateLimitHandler == nil {
		unregistered = append(unregistered, "GetRateLimitHandler")
	}

	if o.GetReposOwnerRepoHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoHandler")
	}

	if o.GetReposOwnerRepoArchiveFormatPathHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoArchiveFormatPathHandler")
	}

	if o.GetReposOwnerRepoAssigneesHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoAssigneesHandler")
	}

	if o.GetReposOwnerRepoAssigneesAssigneeHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoAssigneesAssigneeHandler")
	}

	if o.GetReposOwnerRepoBranchesHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoBranchesHandler")
	}

	if o.GetReposOwnerRepoBranchesBranchHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoBranchesBranchHandler")
	}

	if o.GetReposOwnerRepoCollaboratorsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoCollaboratorsHandler")
	}

	if o.GetReposOwnerRepoCollaboratorsUserHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoCollaboratorsUserHandler")
	}

	if o.GetReposOwnerRepoCommentsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoCommentsHandler")
	}

	if o.GetReposOwnerRepoCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoCommentsCommentIDHandler")
	}

	if o.GetReposOwnerRepoCommitsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoCommitsHandler")
	}

	if o.GetReposOwnerRepoCommitsRefStatusHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoCommitsRefStatusHandler")
	}

	if o.GetReposOwnerRepoCommitsShaCodeHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoCommitsShaCodeHandler")
	}

	if o.GetReposOwnerRepoCommitsShaCodeCommentsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoCommitsShaCodeCommentsHandler")
	}

	if o.GetReposOwnerRepoCompareBaseIDHeadIDHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoCompareBaseIDHeadIDHandler")
	}

	if o.GetReposOwnerRepoContentsPathHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoContentsPathHandler")
	}

	if o.GetReposOwnerRepoContributorsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoContributorsHandler")
	}

	if o.GetReposOwnerRepoDeploymentsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoDeploymentsHandler")
	}

	if o.GetReposOwnerRepoDeploymentsIDStatusesHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoDeploymentsIDStatusesHandler")
	}

	if o.GetReposOwnerRepoDownloadsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoDownloadsHandler")
	}

	if o.GetReposOwnerRepoDownloadsDownloadIDHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoDownloadsDownloadIDHandler")
	}

	if o.GetReposOwnerRepoEventsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoEventsHandler")
	}

	if o.GetReposOwnerRepoForksHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoForksHandler")
	}

	if o.GetReposOwnerRepoGitBlobsShaCodeHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoGitBlobsShaCodeHandler")
	}

	if o.GetReposOwnerRepoGitCommitsShaCodeHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoGitCommitsShaCodeHandler")
	}

	if o.GetReposOwnerRepoGitRefsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoGitRefsHandler")
	}

	if o.GetReposOwnerRepoGitRefsRefHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoGitRefsRefHandler")
	}

	if o.GetReposOwnerRepoGitTagsShaCodeHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoGitTagsShaCodeHandler")
	}

	if o.GetReposOwnerRepoGitTreesShaCodeHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoGitTreesShaCodeHandler")
	}

	if o.GetReposOwnerRepoHooksHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoHooksHandler")
	}

	if o.GetReposOwnerRepoHooksHookIDHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoHooksHookIDHandler")
	}

	if o.GetReposOwnerRepoIssuesHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoIssuesHandler")
	}

	if o.GetReposOwnerRepoIssuesCommentsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoIssuesCommentsHandler")
	}

	if o.GetReposOwnerRepoIssuesCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoIssuesCommentsCommentIDHandler")
	}

	if o.GetReposOwnerRepoIssuesEventsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoIssuesEventsHandler")
	}

	if o.GetReposOwnerRepoIssuesEventsEventIDHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoIssuesEventsEventIDHandler")
	}

	if o.GetReposOwnerRepoIssuesNumberHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoIssuesNumberHandler")
	}

	if o.GetReposOwnerRepoIssuesNumberCommentsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoIssuesNumberCommentsHandler")
	}

	if o.GetReposOwnerRepoIssuesNumberEventsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoIssuesNumberEventsHandler")
	}

	if o.GetReposOwnerRepoIssuesNumberLabelsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoIssuesNumberLabelsHandler")
	}

	if o.GetReposOwnerRepoKeysHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoKeysHandler")
	}

	if o.GetReposOwnerRepoKeysKeyIDHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoKeysKeyIDHandler")
	}

	if o.GetReposOwnerRepoLabelsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoLabelsHandler")
	}

	if o.GetReposOwnerRepoLabelsNameHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoLabelsNameHandler")
	}

	if o.GetReposOwnerRepoLanguagesHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoLanguagesHandler")
	}

	if o.GetReposOwnerRepoMilestonesHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoMilestonesHandler")
	}

	if o.GetReposOwnerRepoMilestonesNumberHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoMilestonesNumberHandler")
	}

	if o.GetReposOwnerRepoMilestonesNumberLabelsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoMilestonesNumberLabelsHandler")
	}

	if o.GetReposOwnerRepoNotificationsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoNotificationsHandler")
	}

	if o.GetReposOwnerRepoPullsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoPullsHandler")
	}

	if o.GetReposOwnerRepoPullsCommentsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoPullsCommentsHandler")
	}

	if o.GetReposOwnerRepoPullsCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoPullsCommentsCommentIDHandler")
	}

	if o.GetReposOwnerRepoPullsNumberHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoPullsNumberHandler")
	}

	if o.GetReposOwnerRepoPullsNumberCommentsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoPullsNumberCommentsHandler")
	}

	if o.GetReposOwnerRepoPullsNumberCommitsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoPullsNumberCommitsHandler")
	}

	if o.GetReposOwnerRepoPullsNumberFilesHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoPullsNumberFilesHandler")
	}

	if o.GetReposOwnerRepoPullsNumberMergeHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoPullsNumberMergeHandler")
	}

	if o.GetReposOwnerRepoReadmeHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoReadmeHandler")
	}

	if o.GetReposOwnerRepoReleasesHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoReleasesHandler")
	}

	if o.GetReposOwnerRepoReleasesAssetsIDHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoReleasesAssetsIDHandler")
	}

	if o.GetReposOwnerRepoReleasesIDHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoReleasesIDHandler")
	}

	if o.GetReposOwnerRepoReleasesIDAssetsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoReleasesIDAssetsHandler")
	}

	if o.GetReposOwnerRepoStargazersHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoStargazersHandler")
	}

	if o.GetReposOwnerRepoStatsCodeFrequencyHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoStatsCodeFrequencyHandler")
	}

	if o.GetReposOwnerRepoStatsCommitActivityHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoStatsCommitActivityHandler")
	}

	if o.GetReposOwnerRepoStatsContributorsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoStatsContributorsHandler")
	}

	if o.GetReposOwnerRepoStatsParticipationHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoStatsParticipationHandler")
	}

	if o.GetReposOwnerRepoStatsPunchCardHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoStatsPunchCardHandler")
	}

	if o.GetReposOwnerRepoStatusesRefHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoStatusesRefHandler")
	}

	if o.GetReposOwnerRepoSubscribersHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoSubscribersHandler")
	}

	if o.GetReposOwnerRepoSubscriptionHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoSubscriptionHandler")
	}

	if o.GetReposOwnerRepoTagsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoTagsHandler")
	}

	if o.GetReposOwnerRepoTeamsHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoTeamsHandler")
	}

	if o.GetReposOwnerRepoWatchersHandler == nil {
		unregistered = append(unregistered, "GetReposOwnerRepoWatchersHandler")
	}

	if o.GetRepositoriesHandler == nil {
		unregistered = append(unregistered, "GetRepositoriesHandler")
	}

	if o.GetSearchCodeHandler == nil {
		unregistered = append(unregistered, "GetSearchCodeHandler")
	}

	if o.GetSearchIssuesHandler == nil {
		unregistered = append(unregistered, "GetSearchIssuesHandler")
	}

	if o.GetSearchRepositoriesHandler == nil {
		unregistered = append(unregistered, "GetSearchRepositoriesHandler")
	}

	if o.GetSearchUsersHandler == nil {
		unregistered = append(unregistered, "GetSearchUsersHandler")
	}

	if o.GetTeamsTeamIDHandler == nil {
		unregistered = append(unregistered, "GetTeamsTeamIDHandler")
	}

	if o.GetTeamsTeamIDMembersHandler == nil {
		unregistered = append(unregistered, "GetTeamsTeamIDMembersHandler")
	}

	if o.GetTeamsTeamIDMembersUsernameHandler == nil {
		unregistered = append(unregistered, "GetTeamsTeamIDMembersUsernameHandler")
	}

	if o.GetTeamsTeamIDMembershipsUsernameHandler == nil {
		unregistered = append(unregistered, "GetTeamsTeamIDMembershipsUsernameHandler")
	}

	if o.GetTeamsTeamIDReposHandler == nil {
		unregistered = append(unregistered, "GetTeamsTeamIDReposHandler")
	}

	if o.GetTeamsTeamIDReposOwnerRepoHandler == nil {
		unregistered = append(unregistered, "GetTeamsTeamIDReposOwnerRepoHandler")
	}

	if o.GetUserHandler == nil {
		unregistered = append(unregistered, "GetUserHandler")
	}

	if o.GetUserEmailsHandler == nil {
		unregistered = append(unregistered, "GetUserEmailsHandler")
	}

	if o.GetUserFollowersHandler == nil {
		unregistered = append(unregistered, "GetUserFollowersHandler")
	}

	if o.GetUserFollowingHandler == nil {
		unregistered = append(unregistered, "GetUserFollowingHandler")
	}

	if o.GetUserFollowingUsernameHandler == nil {
		unregistered = append(unregistered, "GetUserFollowingUsernameHandler")
	}

	if o.GetUserIssuesHandler == nil {
		unregistered = append(unregistered, "GetUserIssuesHandler")
	}

	if o.GetUserKeysHandler == nil {
		unregistered = append(unregistered, "GetUserKeysHandler")
	}

	if o.GetUserKeysKeyIDHandler == nil {
		unregistered = append(unregistered, "GetUserKeysKeyIDHandler")
	}

	if o.GetUserOrgsHandler == nil {
		unregistered = append(unregistered, "GetUserOrgsHandler")
	}

	if o.GetUserReposHandler == nil {
		unregistered = append(unregistered, "GetUserReposHandler")
	}

	if o.GetUserStarredHandler == nil {
		unregistered = append(unregistered, "GetUserStarredHandler")
	}

	if o.GetUserStarredOwnerRepoHandler == nil {
		unregistered = append(unregistered, "GetUserStarredOwnerRepoHandler")
	}

	if o.GetUserSubscriptionsHandler == nil {
		unregistered = append(unregistered, "GetUserSubscriptionsHandler")
	}

	if o.GetUserSubscriptionsOwnerRepoHandler == nil {
		unregistered = append(unregistered, "GetUserSubscriptionsOwnerRepoHandler")
	}

	if o.GetUserTeamsHandler == nil {
		unregistered = append(unregistered, "GetUserTeamsHandler")
	}

	if o.GetUsersHandler == nil {
		unregistered = append(unregistered, "GetUsersHandler")
	}

	if o.GetUsersUsernameHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameHandler")
	}

	if o.GetUsersUsernameEventsHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameEventsHandler")
	}

	if o.GetUsersUsernameEventsOrgsOrgHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameEventsOrgsOrgHandler")
	}

	if o.GetUsersUsernameFollowersHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameFollowersHandler")
	}

	if o.GetUsersUsernameFollowingTargetUserHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameFollowingTargetUserHandler")
	}

	if o.GetUsersUsernameGistsHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameGistsHandler")
	}

	if o.GetUsersUsernameKeysHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameKeysHandler")
	}

	if o.GetUsersUsernameOrgsHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameOrgsHandler")
	}

	if o.GetUsersUsernameReceivedEventsHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameReceivedEventsHandler")
	}

	if o.GetUsersUsernameReceivedEventsPublicHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameReceivedEventsPublicHandler")
	}

	if o.GetUsersUsernameReposHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameReposHandler")
	}

	if o.GetUsersUsernameStarredHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameStarredHandler")
	}

	if o.GetUsersUsernameSubscriptionsHandler == nil {
		unregistered = append(unregistered, "GetUsersUsernameSubscriptionsHandler")
	}

	if o.PatchGistsIDHandler == nil {
		unregistered = append(unregistered, "PatchGistsIDHandler")
	}

	if o.PatchGistsIDCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "PatchGistsIDCommentsCommentIDHandler")
	}

	if o.PatchNotificationsThreadsIDHandler == nil {
		unregistered = append(unregistered, "PatchNotificationsThreadsIDHandler")
	}

	if o.PatchOrgsOrgHandler == nil {
		unregistered = append(unregistered, "PatchOrgsOrgHandler")
	}

	if o.PatchReposOwnerRepoHandler == nil {
		unregistered = append(unregistered, "PatchReposOwnerRepoHandler")
	}

	if o.PatchReposOwnerRepoCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "PatchReposOwnerRepoCommentsCommentIDHandler")
	}

	if o.PatchReposOwnerRepoGitRefsRefHandler == nil {
		unregistered = append(unregistered, "PatchReposOwnerRepoGitRefsRefHandler")
	}

	if o.PatchReposOwnerRepoHooksHookIDHandler == nil {
		unregistered = append(unregistered, "PatchReposOwnerRepoHooksHookIDHandler")
	}

	if o.PatchReposOwnerRepoIssuesCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "PatchReposOwnerRepoIssuesCommentsCommentIDHandler")
	}

	if o.PatchReposOwnerRepoIssuesNumberHandler == nil {
		unregistered = append(unregistered, "PatchReposOwnerRepoIssuesNumberHandler")
	}

	if o.PatchReposOwnerRepoLabelsNameHandler == nil {
		unregistered = append(unregistered, "PatchReposOwnerRepoLabelsNameHandler")
	}

	if o.PatchReposOwnerRepoMilestonesNumberHandler == nil {
		unregistered = append(unregistered, "PatchReposOwnerRepoMilestonesNumberHandler")
	}

	if o.PatchReposOwnerRepoPullsCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "PatchReposOwnerRepoPullsCommentsCommentIDHandler")
	}

	if o.PatchReposOwnerRepoPullsNumberHandler == nil {
		unregistered = append(unregistered, "PatchReposOwnerRepoPullsNumberHandler")
	}

	if o.PatchReposOwnerRepoReleasesAssetsIDHandler == nil {
		unregistered = append(unregistered, "PatchReposOwnerRepoReleasesAssetsIDHandler")
	}

	if o.PatchReposOwnerRepoReleasesIDHandler == nil {
		unregistered = append(unregistered, "PatchReposOwnerRepoReleasesIDHandler")
	}

	if o.PatchTeamsTeamIDHandler == nil {
		unregistered = append(unregistered, "PatchTeamsTeamIDHandler")
	}

	if o.PatchUserHandler == nil {
		unregistered = append(unregistered, "PatchUserHandler")
	}

	if o.PostGistsHandler == nil {
		unregistered = append(unregistered, "PostGistsHandler")
	}

	if o.PostGistsIDCommentsHandler == nil {
		unregistered = append(unregistered, "PostGistsIDCommentsHandler")
	}

	if o.PostGistsIDForksHandler == nil {
		unregistered = append(unregistered, "PostGistsIDForksHandler")
	}

	if o.PostMarkdownHandler == nil {
		unregistered = append(unregistered, "PostMarkdownHandler")
	}

	if o.PostMarkdownRawHandler == nil {
		unregistered = append(unregistered, "PostMarkdownRawHandler")
	}

	if o.PostOrgsOrgReposHandler == nil {
		unregistered = append(unregistered, "PostOrgsOrgReposHandler")
	}

	if o.PostOrgsOrgTeamsHandler == nil {
		unregistered = append(unregistered, "PostOrgsOrgTeamsHandler")
	}

	if o.PostReposOwnerRepoCommitsShaCodeCommentsHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoCommitsShaCodeCommentsHandler")
	}

	if o.PostReposOwnerRepoDeploymentsHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoDeploymentsHandler")
	}

	if o.PostReposOwnerRepoDeploymentsIDStatusesHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoDeploymentsIDStatusesHandler")
	}

	if o.PostReposOwnerRepoForksHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoForksHandler")
	}

	if o.PostReposOwnerRepoGitBlobsHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoGitBlobsHandler")
	}

	if o.PostReposOwnerRepoGitCommitsHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoGitCommitsHandler")
	}

	if o.PostReposOwnerRepoGitRefsHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoGitRefsHandler")
	}

	if o.PostReposOwnerRepoGitTagsHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoGitTagsHandler")
	}

	if o.PostReposOwnerRepoGitTreesHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoGitTreesHandler")
	}

	if o.PostReposOwnerRepoHooksHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoHooksHandler")
	}

	if o.PostReposOwnerRepoHooksHookIDTestsHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoHooksHookIDTestsHandler")
	}

	if o.PostReposOwnerRepoIssuesHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoIssuesHandler")
	}

	if o.PostReposOwnerRepoIssuesNumberCommentsHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoIssuesNumberCommentsHandler")
	}

	if o.PostReposOwnerRepoIssuesNumberLabelsHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoIssuesNumberLabelsHandler")
	}

	if o.PostReposOwnerRepoKeysHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoKeysHandler")
	}

	if o.PostReposOwnerRepoLabelsHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoLabelsHandler")
	}

	if o.PostReposOwnerRepoMergesHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoMergesHandler")
	}

	if o.PostReposOwnerRepoMilestonesHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoMilestonesHandler")
	}

	if o.PostReposOwnerRepoPullsHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoPullsHandler")
	}

	if o.PostReposOwnerRepoPullsNumberCommentsHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoPullsNumberCommentsHandler")
	}

	if o.PostReposOwnerRepoReleasesHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoReleasesHandler")
	}

	if o.PostReposOwnerRepoStatusesRefHandler == nil {
		unregistered = append(unregistered, "PostReposOwnerRepoStatusesRefHandler")
	}

	if o.PostUserEmailsHandler == nil {
		unregistered = append(unregistered, "PostUserEmailsHandler")
	}

	if o.PostUserKeysHandler == nil {
		unregistered = append(unregistered, "PostUserKeysHandler")
	}

	if o.PostUserReposHandler == nil {
		unregistered = append(unregistered, "PostUserReposHandler")
	}

	if o.PutGistsIDStarHandler == nil {
		unregistered = append(unregistered, "PutGistsIDStarHandler")
	}

	if o.PutNotificationsHandler == nil {
		unregistered = append(unregistered, "PutNotificationsHandler")
	}

	if o.PutNotificationsThreadsIDSubscriptionHandler == nil {
		unregistered = append(unregistered, "PutNotificationsThreadsIDSubscriptionHandler")
	}

	if o.PutOrgsOrgPublicMembersUsernameHandler == nil {
		unregistered = append(unregistered, "PutOrgsOrgPublicMembersUsernameHandler")
	}

	if o.PutReposOwnerRepoCollaboratorsUserHandler == nil {
		unregistered = append(unregistered, "PutReposOwnerRepoCollaboratorsUserHandler")
	}

	if o.PutReposOwnerRepoContentsPathHandler == nil {
		unregistered = append(unregistered, "PutReposOwnerRepoContentsPathHandler")
	}

	if o.PutReposOwnerRepoIssuesNumberLabelsHandler == nil {
		unregistered = append(unregistered, "PutReposOwnerRepoIssuesNumberLabelsHandler")
	}

	if o.PutReposOwnerRepoNotificationsHandler == nil {
		unregistered = append(unregistered, "PutReposOwnerRepoNotificationsHandler")
	}

	if o.PutReposOwnerRepoPullsNumberMergeHandler == nil {
		unregistered = append(unregistered, "PutReposOwnerRepoPullsNumberMergeHandler")
	}

	if o.PutReposOwnerRepoSubscriptionHandler == nil {
		unregistered = append(unregistered, "PutReposOwnerRepoSubscriptionHandler")
	}

	if o.PutTeamsTeamIDMembersUsernameHandler == nil {
		unregistered = append(unregistered, "PutTeamsTeamIDMembersUsernameHandler")
	}

	if o.PutTeamsTeamIDMembershipsUsernameHandler == nil {
		unregistered = append(unregistered, "PutTeamsTeamIDMembershipsUsernameHandler")
	}

	if o.PutTeamsTeamIDReposOrgRepoHandler == nil {
		unregistered = append(unregistered, "PutTeamsTeamIDReposOrgRepoHandler")
	}

	if o.PutUserFollowingUsernameHandler == nil {
		unregistered = append(unregistered, "PutUserFollowingUsernameHandler")
	}

	if o.PutUserStarredOwnerRepoHandler == nil {
		unregistered = append(unregistered, "PutUserStarredOwnerRepoHandler")
	}

	if o.PutUserSubscriptionsOwnerRepoHandler == nil {
		unregistered = append(unregistered, "PutUserSubscriptionsOwnerRepoHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *GitapiAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *GitapiAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *GitapiAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *GitapiAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "text/plain":
			result["text/plain"] = o.TxtConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *GitapiAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "text/html":
			result["text/html"] = o.HTMLProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *GitapiAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the gitapi API
func (o *GitapiAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *GitapiAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/gists/{id}"] = NewDeleteGistsID(o.context, o.DeleteGistsIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/gists/{id}/comments/{commentId}"] = NewDeleteGistsIDCommentsCommentID(o.context, o.DeleteGistsIDCommentsCommentIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/gists/{id}/star"] = NewDeleteGistsIDStar(o.context, o.DeleteGistsIDStarHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/notifications/threads/{id}/subscription"] = NewDeleteNotificationsThreadsIDSubscription(o.context, o.DeleteNotificationsThreadsIDSubscriptionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/orgs/{org}/members/{username}"] = NewDeleteOrgsOrgMembersUsername(o.context, o.DeleteOrgsOrgMembersUsernameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/orgs/{org}/public_members/{username}"] = NewDeleteOrgsOrgPublicMembersUsername(o.context, o.DeleteOrgsOrgPublicMembersUsernameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}"] = NewDeleteReposOwnerRepo(o.context, o.DeleteReposOwnerRepoHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/collaborators/{user}"] = NewDeleteReposOwnerRepoCollaboratorsUser(o.context, o.DeleteReposOwnerRepoCollaboratorsUserHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/comments/{commentId}"] = NewDeleteReposOwnerRepoCommentsCommentID(o.context, o.DeleteReposOwnerRepoCommentsCommentIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/contents/{path}"] = NewDeleteReposOwnerRepoContentsPath(o.context, o.DeleteReposOwnerRepoContentsPathHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/downloads/{downloadId}"] = NewDeleteReposOwnerRepoDownloadsDownloadID(o.context, o.DeleteReposOwnerRepoDownloadsDownloadIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/git/refs/{ref}"] = NewDeleteReposOwnerRepoGitRefsRef(o.context, o.DeleteReposOwnerRepoGitRefsRefHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/hooks/{hookId}"] = NewDeleteReposOwnerRepoHooksHookID(o.context, o.DeleteReposOwnerRepoHooksHookIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/issues/comments/{commentId}"] = NewDeleteReposOwnerRepoIssuesCommentsCommentID(o.context, o.DeleteReposOwnerRepoIssuesCommentsCommentIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/issues/{number}/labels"] = NewDeleteReposOwnerRepoIssuesNumberLabels(o.context, o.DeleteReposOwnerRepoIssuesNumberLabelsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/issues/{number}/labels/{name}"] = NewDeleteReposOwnerRepoIssuesNumberLabelsName(o.context, o.DeleteReposOwnerRepoIssuesNumberLabelsNameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/keys/{keyId}"] = NewDeleteReposOwnerRepoKeysKeyID(o.context, o.DeleteReposOwnerRepoKeysKeyIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/labels/{name}"] = NewDeleteReposOwnerRepoLabelsName(o.context, o.DeleteReposOwnerRepoLabelsNameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/milestones/{number}"] = NewDeleteReposOwnerRepoMilestonesNumber(o.context, o.DeleteReposOwnerRepoMilestonesNumberHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/pulls/comments/{commentId}"] = NewDeleteReposOwnerRepoPullsCommentsCommentID(o.context, o.DeleteReposOwnerRepoPullsCommentsCommentIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/releases/assets/{id}"] = NewDeleteReposOwnerRepoReleasesAssetsID(o.context, o.DeleteReposOwnerRepoReleasesAssetsIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/releases/{id}"] = NewDeleteReposOwnerRepoReleasesID(o.context, o.DeleteReposOwnerRepoReleasesIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/repos/{owner}/{repo}/subscription"] = NewDeleteReposOwnerRepoSubscription(o.context, o.DeleteReposOwnerRepoSubscriptionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamId}"] = NewDeleteTeamsTeamID(o.context, o.DeleteTeamsTeamIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamId}/members/{username}"] = NewDeleteTeamsTeamIDMembersUsername(o.context, o.DeleteTeamsTeamIDMembersUsernameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamId}/memberships/{username}"] = NewDeleteTeamsTeamIDMembershipsUsername(o.context, o.DeleteTeamsTeamIDMembershipsUsernameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamId}/repos/{owner}/{repo}"] = NewDeleteTeamsTeamIDReposOwnerRepo(o.context, o.DeleteTeamsTeamIDReposOwnerRepoHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/emails"] = NewDeleteUserEmails(o.context, o.DeleteUserEmailsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/following/{username}"] = NewDeleteUserFollowingUsername(o.context, o.DeleteUserFollowingUsernameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/keys/{keyId}"] = NewDeleteUserKeysKeyID(o.context, o.DeleteUserKeysKeyIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/starred/{owner}/{repo}"] = NewDeleteUserStarredOwnerRepo(o.context, o.DeleteUserStarredOwnerRepoHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/subscriptions/{owner}/{repo}"] = NewDeleteUserSubscriptionsOwnerRepo(o.context, o.DeleteUserSubscriptionsOwnerRepoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/emojis"] = NewGetEmojis(o.context, o.GetEmojisHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events"] = NewGetEvents(o.context, o.GetEventsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/feeds"] = NewGetFeeds(o.context, o.GetFeedsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/gists"] = NewGetGists(o.context, o.GetGistsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/gists/{id}"] = NewGetGistsID(o.context, o.GetGistsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/gists/{id}/comments"] = NewGetGistsIDComments(o.context, o.GetGistsIDCommentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/gists/{id}/comments/{commentId}"] = NewGetGistsIDCommentsCommentID(o.context, o.GetGistsIDCommentsCommentIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/gists/{id}/star"] = NewGetGistsIDStar(o.context, o.GetGistsIDStarHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/gists/public"] = NewGetGistsPublic(o.context, o.GetGistsPublicHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/gists/starred"] = NewGetGistsStarred(o.context, o.GetGistsStarredHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/gitignore/templates"] = NewGetGitignoreTemplates(o.context, o.GetGitignoreTemplatesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/gitignore/templates/{language}"] = NewGetGitignoreTemplatesLanguage(o.context, o.GetGitignoreTemplatesLanguageHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/issues"] = NewGetIssues(o.context, o.GetIssuesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/legacy/issues/search/{owner}/{repository}/{state}/{keyword}"] = NewGetLegacyIssuesSearchOwnerRepositoryStateKeyword(o.context, o.GetLegacyIssuesSearchOwnerRepositoryStateKeywordHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/legacy/repos/search/{keyword}"] = NewGetLegacyReposSearchKeyword(o.context, o.GetLegacyReposSearchKeywordHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/legacy/user/email/{email}"] = NewGetLegacyUserEmailEmail(o.context, o.GetLegacyUserEmailEmailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/legacy/user/search/{keyword}"] = NewGetLegacyUserSearchKeyword(o.context, o.GetLegacyUserSearchKeywordHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/meta"] = NewGetMeta(o.context, o.GetMetaHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networks/{owner}/{repo}/events"] = NewGetNetworksOwnerRepoEvents(o.context, o.GetNetworksOwnerRepoEventsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/notifications"] = NewGetNotifications(o.context, o.GetNotificationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/notifications/threads/{id}"] = NewGetNotificationsThreadsID(o.context, o.GetNotificationsThreadsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/notifications/threads/{id}/subscription"] = NewGetNotificationsThreadsIDSubscription(o.context, o.GetNotificationsThreadsIDSubscriptionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{org}"] = NewGetOrgsOrg(o.context, o.GetOrgsOrgHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{org}/events"] = NewGetOrgsOrgEvents(o.context, o.GetOrgsOrgEventsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{org}/issues"] = NewGetOrgsOrgIssues(o.context, o.GetOrgsOrgIssuesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{org}/members"] = NewGetOrgsOrgMembers(o.context, o.GetOrgsOrgMembersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{org}/members/{username}"] = NewGetOrgsOrgMembersUsername(o.context, o.GetOrgsOrgMembersUsernameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{org}/public_members"] = NewGetOrgsOrgPublicMembers(o.context, o.GetOrgsOrgPublicMembersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{org}/public_members/{username}"] = NewGetOrgsOrgPublicMembersUsername(o.context, o.GetOrgsOrgPublicMembersUsernameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{org}/repos"] = NewGetOrgsOrgRepos(o.context, o.GetOrgsOrgReposHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{org}/teams"] = NewGetOrgsOrgTeams(o.context, o.GetOrgsOrgTeamsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rate_limit"] = NewGetRateLimit(o.context, o.GetRateLimitHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}"] = NewGetReposOwnerRepo(o.context, o.GetReposOwnerRepoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/{archive_format}/{path}"] = NewGetReposOwnerRepoArchiveFormatPath(o.context, o.GetReposOwnerRepoArchiveFormatPathHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/assignees"] = NewGetReposOwnerRepoAssignees(o.context, o.GetReposOwnerRepoAssigneesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/assignees/{assignee}"] = NewGetReposOwnerRepoAssigneesAssignee(o.context, o.GetReposOwnerRepoAssigneesAssigneeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/branches"] = NewGetReposOwnerRepoBranches(o.context, o.GetReposOwnerRepoBranchesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/branches/{branch}"] = NewGetReposOwnerRepoBranchesBranch(o.context, o.GetReposOwnerRepoBranchesBranchHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/collaborators"] = NewGetReposOwnerRepoCollaborators(o.context, o.GetReposOwnerRepoCollaboratorsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/collaborators/{user}"] = NewGetReposOwnerRepoCollaboratorsUser(o.context, o.GetReposOwnerRepoCollaboratorsUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/comments"] = NewGetReposOwnerRepoComments(o.context, o.GetReposOwnerRepoCommentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/comments/{commentId}"] = NewGetReposOwnerRepoCommentsCommentID(o.context, o.GetReposOwnerRepoCommentsCommentIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/commits"] = NewGetReposOwnerRepoCommits(o.context, o.GetReposOwnerRepoCommitsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/commits/{ref}/status"] = NewGetReposOwnerRepoCommitsRefStatus(o.context, o.GetReposOwnerRepoCommitsRefStatusHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/commits/{shaCode}"] = NewGetReposOwnerRepoCommitsShaCode(o.context, o.GetReposOwnerRepoCommitsShaCodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/commits/{shaCode}/comments"] = NewGetReposOwnerRepoCommitsShaCodeComments(o.context, o.GetReposOwnerRepoCommitsShaCodeCommentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/compare/{baseId}...{headId}"] = NewGetReposOwnerRepoCompareBaseIDHeadID(o.context, o.GetReposOwnerRepoCompareBaseIDHeadIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/contents/{path}"] = NewGetReposOwnerRepoContentsPath(o.context, o.GetReposOwnerRepoContentsPathHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/contributors"] = NewGetReposOwnerRepoContributors(o.context, o.GetReposOwnerRepoContributorsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/deployments"] = NewGetReposOwnerRepoDeployments(o.context, o.GetReposOwnerRepoDeploymentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/deployments/{id}/statuses"] = NewGetReposOwnerRepoDeploymentsIDStatuses(o.context, o.GetReposOwnerRepoDeploymentsIDStatusesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/downloads"] = NewGetReposOwnerRepoDownloads(o.context, o.GetReposOwnerRepoDownloadsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/downloads/{downloadId}"] = NewGetReposOwnerRepoDownloadsDownloadID(o.context, o.GetReposOwnerRepoDownloadsDownloadIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/events"] = NewGetReposOwnerRepoEvents(o.context, o.GetReposOwnerRepoEventsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/forks"] = NewGetReposOwnerRepoForks(o.context, o.GetReposOwnerRepoForksHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/git/blobs/{shaCode}"] = NewGetReposOwnerRepoGitBlobsShaCode(o.context, o.GetReposOwnerRepoGitBlobsShaCodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/git/commits/{shaCode}"] = NewGetReposOwnerRepoGitCommitsShaCode(o.context, o.GetReposOwnerRepoGitCommitsShaCodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/git/refs"] = NewGetReposOwnerRepoGitRefs(o.context, o.GetReposOwnerRepoGitRefsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/git/refs/{ref}"] = NewGetReposOwnerRepoGitRefsRef(o.context, o.GetReposOwnerRepoGitRefsRefHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/git/tags/{shaCode}"] = NewGetReposOwnerRepoGitTagsShaCode(o.context, o.GetReposOwnerRepoGitTagsShaCodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/git/trees/{shaCode}"] = NewGetReposOwnerRepoGitTreesShaCode(o.context, o.GetReposOwnerRepoGitTreesShaCodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/hooks"] = NewGetReposOwnerRepoHooks(o.context, o.GetReposOwnerRepoHooksHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/hooks/{hookId}"] = NewGetReposOwnerRepoHooksHookID(o.context, o.GetReposOwnerRepoHooksHookIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/issues"] = NewGetReposOwnerRepoIssues(o.context, o.GetReposOwnerRepoIssuesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/issues/comments"] = NewGetReposOwnerRepoIssuesComments(o.context, o.GetReposOwnerRepoIssuesCommentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/issues/comments/{commentId}"] = NewGetReposOwnerRepoIssuesCommentsCommentID(o.context, o.GetReposOwnerRepoIssuesCommentsCommentIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/issues/events"] = NewGetReposOwnerRepoIssuesEvents(o.context, o.GetReposOwnerRepoIssuesEventsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/issues/events/{eventId}"] = NewGetReposOwnerRepoIssuesEventsEventID(o.context, o.GetReposOwnerRepoIssuesEventsEventIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/issues/{number}"] = NewGetReposOwnerRepoIssuesNumber(o.context, o.GetReposOwnerRepoIssuesNumberHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/issues/{number}/comments"] = NewGetReposOwnerRepoIssuesNumberComments(o.context, o.GetReposOwnerRepoIssuesNumberCommentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/issues/{number}/events"] = NewGetReposOwnerRepoIssuesNumberEvents(o.context, o.GetReposOwnerRepoIssuesNumberEventsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/issues/{number}/labels"] = NewGetReposOwnerRepoIssuesNumberLabels(o.context, o.GetReposOwnerRepoIssuesNumberLabelsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/keys"] = NewGetReposOwnerRepoKeys(o.context, o.GetReposOwnerRepoKeysHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/keys/{keyId}"] = NewGetReposOwnerRepoKeysKeyID(o.context, o.GetReposOwnerRepoKeysKeyIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/labels"] = NewGetReposOwnerRepoLabels(o.context, o.GetReposOwnerRepoLabelsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/labels/{name}"] = NewGetReposOwnerRepoLabelsName(o.context, o.GetReposOwnerRepoLabelsNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/languages"] = NewGetReposOwnerRepoLanguages(o.context, o.GetReposOwnerRepoLanguagesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/milestones"] = NewGetReposOwnerRepoMilestones(o.context, o.GetReposOwnerRepoMilestonesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/milestones/{number}"] = NewGetReposOwnerRepoMilestonesNumber(o.context, o.GetReposOwnerRepoMilestonesNumberHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/milestones/{number}/labels"] = NewGetReposOwnerRepoMilestonesNumberLabels(o.context, o.GetReposOwnerRepoMilestonesNumberLabelsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/notifications"] = NewGetReposOwnerRepoNotifications(o.context, o.GetReposOwnerRepoNotificationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/pulls"] = NewGetReposOwnerRepoPulls(o.context, o.GetReposOwnerRepoPullsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/pulls/comments"] = NewGetReposOwnerRepoPullsComments(o.context, o.GetReposOwnerRepoPullsCommentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/pulls/comments/{commentId}"] = NewGetReposOwnerRepoPullsCommentsCommentID(o.context, o.GetReposOwnerRepoPullsCommentsCommentIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/pulls/{number}"] = NewGetReposOwnerRepoPullsNumber(o.context, o.GetReposOwnerRepoPullsNumberHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/pulls/{number}/comments"] = NewGetReposOwnerRepoPullsNumberComments(o.context, o.GetReposOwnerRepoPullsNumberCommentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/pulls/{number}/commits"] = NewGetReposOwnerRepoPullsNumberCommits(o.context, o.GetReposOwnerRepoPullsNumberCommitsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/pulls/{number}/files"] = NewGetReposOwnerRepoPullsNumberFiles(o.context, o.GetReposOwnerRepoPullsNumberFilesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/pulls/{number}/merge"] = NewGetReposOwnerRepoPullsNumberMerge(o.context, o.GetReposOwnerRepoPullsNumberMergeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/readme"] = NewGetReposOwnerRepoReadme(o.context, o.GetReposOwnerRepoReadmeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/releases"] = NewGetReposOwnerRepoReleases(o.context, o.GetReposOwnerRepoReleasesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/releases/assets/{id}"] = NewGetReposOwnerRepoReleasesAssetsID(o.context, o.GetReposOwnerRepoReleasesAssetsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/releases/{id}"] = NewGetReposOwnerRepoReleasesID(o.context, o.GetReposOwnerRepoReleasesIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/releases/{id}/assets"] = NewGetReposOwnerRepoReleasesIDAssets(o.context, o.GetReposOwnerRepoReleasesIDAssetsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/stargazers"] = NewGetReposOwnerRepoStargazers(o.context, o.GetReposOwnerRepoStargazersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/stats/code_frequency"] = NewGetReposOwnerRepoStatsCodeFrequency(o.context, o.GetReposOwnerRepoStatsCodeFrequencyHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/stats/commit_activity"] = NewGetReposOwnerRepoStatsCommitActivity(o.context, o.GetReposOwnerRepoStatsCommitActivityHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/stats/contributors"] = NewGetReposOwnerRepoStatsContributors(o.context, o.GetReposOwnerRepoStatsContributorsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/stats/participation"] = NewGetReposOwnerRepoStatsParticipation(o.context, o.GetReposOwnerRepoStatsParticipationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/stats/punch_card"] = NewGetReposOwnerRepoStatsPunchCard(o.context, o.GetReposOwnerRepoStatsPunchCardHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/statuses/{ref}"] = NewGetReposOwnerRepoStatusesRef(o.context, o.GetReposOwnerRepoStatusesRefHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/subscribers"] = NewGetReposOwnerRepoSubscribers(o.context, o.GetReposOwnerRepoSubscribersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/subscription"] = NewGetReposOwnerRepoSubscription(o.context, o.GetReposOwnerRepoSubscriptionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/tags"] = NewGetReposOwnerRepoTags(o.context, o.GetReposOwnerRepoTagsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/teams"] = NewGetReposOwnerRepoTeams(o.context, o.GetReposOwnerRepoTeamsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repos/{owner}/{repo}/watchers"] = NewGetReposOwnerRepoWatchers(o.context, o.GetReposOwnerRepoWatchersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/repositories"] = NewGetRepositories(o.context, o.GetRepositoriesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/search/code"] = NewGetSearchCode(o.context, o.GetSearchCodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/search/issues"] = NewGetSearchIssues(o.context, o.GetSearchIssuesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/search/repositories"] = NewGetSearchRepositories(o.context, o.GetSearchRepositoriesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/search/users"] = NewGetSearchUsers(o.context, o.GetSearchUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamId}"] = NewGetTeamsTeamID(o.context, o.GetTeamsTeamIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamId}/members"] = NewGetTeamsTeamIDMembers(o.context, o.GetTeamsTeamIDMembersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamId}/members/{username}"] = NewGetTeamsTeamIDMembersUsername(o.context, o.GetTeamsTeamIDMembersUsernameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamId}/memberships/{username}"] = NewGetTeamsTeamIDMembershipsUsername(o.context, o.GetTeamsTeamIDMembershipsUsernameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamId}/repos"] = NewGetTeamsTeamIDRepos(o.context, o.GetTeamsTeamIDReposHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamId}/repos/{owner}/{repo}"] = NewGetTeamsTeamIDReposOwnerRepo(o.context, o.GetTeamsTeamIDReposOwnerRepoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user"] = NewGetUser(o.context, o.GetUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/emails"] = NewGetUserEmails(o.context, o.GetUserEmailsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/followers"] = NewGetUserFollowers(o.context, o.GetUserFollowersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/following"] = NewGetUserFollowing(o.context, o.GetUserFollowingHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/following/{username}"] = NewGetUserFollowingUsername(o.context, o.GetUserFollowingUsernameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/issues"] = NewGetUserIssues(o.context, o.GetUserIssuesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/keys"] = NewGetUserKeys(o.context, o.GetUserKeysHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/keys/{keyId}"] = NewGetUserKeysKeyID(o.context, o.GetUserKeysKeyIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/orgs"] = NewGetUserOrgs(o.context, o.GetUserOrgsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/repos"] = NewGetUserRepos(o.context, o.GetUserReposHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/starred"] = NewGetUserStarred(o.context, o.GetUserStarredHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/starred/{owner}/{repo}"] = NewGetUserStarredOwnerRepo(o.context, o.GetUserStarredOwnerRepoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/subscriptions"] = NewGetUserSubscriptions(o.context, o.GetUserSubscriptionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/subscriptions/{owner}/{repo}"] = NewGetUserSubscriptionsOwnerRepo(o.context, o.GetUserSubscriptionsOwnerRepoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/teams"] = NewGetUserTeams(o.context, o.GetUserTeamsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = NewGetUsers(o.context, o.GetUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}"] = NewGetUsersUsername(o.context, o.GetUsersUsernameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/events"] = NewGetUsersUsernameEvents(o.context, o.GetUsersUsernameEventsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/events/orgs/{org}"] = NewGetUsersUsernameEventsOrgsOrg(o.context, o.GetUsersUsernameEventsOrgsOrgHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/followers"] = NewGetUsersUsernameFollowers(o.context, o.GetUsersUsernameFollowersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/following/{targetUser}"] = NewGetUsersUsernameFollowingTargetUser(o.context, o.GetUsersUsernameFollowingTargetUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/gists"] = NewGetUsersUsernameGists(o.context, o.GetUsersUsernameGistsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/keys"] = NewGetUsersUsernameKeys(o.context, o.GetUsersUsernameKeysHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/orgs"] = NewGetUsersUsernameOrgs(o.context, o.GetUsersUsernameOrgsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/received_events"] = NewGetUsersUsernameReceivedEvents(o.context, o.GetUsersUsernameReceivedEventsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/received_events/public"] = NewGetUsersUsernameReceivedEventsPublic(o.context, o.GetUsersUsernameReceivedEventsPublicHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/repos"] = NewGetUsersUsernameRepos(o.context, o.GetUsersUsernameReposHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/starred"] = NewGetUsersUsernameStarred(o.context, o.GetUsersUsernameStarredHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/subscriptions"] = NewGetUsersUsernameSubscriptions(o.context, o.GetUsersUsernameSubscriptionsHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/gists/{id}"] = NewPatchGistsID(o.context, o.PatchGistsIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/gists/{id}/comments/{commentId}"] = NewPatchGistsIDCommentsCommentID(o.context, o.PatchGistsIDCommentsCommentIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/notifications/threads/{id}"] = NewPatchNotificationsThreadsID(o.context, o.PatchNotificationsThreadsIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/orgs/{org}"] = NewPatchOrgsOrg(o.context, o.PatchOrgsOrgHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/repos/{owner}/{repo}"] = NewPatchReposOwnerRepo(o.context, o.PatchReposOwnerRepoHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/repos/{owner}/{repo}/comments/{commentId}"] = NewPatchReposOwnerRepoCommentsCommentID(o.context, o.PatchReposOwnerRepoCommentsCommentIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/repos/{owner}/{repo}/git/refs/{ref}"] = NewPatchReposOwnerRepoGitRefsRef(o.context, o.PatchReposOwnerRepoGitRefsRefHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/repos/{owner}/{repo}/hooks/{hookId}"] = NewPatchReposOwnerRepoHooksHookID(o.context, o.PatchReposOwnerRepoHooksHookIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/repos/{owner}/{repo}/issues/comments/{commentId}"] = NewPatchReposOwnerRepoIssuesCommentsCommentID(o.context, o.PatchReposOwnerRepoIssuesCommentsCommentIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/repos/{owner}/{repo}/issues/{number}"] = NewPatchReposOwnerRepoIssuesNumber(o.context, o.PatchReposOwnerRepoIssuesNumberHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/repos/{owner}/{repo}/labels/{name}"] = NewPatchReposOwnerRepoLabelsName(o.context, o.PatchReposOwnerRepoLabelsNameHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/repos/{owner}/{repo}/milestones/{number}"] = NewPatchReposOwnerRepoMilestonesNumber(o.context, o.PatchReposOwnerRepoMilestonesNumberHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/repos/{owner}/{repo}/pulls/comments/{commentId}"] = NewPatchReposOwnerRepoPullsCommentsCommentID(o.context, o.PatchReposOwnerRepoPullsCommentsCommentIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/repos/{owner}/{repo}/pulls/{number}"] = NewPatchReposOwnerRepoPullsNumber(o.context, o.PatchReposOwnerRepoPullsNumberHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/repos/{owner}/{repo}/releases/assets/{id}"] = NewPatchReposOwnerRepoReleasesAssetsID(o.context, o.PatchReposOwnerRepoReleasesAssetsIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/repos/{owner}/{repo}/releases/{id}"] = NewPatchReposOwnerRepoReleasesID(o.context, o.PatchReposOwnerRepoReleasesIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/teams/{teamId}"] = NewPatchTeamsTeamID(o.context, o.PatchTeamsTeamIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/user"] = NewPatchUser(o.context, o.PatchUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/gists"] = NewPostGists(o.context, o.PostGistsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/gists/{id}/comments"] = NewPostGistsIDComments(o.context, o.PostGistsIDCommentsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/gists/{id}/forks"] = NewPostGistsIDForks(o.context, o.PostGistsIDForksHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/markdown"] = NewPostMarkdown(o.context, o.PostMarkdownHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/markdown/raw"] = NewPostMarkdownRaw(o.context, o.PostMarkdownRawHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs/{org}/repos"] = NewPostOrgsOrgRepos(o.context, o.PostOrgsOrgReposHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs/{org}/teams"] = NewPostOrgsOrgTeams(o.context, o.PostOrgsOrgTeamsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/commits/{shaCode}/comments"] = NewPostReposOwnerRepoCommitsShaCodeComments(o.context, o.PostReposOwnerRepoCommitsShaCodeCommentsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/deployments"] = NewPostReposOwnerRepoDeployments(o.context, o.PostReposOwnerRepoDeploymentsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/deployments/{id}/statuses"] = NewPostReposOwnerRepoDeploymentsIDStatuses(o.context, o.PostReposOwnerRepoDeploymentsIDStatusesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/forks"] = NewPostReposOwnerRepoForks(o.context, o.PostReposOwnerRepoForksHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/git/blobs"] = NewPostReposOwnerRepoGitBlobs(o.context, o.PostReposOwnerRepoGitBlobsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/git/commits"] = NewPostReposOwnerRepoGitCommits(o.context, o.PostReposOwnerRepoGitCommitsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/git/refs"] = NewPostReposOwnerRepoGitRefs(o.context, o.PostReposOwnerRepoGitRefsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/git/tags"] = NewPostReposOwnerRepoGitTags(o.context, o.PostReposOwnerRepoGitTagsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/git/trees"] = NewPostReposOwnerRepoGitTrees(o.context, o.PostReposOwnerRepoGitTreesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/hooks"] = NewPostReposOwnerRepoHooks(o.context, o.PostReposOwnerRepoHooksHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/hooks/{hookId}/tests"] = NewPostReposOwnerRepoHooksHookIDTests(o.context, o.PostReposOwnerRepoHooksHookIDTestsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/issues"] = NewPostReposOwnerRepoIssues(o.context, o.PostReposOwnerRepoIssuesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/issues/{number}/comments"] = NewPostReposOwnerRepoIssuesNumberComments(o.context, o.PostReposOwnerRepoIssuesNumberCommentsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/issues/{number}/labels"] = NewPostReposOwnerRepoIssuesNumberLabels(o.context, o.PostReposOwnerRepoIssuesNumberLabelsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/keys"] = NewPostReposOwnerRepoKeys(o.context, o.PostReposOwnerRepoKeysHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/labels"] = NewPostReposOwnerRepoLabels(o.context, o.PostReposOwnerRepoLabelsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/merges"] = NewPostReposOwnerRepoMerges(o.context, o.PostReposOwnerRepoMergesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/milestones"] = NewPostReposOwnerRepoMilestones(o.context, o.PostReposOwnerRepoMilestonesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/pulls"] = NewPostReposOwnerRepoPulls(o.context, o.PostReposOwnerRepoPullsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/pulls/{number}/comments"] = NewPostReposOwnerRepoPullsNumberComments(o.context, o.PostReposOwnerRepoPullsNumberCommentsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/releases"] = NewPostReposOwnerRepoReleases(o.context, o.PostReposOwnerRepoReleasesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/repos/{owner}/{repo}/statuses/{ref}"] = NewPostReposOwnerRepoStatusesRef(o.context, o.PostReposOwnerRepoStatusesRefHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/emails"] = NewPostUserEmails(o.context, o.PostUserEmailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/keys"] = NewPostUserKeys(o.context, o.PostUserKeysHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/repos"] = NewPostUserRepos(o.context, o.PostUserReposHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/gists/{id}/star"] = NewPutGistsIDStar(o.context, o.PutGistsIDStarHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/notifications"] = NewPutNotifications(o.context, o.PutNotificationsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/notifications/threads/{id}/subscription"] = NewPutNotificationsThreadsIDSubscription(o.context, o.PutNotificationsThreadsIDSubscriptionHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/orgs/{org}/public_members/{username}"] = NewPutOrgsOrgPublicMembersUsername(o.context, o.PutOrgsOrgPublicMembersUsernameHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/repos/{owner}/{repo}/collaborators/{user}"] = NewPutReposOwnerRepoCollaboratorsUser(o.context, o.PutReposOwnerRepoCollaboratorsUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/repos/{owner}/{repo}/contents/{path}"] = NewPutReposOwnerRepoContentsPath(o.context, o.PutReposOwnerRepoContentsPathHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/repos/{owner}/{repo}/issues/{number}/labels"] = NewPutReposOwnerRepoIssuesNumberLabels(o.context, o.PutReposOwnerRepoIssuesNumberLabelsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/repos/{owner}/{repo}/notifications"] = NewPutReposOwnerRepoNotifications(o.context, o.PutReposOwnerRepoNotificationsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/repos/{owner}/{repo}/pulls/{number}/merge"] = NewPutReposOwnerRepoPullsNumberMerge(o.context, o.PutReposOwnerRepoPullsNumberMergeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/repos/{owner}/{repo}/subscription"] = NewPutReposOwnerRepoSubscription(o.context, o.PutReposOwnerRepoSubscriptionHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamId}/members/{username}"] = NewPutTeamsTeamIDMembersUsername(o.context, o.PutTeamsTeamIDMembersUsernameHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamId}/memberships/{username}"] = NewPutTeamsTeamIDMembershipsUsername(o.context, o.PutTeamsTeamIDMembershipsUsernameHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamId}/repos/{org}/{repo}"] = NewPutTeamsTeamIDReposOrgRepo(o.context, o.PutTeamsTeamIDReposOrgRepoHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/following/{username}"] = NewPutUserFollowingUsername(o.context, o.PutUserFollowingUsernameHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/starred/{owner}/{repo}"] = NewPutUserStarredOwnerRepo(o.context, o.PutUserStarredOwnerRepoHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/subscriptions/{owner}/{repo}"] = NewPutUserSubscriptionsOwnerRepo(o.context, o.PutUserSubscriptionsOwnerRepoHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *GitapiAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *GitapiAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
