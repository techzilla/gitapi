// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostReposOwnerRepoGitTagsHandlerFunc turns a function with the right signature into a post repos owner repo git tags handler
type PostReposOwnerRepoGitTagsHandlerFunc func(PostReposOwnerRepoGitTagsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostReposOwnerRepoGitTagsHandlerFunc) Handle(params PostReposOwnerRepoGitTagsParams) middleware.Responder {
	return fn(params)
}

// PostReposOwnerRepoGitTagsHandler interface for that can handle valid post repos owner repo git tags params
type PostReposOwnerRepoGitTagsHandler interface {
	Handle(PostReposOwnerRepoGitTagsParams) middleware.Responder
}

// NewPostReposOwnerRepoGitTags creates a new http.Handler for the post repos owner repo git tags operation
func NewPostReposOwnerRepoGitTags(ctx *middleware.Context, handler PostReposOwnerRepoGitTagsHandler) *PostReposOwnerRepoGitTags {
	return &PostReposOwnerRepoGitTags{Context: ctx, Handler: handler}
}

/*PostReposOwnerRepoGitTags swagger:route POST /repos/{owner}/{repo}/git/tags postReposOwnerRepoGitTags

Create a Tag Object.
Note that creating a tag object does not create the reference that makes a
tag in Git. If you want to create an annotated tag in Git, you have to do
this call to create the tag object, and then create the refs/tags/[tag]
reference. If you want to create a lightweight tag, you only have to create
the tag reference - this call would be unnecessary.


*/
type PostReposOwnerRepoGitTags struct {
	Context *middleware.Context
	Handler PostReposOwnerRepoGitTagsHandler
}

func (o *PostReposOwnerRepoGitTags) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostReposOwnerRepoGitTagsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
