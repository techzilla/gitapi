// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutUserStarredOwnerRepoHandlerFunc turns a function with the right signature into a put user starred owner repo handler
type PutUserStarredOwnerRepoHandlerFunc func(PutUserStarredOwnerRepoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutUserStarredOwnerRepoHandlerFunc) Handle(params PutUserStarredOwnerRepoParams) middleware.Responder {
	return fn(params)
}

// PutUserStarredOwnerRepoHandler interface for that can handle valid put user starred owner repo params
type PutUserStarredOwnerRepoHandler interface {
	Handle(PutUserStarredOwnerRepoParams) middleware.Responder
}

// NewPutUserStarredOwnerRepo creates a new http.Handler for the put user starred owner repo operation
func NewPutUserStarredOwnerRepo(ctx *middleware.Context, handler PutUserStarredOwnerRepoHandler) *PutUserStarredOwnerRepo {
	return &PutUserStarredOwnerRepo{Context: ctx, Handler: handler}
}

/*PutUserStarredOwnerRepo swagger:route PUT /user/starred/{owner}/{repo} putUserStarredOwnerRepo

Star a repository.

*/
type PutUserStarredOwnerRepo struct {
	Context *middleware.Context
	Handler PutUserStarredOwnerRepoHandler
}

func (o *PutUserStarredOwnerRepo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutUserStarredOwnerRepoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
