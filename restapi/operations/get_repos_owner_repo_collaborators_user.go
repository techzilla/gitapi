// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetReposOwnerRepoCollaboratorsUserHandlerFunc turns a function with the right signature into a get repos owner repo collaborators user handler
type GetReposOwnerRepoCollaboratorsUserHandlerFunc func(GetReposOwnerRepoCollaboratorsUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReposOwnerRepoCollaboratorsUserHandlerFunc) Handle(params GetReposOwnerRepoCollaboratorsUserParams) middleware.Responder {
	return fn(params)
}

// GetReposOwnerRepoCollaboratorsUserHandler interface for that can handle valid get repos owner repo collaborators user params
type GetReposOwnerRepoCollaboratorsUserHandler interface {
	Handle(GetReposOwnerRepoCollaboratorsUserParams) middleware.Responder
}

// NewGetReposOwnerRepoCollaboratorsUser creates a new http.Handler for the get repos owner repo collaborators user operation
func NewGetReposOwnerRepoCollaboratorsUser(ctx *middleware.Context, handler GetReposOwnerRepoCollaboratorsUserHandler) *GetReposOwnerRepoCollaboratorsUser {
	return &GetReposOwnerRepoCollaboratorsUser{Context: ctx, Handler: handler}
}

/*GetReposOwnerRepoCollaboratorsUser swagger:route GET /repos/{owner}/{repo}/collaborators/{user} getReposOwnerRepoCollaboratorsUser

Check if user is a collaborator

*/
type GetReposOwnerRepoCollaboratorsUser struct {
	Context *middleware.Context
	Handler GetReposOwnerRepoCollaboratorsUserHandler
}

func (o *GetReposOwnerRepoCollaboratorsUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetReposOwnerRepoCollaboratorsUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
