// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetReposOwnerRepoSubscribersHandlerFunc turns a function with the right signature into a get repos owner repo subscribers handler
type GetReposOwnerRepoSubscribersHandlerFunc func(GetReposOwnerRepoSubscribersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReposOwnerRepoSubscribersHandlerFunc) Handle(params GetReposOwnerRepoSubscribersParams) middleware.Responder {
	return fn(params)
}

// GetReposOwnerRepoSubscribersHandler interface for that can handle valid get repos owner repo subscribers params
type GetReposOwnerRepoSubscribersHandler interface {
	Handle(GetReposOwnerRepoSubscribersParams) middleware.Responder
}

// NewGetReposOwnerRepoSubscribers creates a new http.Handler for the get repos owner repo subscribers operation
func NewGetReposOwnerRepoSubscribers(ctx *middleware.Context, handler GetReposOwnerRepoSubscribersHandler) *GetReposOwnerRepoSubscribers {
	return &GetReposOwnerRepoSubscribers{Context: ctx, Handler: handler}
}

/*GetReposOwnerRepoSubscribers swagger:route GET /repos/{owner}/{repo}/subscribers getReposOwnerRepoSubscribers

List watchers.

*/
type GetReposOwnerRepoSubscribers struct {
	Context *middleware.Context
	Handler GetReposOwnerRepoSubscribersHandler
}

func (o *GetReposOwnerRepoSubscribers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetReposOwnerRepoSubscribersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
