// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUserIssuesHandlerFunc turns a function with the right signature into a get user issues handler
type GetUserIssuesHandlerFunc func(GetUserIssuesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserIssuesHandlerFunc) Handle(params GetUserIssuesParams) middleware.Responder {
	return fn(params)
}

// GetUserIssuesHandler interface for that can handle valid get user issues params
type GetUserIssuesHandler interface {
	Handle(GetUserIssuesParams) middleware.Responder
}

// NewGetUserIssues creates a new http.Handler for the get user issues operation
func NewGetUserIssues(ctx *middleware.Context, handler GetUserIssuesHandler) *GetUserIssues {
	return &GetUserIssues{Context: ctx, Handler: handler}
}

/*GetUserIssues swagger:route GET /user/issues getUserIssues

List issues.
List all issues across owned and member repositories for the authenticated
user.


*/
type GetUserIssues struct {
	Context *middleware.Context
	Handler GetUserIssuesHandler
}

func (o *GetUserIssues) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserIssuesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
