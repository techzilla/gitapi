// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutReposOwnerRepoNotificationsHandlerFunc turns a function with the right signature into a put repos owner repo notifications handler
type PutReposOwnerRepoNotificationsHandlerFunc func(PutReposOwnerRepoNotificationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutReposOwnerRepoNotificationsHandlerFunc) Handle(params PutReposOwnerRepoNotificationsParams) middleware.Responder {
	return fn(params)
}

// PutReposOwnerRepoNotificationsHandler interface for that can handle valid put repos owner repo notifications params
type PutReposOwnerRepoNotificationsHandler interface {
	Handle(PutReposOwnerRepoNotificationsParams) middleware.Responder
}

// NewPutReposOwnerRepoNotifications creates a new http.Handler for the put repos owner repo notifications operation
func NewPutReposOwnerRepoNotifications(ctx *middleware.Context, handler PutReposOwnerRepoNotificationsHandler) *PutReposOwnerRepoNotifications {
	return &PutReposOwnerRepoNotifications{Context: ctx, Handler: handler}
}

/*PutReposOwnerRepoNotifications swagger:route PUT /repos/{owner}/{repo}/notifications putReposOwnerRepoNotifications

Mark notifications as read in a repository.
Marking all notifications in a repository as "read" removes them from the
default view on GitHub.com.


*/
type PutReposOwnerRepoNotifications struct {
	Context *middleware.Context
	Handler PutReposOwnerRepoNotificationsHandler
}

func (o *PutReposOwnerRepoNotifications) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutReposOwnerRepoNotificationsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
