// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PatchReposOwnerRepoPullsCommentsCommentIDHandlerFunc turns a function with the right signature into a patch repos owner repo pulls comments comment ID handler
type PatchReposOwnerRepoPullsCommentsCommentIDHandlerFunc func(PatchReposOwnerRepoPullsCommentsCommentIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchReposOwnerRepoPullsCommentsCommentIDHandlerFunc) Handle(params PatchReposOwnerRepoPullsCommentsCommentIDParams) middleware.Responder {
	return fn(params)
}

// PatchReposOwnerRepoPullsCommentsCommentIDHandler interface for that can handle valid patch repos owner repo pulls comments comment ID params
type PatchReposOwnerRepoPullsCommentsCommentIDHandler interface {
	Handle(PatchReposOwnerRepoPullsCommentsCommentIDParams) middleware.Responder
}

// NewPatchReposOwnerRepoPullsCommentsCommentID creates a new http.Handler for the patch repos owner repo pulls comments comment ID operation
func NewPatchReposOwnerRepoPullsCommentsCommentID(ctx *middleware.Context, handler PatchReposOwnerRepoPullsCommentsCommentIDHandler) *PatchReposOwnerRepoPullsCommentsCommentID {
	return &PatchReposOwnerRepoPullsCommentsCommentID{Context: ctx, Handler: handler}
}

/*PatchReposOwnerRepoPullsCommentsCommentID swagger:route PATCH /repos/{owner}/{repo}/pulls/comments/{commentId} patchReposOwnerRepoPullsCommentsCommentId

Edit a comment.

*/
type PatchReposOwnerRepoPullsCommentsCommentID struct {
	Context *middleware.Context
	Handler PatchReposOwnerRepoPullsCommentsCommentIDHandler
}

func (o *PatchReposOwnerRepoPullsCommentsCommentID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchReposOwnerRepoPullsCommentsCommentIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
