// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetGistsIDCommentsCommentIDHandlerFunc turns a function with the right signature into a get gists ID comments comment ID handler
type GetGistsIDCommentsCommentIDHandlerFunc func(GetGistsIDCommentsCommentIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGistsIDCommentsCommentIDHandlerFunc) Handle(params GetGistsIDCommentsCommentIDParams) middleware.Responder {
	return fn(params)
}

// GetGistsIDCommentsCommentIDHandler interface for that can handle valid get gists ID comments comment ID params
type GetGistsIDCommentsCommentIDHandler interface {
	Handle(GetGistsIDCommentsCommentIDParams) middleware.Responder
}

// NewGetGistsIDCommentsCommentID creates a new http.Handler for the get gists ID comments comment ID operation
func NewGetGistsIDCommentsCommentID(ctx *middleware.Context, handler GetGistsIDCommentsCommentIDHandler) *GetGistsIDCommentsCommentID {
	return &GetGistsIDCommentsCommentID{Context: ctx, Handler: handler}
}

/*GetGistsIDCommentsCommentID swagger:route GET /gists/{id}/comments/{commentId} getGistsIdCommentsCommentId

Get a single comment.

*/
type GetGistsIDCommentsCommentID struct {
	Context *middleware.Context
	Handler GetGistsIDCommentsCommentIDHandler
}

func (o *GetGistsIDCommentsCommentID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetGistsIDCommentsCommentIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
