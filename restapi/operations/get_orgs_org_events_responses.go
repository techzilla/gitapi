// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/techzilla/gitapi/models"
)

// GetOrgsOrgEventsOKCode is the HTTP code returned for type GetOrgsOrgEventsOK
const GetOrgsOrgEventsOKCode int = 200

/*GetOrgsOrgEventsOK OK

swagger:response getOrgsOrgEventsOK
*/
type GetOrgsOrgEventsOK struct {

	/*
	  In: Body
	*/
	Payload *models.Events `json:"body,omitempty"`
}

// NewGetOrgsOrgEventsOK creates GetOrgsOrgEventsOK with default headers values
func NewGetOrgsOrgEventsOK() *GetOrgsOrgEventsOK {
	return &GetOrgsOrgEventsOK{}
}

// WithPayload adds the payload to the get orgs org events o k response
func (o *GetOrgsOrgEventsOK) WithPayload(payload *models.Events) *GetOrgsOrgEventsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get orgs org events o k response
func (o *GetOrgsOrgEventsOK) SetPayload(payload *models.Events) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOrgsOrgEventsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOrgsOrgEventsForbiddenCode is the HTTP code returned for type GetOrgsOrgEventsForbidden
const GetOrgsOrgEventsForbiddenCode int = 403

/*GetOrgsOrgEventsForbidden API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting
for details.


swagger:response getOrgsOrgEventsForbidden
*/
type GetOrgsOrgEventsForbidden struct {
}

// NewGetOrgsOrgEventsForbidden creates GetOrgsOrgEventsForbidden with default headers values
func NewGetOrgsOrgEventsForbidden() *GetOrgsOrgEventsForbidden {
	return &GetOrgsOrgEventsForbidden{}
}

// WriteResponse to the client
func (o *GetOrgsOrgEventsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}
