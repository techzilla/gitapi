// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostReposOwnerRepoGitTreesHandlerFunc turns a function with the right signature into a post repos owner repo git trees handler
type PostReposOwnerRepoGitTreesHandlerFunc func(PostReposOwnerRepoGitTreesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostReposOwnerRepoGitTreesHandlerFunc) Handle(params PostReposOwnerRepoGitTreesParams) middleware.Responder {
	return fn(params)
}

// PostReposOwnerRepoGitTreesHandler interface for that can handle valid post repos owner repo git trees params
type PostReposOwnerRepoGitTreesHandler interface {
	Handle(PostReposOwnerRepoGitTreesParams) middleware.Responder
}

// NewPostReposOwnerRepoGitTrees creates a new http.Handler for the post repos owner repo git trees operation
func NewPostReposOwnerRepoGitTrees(ctx *middleware.Context, handler PostReposOwnerRepoGitTreesHandler) *PostReposOwnerRepoGitTrees {
	return &PostReposOwnerRepoGitTrees{Context: ctx, Handler: handler}
}

/*PostReposOwnerRepoGitTrees swagger:route POST /repos/{owner}/{repo}/git/trees postReposOwnerRepoGitTrees

Create a Tree.
The tree creation API will take nested entries as well. If both a tree and
a nested path modifying that tree are specified, it will overwrite the
contents of that tree with the new path contents and write a new tree out.


*/
type PostReposOwnerRepoGitTrees struct {
	Context *middleware.Context
	Handler PostReposOwnerRepoGitTreesHandler
}

func (o *PostReposOwnerRepoGitTrees) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostReposOwnerRepoGitTreesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
