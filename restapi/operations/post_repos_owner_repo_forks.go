// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostReposOwnerRepoForksHandlerFunc turns a function with the right signature into a post repos owner repo forks handler
type PostReposOwnerRepoForksHandlerFunc func(PostReposOwnerRepoForksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostReposOwnerRepoForksHandlerFunc) Handle(params PostReposOwnerRepoForksParams) middleware.Responder {
	return fn(params)
}

// PostReposOwnerRepoForksHandler interface for that can handle valid post repos owner repo forks params
type PostReposOwnerRepoForksHandler interface {
	Handle(PostReposOwnerRepoForksParams) middleware.Responder
}

// NewPostReposOwnerRepoForks creates a new http.Handler for the post repos owner repo forks operation
func NewPostReposOwnerRepoForks(ctx *middleware.Context, handler PostReposOwnerRepoForksHandler) *PostReposOwnerRepoForks {
	return &PostReposOwnerRepoForks{Context: ctx, Handler: handler}
}

/*PostReposOwnerRepoForks swagger:route POST /repos/{owner}/{repo}/forks postReposOwnerRepoForks

Create a fork.
Forking a Repository happens asynchronously. Therefore, you may have to wai
a short period before accessing the git objects. If this takes longer than 5
minutes, be sure to contact Support.


*/
type PostReposOwnerRepoForks struct {
	Context *middleware.Context
	Handler PostReposOwnerRepoForksHandler
}

func (o *PostReposOwnerRepoForks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostReposOwnerRepoForksParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
