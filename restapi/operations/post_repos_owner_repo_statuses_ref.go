// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostReposOwnerRepoStatusesRefHandlerFunc turns a function with the right signature into a post repos owner repo statuses ref handler
type PostReposOwnerRepoStatusesRefHandlerFunc func(PostReposOwnerRepoStatusesRefParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostReposOwnerRepoStatusesRefHandlerFunc) Handle(params PostReposOwnerRepoStatusesRefParams) middleware.Responder {
	return fn(params)
}

// PostReposOwnerRepoStatusesRefHandler interface for that can handle valid post repos owner repo statuses ref params
type PostReposOwnerRepoStatusesRefHandler interface {
	Handle(PostReposOwnerRepoStatusesRefParams) middleware.Responder
}

// NewPostReposOwnerRepoStatusesRef creates a new http.Handler for the post repos owner repo statuses ref operation
func NewPostReposOwnerRepoStatusesRef(ctx *middleware.Context, handler PostReposOwnerRepoStatusesRefHandler) *PostReposOwnerRepoStatusesRef {
	return &PostReposOwnerRepoStatusesRef{Context: ctx, Handler: handler}
}

/*PostReposOwnerRepoStatusesRef swagger:route POST /repos/{owner}/{repo}/statuses/{ref} postReposOwnerRepoStatusesRef

Create a Status.

*/
type PostReposOwnerRepoStatusesRef struct {
	Context *middleware.Context
	Handler PostReposOwnerRepoStatusesRefHandler
}

func (o *PostReposOwnerRepoStatusesRef) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostReposOwnerRepoStatusesRefParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
