// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutTeamsTeamIDReposOrgRepoHandlerFunc turns a function with the right signature into a put teams team ID repos org repo handler
type PutTeamsTeamIDReposOrgRepoHandlerFunc func(PutTeamsTeamIDReposOrgRepoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutTeamsTeamIDReposOrgRepoHandlerFunc) Handle(params PutTeamsTeamIDReposOrgRepoParams) middleware.Responder {
	return fn(params)
}

// PutTeamsTeamIDReposOrgRepoHandler interface for that can handle valid put teams team ID repos org repo params
type PutTeamsTeamIDReposOrgRepoHandler interface {
	Handle(PutTeamsTeamIDReposOrgRepoParams) middleware.Responder
}

// NewPutTeamsTeamIDReposOrgRepo creates a new http.Handler for the put teams team ID repos org repo operation
func NewPutTeamsTeamIDReposOrgRepo(ctx *middleware.Context, handler PutTeamsTeamIDReposOrgRepoHandler) *PutTeamsTeamIDReposOrgRepo {
	return &PutTeamsTeamIDReposOrgRepo{Context: ctx, Handler: handler}
}

/*PutTeamsTeamIDReposOrgRepo swagger:route PUT /teams/{teamId}/repos/{org}/{repo} putTeamsTeamIdReposOrgRepo

In order to add a repository to a team, the authenticated user must be an owner of the org that the team is associated with. Also, the repository must be owned by the organization, or a direct fork of a repository owned by the organization.

*/
type PutTeamsTeamIDReposOrgRepo struct {
	Context *middleware.Context
	Handler PutTeamsTeamIDReposOrgRepoHandler
}

func (o *PutTeamsTeamIDReposOrgRepo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutTeamsTeamIDReposOrgRepoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
