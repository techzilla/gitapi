// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/techzilla/gitapi/models"
)

// PostReposOwnerRepoMergesCreatedCode is the HTTP code returned for type PostReposOwnerRepoMergesCreated
const PostReposOwnerRepoMergesCreatedCode int = 201

/*PostReposOwnerRepoMergesCreated Successful Response (The resulting merge commit)

swagger:response postReposOwnerRepoMergesCreated
*/
type PostReposOwnerRepoMergesCreated struct {

	/*
	  In: Body
	*/
	Payload *models.MergesSuccessful `json:"body,omitempty"`
}

// NewPostReposOwnerRepoMergesCreated creates PostReposOwnerRepoMergesCreated with default headers values
func NewPostReposOwnerRepoMergesCreated() *PostReposOwnerRepoMergesCreated {
	return &PostReposOwnerRepoMergesCreated{}
}

// WithPayload adds the payload to the post repos owner repo merges created response
func (o *PostReposOwnerRepoMergesCreated) WithPayload(payload *models.MergesSuccessful) *PostReposOwnerRepoMergesCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post repos owner repo merges created response
func (o *PostReposOwnerRepoMergesCreated) SetPayload(payload *models.MergesSuccessful) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostReposOwnerRepoMergesCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostReposOwnerRepoMergesNoContentCode is the HTTP code returned for type PostReposOwnerRepoMergesNoContent
const PostReposOwnerRepoMergesNoContentCode int = 204

/*PostReposOwnerRepoMergesNoContent No-op response (base already contains the head, nothing to merge)

swagger:response postReposOwnerRepoMergesNoContent
*/
type PostReposOwnerRepoMergesNoContent struct {
}

// NewPostReposOwnerRepoMergesNoContent creates PostReposOwnerRepoMergesNoContent with default headers values
func NewPostReposOwnerRepoMergesNoContent() *PostReposOwnerRepoMergesNoContent {
	return &PostReposOwnerRepoMergesNoContent{}
}

// WriteResponse to the client
func (o *PostReposOwnerRepoMergesNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PostReposOwnerRepoMergesForbiddenCode is the HTTP code returned for type PostReposOwnerRepoMergesForbidden
const PostReposOwnerRepoMergesForbiddenCode int = 403

/*PostReposOwnerRepoMergesForbidden API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting
for details.


swagger:response postReposOwnerRepoMergesForbidden
*/
type PostReposOwnerRepoMergesForbidden struct {
}

// NewPostReposOwnerRepoMergesForbidden creates PostReposOwnerRepoMergesForbidden with default headers values
func NewPostReposOwnerRepoMergesForbidden() *PostReposOwnerRepoMergesForbidden {
	return &PostReposOwnerRepoMergesForbidden{}
}

// WriteResponse to the client
func (o *PostReposOwnerRepoMergesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// PostReposOwnerRepoMergesNotFoundCode is the HTTP code returned for type PostReposOwnerRepoMergesNotFound
const PostReposOwnerRepoMergesNotFoundCode int = 404

/*PostReposOwnerRepoMergesNotFound Missing base response or missing head response

swagger:response postReposOwnerRepoMergesNotFound
*/
type PostReposOwnerRepoMergesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.MergesConflict `json:"body,omitempty"`
}

// NewPostReposOwnerRepoMergesNotFound creates PostReposOwnerRepoMergesNotFound with default headers values
func NewPostReposOwnerRepoMergesNotFound() *PostReposOwnerRepoMergesNotFound {
	return &PostReposOwnerRepoMergesNotFound{}
}

// WithPayload adds the payload to the post repos owner repo merges not found response
func (o *PostReposOwnerRepoMergesNotFound) WithPayload(payload *models.MergesConflict) *PostReposOwnerRepoMergesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post repos owner repo merges not found response
func (o *PostReposOwnerRepoMergesNotFound) SetPayload(payload *models.MergesConflict) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostReposOwnerRepoMergesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostReposOwnerRepoMergesConflictCode is the HTTP code returned for type PostReposOwnerRepoMergesConflict
const PostReposOwnerRepoMergesConflictCode int = 409

/*PostReposOwnerRepoMergesConflict Merge conflict response.

swagger:response postReposOwnerRepoMergesConflict
*/
type PostReposOwnerRepoMergesConflict struct {

	/*
	  In: Body
	*/
	Payload *models.MergesConflict `json:"body,omitempty"`
}

// NewPostReposOwnerRepoMergesConflict creates PostReposOwnerRepoMergesConflict with default headers values
func NewPostReposOwnerRepoMergesConflict() *PostReposOwnerRepoMergesConflict {
	return &PostReposOwnerRepoMergesConflict{}
}

// WithPayload adds the payload to the post repos owner repo merges conflict response
func (o *PostReposOwnerRepoMergesConflict) WithPayload(payload *models.MergesConflict) *PostReposOwnerRepoMergesConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post repos owner repo merges conflict response
func (o *PostReposOwnerRepoMergesConflict) SetPayload(payload *models.MergesConflict) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostReposOwnerRepoMergesConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
