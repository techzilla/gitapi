// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteUserFollowingUsernameHandlerFunc turns a function with the right signature into a delete user following username handler
type DeleteUserFollowingUsernameHandlerFunc func(DeleteUserFollowingUsernameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteUserFollowingUsernameHandlerFunc) Handle(params DeleteUserFollowingUsernameParams) middleware.Responder {
	return fn(params)
}

// DeleteUserFollowingUsernameHandler interface for that can handle valid delete user following username params
type DeleteUserFollowingUsernameHandler interface {
	Handle(DeleteUserFollowingUsernameParams) middleware.Responder
}

// NewDeleteUserFollowingUsername creates a new http.Handler for the delete user following username operation
func NewDeleteUserFollowingUsername(ctx *middleware.Context, handler DeleteUserFollowingUsernameHandler) *DeleteUserFollowingUsername {
	return &DeleteUserFollowingUsername{Context: ctx, Handler: handler}
}

/*DeleteUserFollowingUsername swagger:route DELETE /user/following/{username} deleteUserFollowingUsername

Unfollow a user.
Unfollowing a user requires the user to be logged in and authenticated with
basic auth or OAuth with the user:follow scope.


*/
type DeleteUserFollowingUsername struct {
	Context *middleware.Context
	Handler DeleteUserFollowingUsernameHandler
}

func (o *DeleteUserFollowingUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteUserFollowingUsernameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
