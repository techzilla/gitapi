// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteReposOwnerRepoGitRefsRefHandlerFunc turns a function with the right signature into a delete repos owner repo git refs ref handler
type DeleteReposOwnerRepoGitRefsRefHandlerFunc func(DeleteReposOwnerRepoGitRefsRefParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteReposOwnerRepoGitRefsRefHandlerFunc) Handle(params DeleteReposOwnerRepoGitRefsRefParams) middleware.Responder {
	return fn(params)
}

// DeleteReposOwnerRepoGitRefsRefHandler interface for that can handle valid delete repos owner repo git refs ref params
type DeleteReposOwnerRepoGitRefsRefHandler interface {
	Handle(DeleteReposOwnerRepoGitRefsRefParams) middleware.Responder
}

// NewDeleteReposOwnerRepoGitRefsRef creates a new http.Handler for the delete repos owner repo git refs ref operation
func NewDeleteReposOwnerRepoGitRefsRef(ctx *middleware.Context, handler DeleteReposOwnerRepoGitRefsRefHandler) *DeleteReposOwnerRepoGitRefsRef {
	return &DeleteReposOwnerRepoGitRefsRef{Context: ctx, Handler: handler}
}

/*DeleteReposOwnerRepoGitRefsRef swagger:route DELETE /repos/{owner}/{repo}/git/refs/{ref} deleteReposOwnerRepoGitRefsRef

Delete a Reference
Example: Deleting a branch: DELETE /repos/octocat/Hello-World/git/refs/heads/feature-a
Example: Deleting a tag:        DELETE /repos/octocat/Hello-World/git/refs/tags/v1.0


*/
type DeleteReposOwnerRepoGitRefsRef struct {
	Context *middleware.Context
	Handler DeleteReposOwnerRepoGitRefsRefHandler
}

func (o *DeleteReposOwnerRepoGitRefsRef) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteReposOwnerRepoGitRefsRefParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
