// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TreesTreeItems trees tree items
// swagger:model treesTreeItems
type TreesTreeItems struct {

	// One of 100644 for file (blob), 100755 for executable (blob), 040000 for subdirectory (tree), 160000 for submodule (commit) or 120000 for a blob that specifies the path of a symlink.
	Mode string `json:"mode,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// SHA1 checksum ID of the object in the tree.
	Sha string `json:"sha,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this trees tree items
func (m *TreesTreeItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var treesTreeItemsTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["100644","100755","040000","160000","120000"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treesTreeItemsTypeModePropEnum = append(treesTreeItemsTypeModePropEnum, v)
	}
}

const (
	// TreesTreeItemsModeNr100644 captures enum value "100644"
	TreesTreeItemsModeNr100644 string = "100644"
	// TreesTreeItemsModeNr100755 captures enum value "100755"
	TreesTreeItemsModeNr100755 string = "100755"
	// TreesTreeItemsModeNr040000 captures enum value "040000"
	TreesTreeItemsModeNr040000 string = "040000"
	// TreesTreeItemsModeNr160000 captures enum value "160000"
	TreesTreeItemsModeNr160000 string = "160000"
	// TreesTreeItemsModeNr120000 captures enum value "120000"
	TreesTreeItemsModeNr120000 string = "120000"
)

// prop value enum
func (m *TreesTreeItems) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, treesTreeItemsTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TreesTreeItems) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

var treesTreeItemsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["blob","tree","commit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treesTreeItemsTypeTypePropEnum = append(treesTreeItemsTypeTypePropEnum, v)
	}
}

const (
	// TreesTreeItemsTypeBlob captures enum value "blob"
	TreesTreeItemsTypeBlob string = "blob"
	// TreesTreeItemsTypeTree captures enum value "tree"
	TreesTreeItemsTypeTree string = "tree"
	// TreesTreeItemsTypeCommit captures enum value "commit"
	TreesTreeItemsTypeCommit string = "commit"
)

// prop value enum
func (m *TreesTreeItems) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, treesTreeItemsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TreesTreeItems) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TreesTreeItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TreesTreeItems) UnmarshalBinary(b []byte) error {
	var res TreesTreeItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
