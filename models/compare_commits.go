// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CompareCommits compare commits
// swagger:model compare-commits
type CompareCommits struct {

	// ahead by
	AheadBy int64 `json:"ahead_by,omitempty"`

	// base commit
	BaseCommit *CompareCommitsBaseCommit `json:"base_commit,omitempty"`

	// behind by
	BehindBy int64 `json:"behind_by,omitempty"`

	// commits
	Commits CompareCommitsCommits `json:"commits"`

	// diff url
	DiffURL string `json:"diff_url,omitempty"`

	// files
	Files CompareCommitsFiles `json:"files"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// patch url
	PatchURL string `json:"patch_url,omitempty"`

	// permalink url
	PermalinkURL string `json:"permalink_url,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// total commits
	TotalCommits int64 `json:"total_commits,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits
func (m *CompareCommits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseCommit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompareCommits) validateBaseCommit(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseCommit) { // not required
		return nil
	}

	if m.BaseCommit != nil {

		if err := m.BaseCommit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_commit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompareCommits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompareCommits) UnmarshalBinary(b []byte) error {
	var res CompareCommits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
