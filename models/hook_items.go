// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HookItems hook items
// swagger:model hookItems
type HookItems struct {

	// active
	Active bool `json:"active,omitempty"`

	// config
	Config *HookItemsConfig `json:"config,omitempty"`

	// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
	CreatedAt string `json:"created_at,omitempty"`

	// events
	Events []interface{} `json:"events"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
	UpdatedAt string `json:"updated_at,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this hook items
func (m *HookItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HookItems) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {

		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

var hookItemsEventsItemsEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["push","issues","issue_comment","commit_comment","pull_request","pull_request_review_comment","gollum","watch","download","fork","fork_apply","member","public","team_add","status"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hookItemsEventsItemsEnum = append(hookItemsEventsItemsEnum, v)
	}
}

func (m *HookItems) validateEventsItemsEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, hookItemsEventsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *HookItems) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HookItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HookItems) UnmarshalBinary(b []byte) error {
	var res HookItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
