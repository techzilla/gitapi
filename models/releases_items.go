// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReleasesItems releases items
// swagger:model releasesItems
type ReleasesItems struct {

	// assets
	Assets ReleasesItemsAssets `json:"assets"`

	// assets url
	AssetsURL string `json:"assets_url,omitempty"`

	// author
	Author *ReleasesItemsAuthor `json:"author,omitempty"`

	// body
	Body string `json:"body,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// draft
	Draft bool `json:"draft,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// prerelease
	Prerelease bool `json:"prerelease,omitempty"`

	// published at
	PublishedAt string `json:"published_at,omitempty"`

	// tag name
	TagName string `json:"tag_name,omitempty"`

	// tarball url
	TarballURL string `json:"tarball_url,omitempty"`

	// target commitish
	TargetCommitish string `json:"target_commitish,omitempty"`

	// upload url
	UploadURL string `json:"upload_url,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// zipball url
	ZipballURL string `json:"zipball_url,omitempty"`
}

// Validate validates this releases items
func (m *ReleasesItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleasesItems) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {

		if err := m.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("author")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleasesItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleasesItems) UnmarshalBinary(b []byte) error {
	var res ReleasesItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
