// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PatchGistFiles patch gist files
// swagger:model patchGistFiles
type PatchGistFiles struct {

	// delete this file txt
	DeleteThisFileTxt string `json:"delete_this_file.txt,omitempty"`

	// file1 txt
	File1Txt *PatchGistFilesFile1Txt `json:"file1.txt,omitempty"`

	// new file txt
	NewFileTxt *PatchGistFilesNewFileTxt `json:"new_file.txt,omitempty"`

	// old name txt
	OldNameTxt *PatchGistFilesOldNameTxt `json:"old_name.txt,omitempty"`
}

// Validate validates this patch gist files
func (m *PatchGistFiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFile1Txt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNewFileTxt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOldNameTxt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchGistFiles) validateFile1Txt(formats strfmt.Registry) error {

	if swag.IsZero(m.File1Txt) { // not required
		return nil
	}

	if m.File1Txt != nil {

		if err := m.File1Txt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file1.txt")
			}
			return err
		}
	}

	return nil
}

func (m *PatchGistFiles) validateNewFileTxt(formats strfmt.Registry) error {

	if swag.IsZero(m.NewFileTxt) { // not required
		return nil
	}

	if m.NewFileTxt != nil {

		if err := m.NewFileTxt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_file.txt")
			}
			return err
		}
	}

	return nil
}

func (m *PatchGistFiles) validateOldNameTxt(formats strfmt.Registry) error {

	if swag.IsZero(m.OldNameTxt) { // not required
		return nil
	}

	if m.OldNameTxt != nil {

		if err := m.OldNameTxt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("old_name.txt")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchGistFiles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchGistFiles) UnmarshalBinary(b []byte) error {
	var res PatchGistFiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
