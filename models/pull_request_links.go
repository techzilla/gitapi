// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PullRequestLinks pull request links
// swagger:model pullRequestLinks
type PullRequestLinks struct {

	// comments
	Comments *PullRequestLinksComments `json:"comments,omitempty"`

	// html
	HTML *PullRequestLinksHTML `json:"html,omitempty"`

	// review comments
	ReviewComments *PullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// self
	Self *PullRequestLinksSelf `json:"self,omitempty"`
}

// Validate validates this pull request links
func (m *PullRequestLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTML(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReviewComments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullRequestLinks) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	if m.Comments != nil {

		if err := m.Comments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("comments")
			}
			return err
		}
	}

	return nil
}

func (m *PullRequestLinks) validateHTML(formats strfmt.Registry) error {

	if swag.IsZero(m.HTML) { // not required
		return nil
	}

	if m.HTML != nil {

		if err := m.HTML.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("html")
			}
			return err
		}
	}

	return nil
}

func (m *PullRequestLinks) validateReviewComments(formats strfmt.Registry) error {

	if swag.IsZero(m.ReviewComments) { // not required
		return nil
	}

	if m.ReviewComments != nil {

		if err := m.ReviewComments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("review_comments")
			}
			return err
		}
	}

	return nil
}

func (m *PullRequestLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {

		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PullRequestLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PullRequestLinks) UnmarshalBinary(b []byte) error {
	var res PullRequestLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
